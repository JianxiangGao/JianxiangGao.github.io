<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Elasticsearch的电影搜索引擎设计(二)</title>
      <link href="2021/04/17/sou-suo-yin-qing-she-ji-er/"/>
      <url>2021/04/17/sou-suo-yin-qing-she-ji-er/</url>
      
        <content type="html"><![CDATA[<p>在第一部分中，我们从IMDB网站上搜刮了数据，并将其传入到Elasticsearch中。</p><p>在本文中，我们将构建搜索引擎前端，以及两种不同的检索模型，用于搜索电影数据。</p><h2 id="Tools-准备"><a href="#Tools-准备" class="headerlink" title="Tools 准备"></a>Tools 准备</h2><p>我们的Python Flask应用程序将成为我们的Web框架，并且我们将使用jinja模板来呈现html文件。</p><p>在PyCharm中创建新的项目，选择Flask (我使用的是Python3.8，Jinja2)。</p><h2 id="检索模型的构建"><a href="#检索模型的构建" class="headerlink" title="检索模型的构建"></a>检索模型的构建</h2><p>对于我们的<code>app.py</code>文件：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> Elasticsearch<span class="token punctuation">,</span> helpers<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token keyword">from</span> SearchForm <span class="token keyword">import</span> SearchTitleFormses <span class="token operator">=</span> Elasticsearch<span class="token punctuation">(</span><span class="token string">'http://localhost:9200'</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'my secret key'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># The function to capture the fields as a new index dataset</span>    <span class="token keyword">def</span> <span class="token function">gen_bm25_Data</span><span class="token punctuation">(</span>query_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> movie <span class="token keyword">in</span> query_list<span class="token punctuation">:</span>            name <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'movie_name'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            types <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'movie_type'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            score <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'movie_score'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            director <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'director'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            stars <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'stars'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            synopsis <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            bm25f <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'BM25F'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            <span class="token keyword">yield</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"_index"</span><span class="token punctuation">:</span> <span class="token string">"bm25_dataset"</span><span class="token punctuation">,</span>                <span class="token string">"_source"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token string">"movie_name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>                    <span class="token string">"movie_type"</span><span class="token punctuation">:</span> types<span class="token punctuation">,</span>                    <span class="token string">"movie_score"</span><span class="token punctuation">:</span> score<span class="token punctuation">,</span>                    <span class="token string">"director"</span><span class="token punctuation">:</span> director<span class="token punctuation">,</span>                    <span class="token string">"stars"</span><span class="token punctuation">:</span> stars<span class="token punctuation">,</span>                    <span class="token string">"movie_synopsis"</span><span class="token punctuation">:</span> synopsis<span class="token punctuation">,</span>                    <span class="token string">"BM25F"</span><span class="token punctuation">:</span> bm25f<span class="token punctuation">,</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    form <span class="token operator">=</span> SearchTitleForms<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Search in BM25 model</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>bm25_search<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            q <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"We are looking for : "</span><span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token string">" In elastic search "</span><span class="token punctuation">)</span>            body <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>                <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token string">"multi_match"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token string">"query"</span><span class="token punctuation">:</span> q<span class="token punctuation">,</span>                        <span class="token string">"fields"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"movie_name"</span><span class="token punctuation">,</span> <span class="token string">"movie_type"</span><span class="token punctuation">,</span> <span class="token string">"movie_score"</span><span class="token punctuation">,</span> <span class="token string">"director"</span><span class="token punctuation">,</span> <span class="token string">"stars"</span><span class="token punctuation">,</span> <span class="token string">"movie_synopsis"</span><span class="token punctuation">]</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            query <span class="token operator">=</span> es<span class="token punctuation">.</span>search<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">'imdb_dataset'</span><span class="token punctuation">,</span> body<span class="token operator">=</span>body<span class="token punctuation">)</span>            results <span class="token operator">=</span> query<span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> movie <span class="token keyword">in</span> results<span class="token punctuation">:</span>                movie<span class="token punctuation">[</span><span class="token string">'_source'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'query_score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> movie<span class="token punctuation">[</span><span class="token string">'_score'</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'es_searchengine.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">,</span> response<span class="token operator">=</span>results<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Create a new dataset with the determined weight object and weight value</span>        <span class="token keyword">elif</span> form<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            select <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"select"</span><span class="token punctuation">]</span>            weight <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"weight"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            m_name_weight <span class="token operator">=</span> <span class="token boolean">False</span>            m_type_weight <span class="token operator">=</span> <span class="token boolean">False</span>            m_score_weight <span class="token operator">=</span> <span class="token boolean">False</span>            director_weight <span class="token operator">=</span> <span class="token boolean">False</span>            stars_weight <span class="token operator">=</span> <span class="token boolean">False</span>            m_synopsis_weight <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Title'</span><span class="token punctuation">:</span>                m_name_weight <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Type'</span><span class="token punctuation">:</span>                m_type_weight <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Score'</span><span class="token punctuation">:</span>                m_score_weight <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Director'</span><span class="token punctuation">:</span>                director_weight <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Actors'</span><span class="token punctuation">:</span>                stars_weight <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Synopsis'</span><span class="token punctuation">:</span>                m_synopsis_weight <span class="token operator">=</span> <span class="token boolean">True</span>            q <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"We are looking for : "</span><span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token string">" In elastic search "</span><span class="token punctuation">)</span>            body <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>                <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token string">"match_all"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            query <span class="token operator">=</span> es<span class="token punctuation">.</span>search<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">'imdb_dataset'</span><span class="token punctuation">,</span> body<span class="token operator">=</span>body<span class="token punctuation">,</span> sort<span class="token operator">=</span><span class="token string">"_score"</span><span class="token punctuation">)</span>            results <span class="token operator">=</span> query<span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span>            query_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> movie <span class="token keyword">in</span> results<span class="token punctuation">:</span>                query_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie<span class="token punctuation">[</span><span class="token string">'_source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> movie_source <span class="token keyword">in</span> query_list<span class="token punctuation">:</span>                bm25f <span class="token operator">=</span> <span class="token string">""</span>                <span class="token keyword">if</span> m_name_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                            <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_name'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                        <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_name'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">if</span> m_type_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                            <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_type'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                        <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_type'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">if</span> m_score_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                            <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_score'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_score'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                        <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_score'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_score'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">if</span> director_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                            <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'director'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'director'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'director'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'director'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">if</span> stars_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'stars'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'stars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'stars'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'stars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">if</span> m_synopsis_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                            <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                        <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                length <span class="token operator">=</span> len<span class="token punctuation">(</span>bm25f<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> <span class="token string">' None'</span>                movie_source<span class="token punctuation">[</span><span class="token string">'BM25F'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bm25f            helpers<span class="token punctuation">.</span>bulk<span class="token punctuation">(</span>es<span class="token punctuation">,</span> gen_bm25_Data<span class="token punctuation">(</span>query_list<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'es_searchengine.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Search in BM25F model</span>        <span class="token keyword">elif</span> form<span class="token punctuation">.</span>bm25f_search<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            q <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span>            body2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>                <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token string">"match"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token string">"BM25F"</span><span class="token punctuation">:</span> q                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            query <span class="token operator">=</span> es<span class="token punctuation">.</span>search<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">"bm25_dataset"</span><span class="token punctuation">,</span> body<span class="token operator">=</span>body2<span class="token punctuation">,</span> sort<span class="token operator">=</span><span class="token string">"_score"</span><span class="token punctuation">)</span>            results <span class="token operator">=</span> query<span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> bm25_movie <span class="token keyword">in</span> results<span class="token punctuation">:</span>                bm25_movie<span class="token punctuation">[</span><span class="token string">'_source'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'query_score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bm25_movie<span class="token punctuation">[</span><span class="token string">'_score'</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'es_searchengine.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">,</span> response<span class="token operator">=</span>results<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Clear the whole data in the new dataset</span>        <span class="token keyword">elif</span> form<span class="token punctuation">.</span>clear_all<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            <span class="token keyword">if</span> es<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">"bm25_dataset"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                es<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"bm25_dataset"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'es_searchengine.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'es_searchengine.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h4 id="BM25模型"><a href="#BM25模型" class="headerlink" title="BM25模型"></a>BM25模型</h4><p>该模型是Elasticsearch默认使用的，因此我们直接利用<code>multi_match</code>去查询<code>query</code>。</p><p>首先您需要了解BM25检索模型的打分方式，即对于所有documents的不同fields (即所有documents的title field、type field、director filed…)，分别进行打分得到一个分数，最后加在一起得到最后的query score (即BM25模型的最终分数)，下图可以方便您进行理解：</p><p><img src="/img/BM25%E6%89%93%E5%88%86%E6%96%B9%E5%BC%8F.png" alt="BM25打分方式"></p><blockquote><p>假如你只想制作一个简易的搜索引擎，那么你可以直接忽略BM25F模型相关的代码</p></blockquote><h4 id="BM25F模型"><a href="#BM25F模型" class="headerlink" title="BM25F模型"></a>BM25F模型</h4><p>BM25F检索模型具有不同的打分方式，即我们将所有fields合成一个field，如下图的BM25F View所示即为我们需要打分的filed，因为每个电影的简介(<code>movie_synopsis</code>)字数不同，所以我们添加一定数量的None，以确保<code>movie_synopsis</code>中都含有100个字(超出100字的我们就不管了，因为不是很多)，这样做可以保证最后打分的公平性。</p><p><img src="/img/BM25F%E6%89%93%E5%88%86%E6%96%B9%E5%BC%8F.png" alt="BM25F打分方式"></p><hr><p>对于我们的<code>SearchForm.py</code>文件：</p><ul><li>为了在此搜索引擎中处理Web表单，我们使用Flask-WTF。</li><li>对于需要其他HTML属性的字段，可以将其作为参数传递。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> Form<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> SubmitField<span class="token punctuation">,</span> StringField<span class="token punctuation">,</span> SelectField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> DataRequired<span class="token keyword">class</span> <span class="token class-name">SearchTitleForms</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#对应页面的下拉栏</span>    select <span class="token operator">=</span> SelectField<span class="token punctuation">(</span>        <span class="token string">'select'</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        choices<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Title'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Type'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Score'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Director'</span><span class="token punctuation">,</span> <span class="token string">'director'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Actors'</span><span class="token punctuation">,</span> <span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Synopsis'</span><span class="token punctuation">,</span> <span class="token string">'synopsis'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#以下分别对应各个按钮</span>    weight <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">"Weight"</span><span class="token punctuation">)</span>    dataset <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">"Create Dataset"</span><span class="token punctuation">)</span>    clear_all <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">"Clear Dataset"</span><span class="token punctuation">)</span>    q <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">"Keyword"</span><span class="token punctuation">)</span>    bm25_search <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">"BM25 Search"</span><span class="token punctuation">)</span>    bm25f_search <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">"BM25F Search"</span><span class="token punctuation">)</span></code></pre><p>我们的搜索页面将被命名为<code>templates/layout.html</code>：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family<span class="token punctuation">=</span>Pacifico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://obj-cache.cloud.ruanbekker.com/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>ES Engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Movie Search Engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span>% block content %<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span>% endblock %<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>输入搜索查询后，我们将对<code>templates/es_searchengine.html</code>页面进行POST请求，该页面将包含一些逻辑，因为它将使用传递给它的数据，并通过for循环运行：</p><pre class=" language-html"><code class="language-html"><span class="token entity" title="&#123;">&amp;#123;</span>% extends "layout.html" %<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#123;">&amp;#123;</span>% block content %<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;&amp;#123; url_for(<span class="token punctuation">'</span>search<span class="token punctuation">'</span>) &amp;#125;&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>post</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.select <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.weight.label <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.weight <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.dataset <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.clear_all <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.q.label <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.q <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.bm25_search <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.bm25f_search <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Type<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Score<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Director<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Actors<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Synopsis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Query Score<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>BM25F View<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span>% for hit in response %<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['movie_name'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['movie_type'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['movie_score'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['director'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['stars'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['movie_synopsis'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['query_score'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['BM25F'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span>% endfor %<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2021 Jianxiang Gao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>% endblock %<span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h4 id="运行Python-Flask-Web应用程序："><a href="#运行Python-Flask-Web应用程序：" class="headerlink" title="运行Python Flask Web应用程序："></a>运行Python Flask Web应用程序：</h4><p>如果一切都按计划运行，则您应该能够运行您的<code>app.py</code>，它将在端口5000上侦听：</p><pre class=" language-python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span></code></pre><p>当您访问端口5000上的端点时，您应该能够看到电影搜索引擎的主页面，该页面应如下所示：</p><p><img src="/img/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B8%BB%E9%A1%B5%E9%9D%A2.png" alt="搜索引擎主页面"></p><h4 id="BM25搜索"><a href="#BM25搜索" class="headerlink" title="BM25搜索"></a>BM25搜索</h4><p>输入任何<code>Keyword</code>，直接点击<code>BM25 Search</code>，可以得到下图所示结果：</p><p><img src="/img/BM25%E6%90%9C%E7%B4%A2.png" alt="BM25搜索"></p><h4 id="BM25F搜索"><a href="#BM25F搜索" class="headerlink" title="BM25F搜索"></a>BM25F搜索</h4><ul><li>首先输入权重<code>Weight</code>，当<code>Weight=1</code>时，所有field的权重均相同且等于1，也可以设置一个特定field的权重(例：设置type权重为5，则其它fields默认为1)：</li></ul><p><img src="/img/%E8%AE%BE%E7%BD%AEtype%E6%9D%83%E9%87%8D%E4%B8%BA5.png" alt="设置type权重为5"></p><ul><li>点击<code>Create Dataset</code>后，我们可以去Kibana的Index管理界面看到下图所示(查看的方法可参考上一个博客)，成功新建了一个<code>bm25_dataset</code>：</li></ul><p><img src="/img/Kibana%E6%96%B0dataset.png" alt="Kibana新dataset"></p><ul><li>输入任何<code>Keyword</code>，直接点击<code>BM25F Search</code>，可以得到下图所示结果：</li></ul><p><img src="/img/BM25F%E6%90%9C%E7%B4%A2.png" alt="BM25F搜索"></p><ul><li><strong>注意</strong>：更换权重前，先点击<code>Clear Dataset</code>，然后再创建新的Dataset，否则dataset中的数据会叠加重复。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本项目是在学习完Information Retrieval课程后，为了充分理解并使用学过的内容，因此用Python调用Elasticsearch的API，并穿插使用了一下Kibana，最后用Flask实现了一个简单的电影搜索引擎。</p><p>其中，BM25F模型，参考了论文：<a href="https://dl.acm.org/doi/10.1145/1031171.1031181">Simple BM25 Extension to Multiple Weighted Fields</a></p><ul><li>索引&amp;检索模型：本设计直接使用了Elasticsearch中的内置的索引以及BM25检索方法，但是为了更好地理解，可以尝试不结合Elasticsearch，而直接用Python编写Index，各种检索model的方法，去实现搜索引擎。</li><li>Flask：我们的搜索引擎页面十分简洁，因为作者本人并没有学习过Flask相关用法，这些都是现学现卖而已，所以想美化页面的朋友们可以自行优化。另外，对于页面上手动<code>Create/Clear Dataset</code>，其实是可以去掉改成自动的，只需要在<code>app.py</code>文件中修改即可，只是为了更方便其他人对BM25F设计的逻辑进行理解。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Information Retrieval </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Information Retrieval </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Search Engine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Elasticsearch的电影搜索引擎设计(一)</title>
      <link href="2021/04/16/sou-suo-yin-qing-she-ji-yi/"/>
      <url>2021/04/16/sou-suo-yin-qing-she-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="Tools-准备"><a href="#Tools-准备" class="headerlink" title="Tools 准备"></a>Tools 准备</h2><p>PyCharm —— Flask实现搜索引擎的网页</p><p>Jupyter Notebook (或Colab) —— 编写部分ipynb文件</p><p>Elasticsearch —— 具有API的搜索引擎</p><p>Kibana (或Postman) —— 对于Elasticsearch的可视化工具</p><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>整体的项目结构如下图，可分为三个主要部分，而我会用两个博客去分别介绍：</p><p><img src="/img/Architecture.png" alt="Architecture"></p><ul><li>数据爬取&amp;索引</li><li>检索模型的构建 (BM25 model，BM25F model)</li><li>Web page的搭建</li></ul><h2 id="数据爬取"><a href="#数据爬取" class="headerlink" title="数据爬取"></a>数据爬取</h2><h4 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h4><ul><li><p>在构建电影搜索引擎之前，必须收集电影相关数据。<a href="https://www.imdb.com/">www.imdb.com</a>是一个电影网站，其中包含按电影名称，导演，主演以及电影介绍等相关信息。</p></li><li><p>利用Jupyter Notebook编写一个web crawler来爬取2017-2021年共9990条数据。</p><p><strong>Note：</strong>别问我为啥是9990条，本来爬取了1w条，结果最后少了10条 (T_T)</p></li><li><p>由于电影的数据种类很多，我们就只爬取了电影名，类型，评分，导演，主演以及评论。对于原数据为空的，我们添加None。</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> google<span class="token punctuation">.</span>colab <span class="token keyword">import</span> drivedrive<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'/content/drive/'</span><span class="token punctuation">,</span> force_remount<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>movie_count <span class="token operator">=</span> <span class="token number">1</span>page_count <span class="token operator">=</span> <span class="token number">1</span>Max_page_number <span class="token operator">=</span> <span class="token number">40</span>movie_json <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> page_count <span class="token operator">&lt;=</span> Max_page_number<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Page:'</span><span class="token punctuation">,</span>page_count<span class="token punctuation">)</span>  <span class="token keyword">if</span> page_count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://www.imdb.com/search/title/?title_type=tv_movie&amp;release_date=2017-01-01,2021-01-01&amp;sort=user_rating,desc&amp;count=250'</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://www.imdb.com/search/title/?title_type=tv_movie&amp;release_date=2017-01-01,2021-01-01&amp;sort=user_rating,desc&amp;count=250&amp;start='</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>page_count<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">250</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&amp;ref_=adv_nxt'</span>    <span class="token comment" spellcheck="true"># Read the content of the original json file to prevent the connection from being interrupted and data loss</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'**********reading json file**********'</span><span class="token punctuation">)</span>    movie_json <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'/content/drive/My Drive/movie_data.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        load_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        num_movie <span class="token operator">=</span> len<span class="token punctuation">(</span>load_dict<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num_movie<span class="token punctuation">,</span><span class="token string">'movies in document'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start Crawler from'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>page_count<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">250</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'movie later'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_movie<span class="token punctuation">)</span><span class="token punctuation">:</span>            movie_name <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'movie_name'</span><span class="token punctuation">]</span>            movie_type <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'movie_type'</span><span class="token punctuation">]</span>            movie_score <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'movie_score'</span><span class="token punctuation">]</span>            director <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'director'</span><span class="token punctuation">]</span>            stars <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'stars'</span><span class="token punctuation">]</span>            movie_synopsis <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">]</span>            movie_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'movie_name': movie_name,'movie_type': movie_type,'movie_score': movie_score,'director': director,'stars': stars,'movie_synopsis': movie_synopsis&amp;#125;</span>            movie_json<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_dict<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'***************finish****************'</span><span class="token punctuation">)</span>  page_count <span class="token operator">+=</span> <span class="token number">1</span>  html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  html<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>  movies <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"lister-item mode-advanced"</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> movie <span class="token keyword">in</span> movies<span class="token punctuation">:</span>    movie_name <span class="token operator">=</span> <span class="token string">'None'</span>    movie_type <span class="token operator">=</span> <span class="token string">'None'</span>    movie_score <span class="token operator">=</span> <span class="token string">'None'</span>    director <span class="token operator">=</span> <span class="token string">'None'</span>    stars <span class="token operator">=</span> <span class="token string">'None'</span>    movie_synopsis <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token comment" spellcheck="true"># movie_name</span>    <span class="token keyword">if</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.lister-item-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a <span class="token keyword">is</span> None<span class="token punctuation">:</span>      movie_name <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      movie_name <span class="token operator">=</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.lister-item-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true"># movie_type</span>    <span class="token keyword">if</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.genre'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> None<span class="token punctuation">:</span>      movie_type <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      clean_type <span class="token operator">=</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.genre'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>      clean_type <span class="token operator">=</span> clean_type<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>      movie_type <span class="token operator">=</span> clean_type    <span class="token comment" spellcheck="true"># movie_score</span>    <span class="token keyword">if</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.ratings-bar'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> None<span class="token punctuation">:</span>      movie_score <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token keyword">elif</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.ratings-bar'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strong <span class="token keyword">is</span> None<span class="token punctuation">:</span>      movie_score <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      movie_score <span class="token operator">=</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.ratings-bar'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strong<span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true"># director and stars</span>    movie_url <span class="token operator">=</span> <span class="token string">'https://www.imdb.com'</span><span class="token operator">+</span>movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.lister-item-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'?ref_=adv_li_tt'</span>    movie_page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>movie_url<span class="token punctuation">)</span>    movie_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>movie_page<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> staff <span class="token keyword">in</span> movie_soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"credit_summary_item"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> staff<span class="token punctuation">.</span>h4<span class="token punctuation">.</span>string <span class="token operator">==</span> <span class="token string">"Director:"</span> <span class="token operator">or</span> staff<span class="token punctuation">.</span>h4<span class="token punctuation">.</span>string <span class="token operator">==</span> <span class="token string">"Directors:"</span><span class="token punctuation">:</span>        director <span class="token operator">=</span> <span class="token string">''</span>        key <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> director_name <span class="token keyword">in</span> staff<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> key <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            director <span class="token operator">=</span> director <span class="token operator">+</span> director_name<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">','</span>          key <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token keyword">if</span> staff<span class="token punctuation">.</span>h4<span class="token punctuation">.</span>string <span class="token operator">==</span> <span class="token string">"Star:"</span> <span class="token operator">or</span> staff<span class="token punctuation">.</span>h4<span class="token punctuation">.</span>string <span class="token operator">==</span> <span class="token string">"Stars:"</span><span class="token punctuation">:</span>        stars <span class="token operator">=</span> <span class="token string">''</span>        key <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> stars_name <span class="token keyword">in</span> staff<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> key <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            stars <span class="token operator">=</span> stars <span class="token operator">+</span> stars_name<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">','</span>          key <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># movie_synopsis</span>    <span class="token keyword">if</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.lister-item-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span> <span class="token keyword">is</span> None<span class="token punctuation">:</span>      movie_synopsis <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      movie_sum <span class="token operator">=</span> <span class="token string">'https://www.imdb.com'</span><span class="token operator">+</span>movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.lister-item-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'plotsummary?ref_=tt_ov_pl'</span>      movie_sum_page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>movie_sum<span class="token punctuation">)</span>      movie_sum_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>movie_sum_page<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>      movie_synopsis <span class="token operator">=</span> movie_sum_soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.ipl-zebra-list__item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true">#Generate per-movie information</span>    movie_content <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'movie_name'</span><span class="token punctuation">:</span> movie_name<span class="token punctuation">,</span>        <span class="token string">'movie_type'</span><span class="token punctuation">:</span> movie_type<span class="token punctuation">,</span>        <span class="token string">'movie_score'</span><span class="token punctuation">:</span> movie_score<span class="token punctuation">,</span>        <span class="token string">'director'</span><span class="token punctuation">:</span> director<span class="token punctuation">,</span>        <span class="token string">'stars'</span><span class="token punctuation">:</span> stars<span class="token punctuation">,</span>        <span class="token string">'movie_synopsis'</span><span class="token punctuation">:</span> movie_synopsis    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">if</span> movie_count <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No.'</span><span class="token punctuation">,</span>movie_count<span class="token punctuation">,</span><span class="token string">'Movie'</span><span class="token punctuation">)</span>    movie_count <span class="token operator">+=</span> <span class="token number">1</span>    movie_json<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># insert to json file</span>  <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'/content/drive/My Drive/movie_data.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> json_file<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>movie_json<span class="token punctuation">,</span>json_file<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h4 id="配置ElasticSearch"><a href="#配置ElasticSearch" class="headerlink" title="配置ElasticSearch"></a>配置ElasticSearch</h4><ul><li><p>下载并安装<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html">Elasticsearch</a>，打开安装后Elasticsearch的bin文件夹，然后双击运行elasticsearch.bat。</p><p>这步可以在本地主机中托管elasticsearch，默认端口是9200。</p></li></ul><pre class=" language-python"><code class="language-python">D<span class="token punctuation">:</span>\elasticsearch<span class="token number">-7.11</span><span class="token punctuation">.</span><span class="token number">1</span>\bin\elasticsearch<span class="token punctuation">.</span>bat</code></pre><ul><li>打开Web浏览器，然后粘贴以下URL，以检查Elasticsearch搜索服务器是否已启动并正在运行。</li></ul><pre class=" language-python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">9200</span><span class="token operator">/</span></code></pre><ul><li>结果必须类似于下图，说明运行成功。</li></ul><p><img src="/img/localhost9200.png" alt="localhost:9200"></p><ul><li>请注意，默认端口是9200，但可以更改。在config文件夹中，打开“ config.yml”文件，并根据需要编辑端口号。</li></ul><pre class=" language-python"><code class="language-python">http<span class="token punctuation">.</span>port：<span class="token number">9300</span></code></pre><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><ul><li>手动添加JSON将是一项繁重的任务，而且成本很高。因此，Elasticsearch借助“ BULK API”提供了帮助，我们可以在一个API调用中添加大量的documents。</li><li>为了通过BulkAPI添加文档，需要将我通过抓取网站收集的JSON转换为Bulk JSON。但是需要添加一个小的Python脚本来对我收集的数据进行修改，并使用Python通过BulkAPI进行数据添加。</li></ul><blockquote><p>您可以自己尝试一下，只需运行下面的<code>InsertDataToES.py</code>。另外，如果您在读取文件和添加任何字符替换时具有自己的数据和操作，请尝试修改以下脚本。Index的创建，documents的添加和搜索也可以使用python和elasticsearch库完成。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> elasticsearch<span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> Elasticsearch<span class="token punctuation">,</span> helpers<span class="token keyword">from</span> elasticsearch_dsl <span class="token keyword">import</span> Index<span class="token keyword">import</span> json<span class="token punctuation">,</span> re<span class="token keyword">import</span> codecs<span class="token keyword">import</span> unicodedata<span class="token comment" spellcheck="true"># import queries</span>es <span class="token operator">=</span> Elasticsearch<span class="token punctuation">(</span>HOST<span class="token operator">=</span><span class="token string">"http://localhost"</span><span class="token punctuation">,</span> PORT<span class="token operator">=</span><span class="token number">9200</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_all_movies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'movie_data.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        all_movies <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&amp;#125;\n&amp;#123;"</span><span class="token punctuation">,</span> <span class="token string">"&amp;#125;,\n&amp;#123;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res_list <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> n<span class="token punctuation">,</span> i <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>all_movies<span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> all_movies<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res_list<span class="token keyword">def</span> <span class="token function">genData</span><span class="token punctuation">(</span>movie_array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> movie <span class="token keyword">in</span> movie_array<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Fields-capturing                </span>        name <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"movie_name"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        types <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"movie_type"</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        score <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"movie_score"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        director <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"director"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        stars <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"stars"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        synopsis <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"movie_synopsis"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token keyword">yield</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token comment" spellcheck="true">#"_index": "imdb_dataset",</span>            <span class="token string">"_source"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"movie_name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>                <span class="token string">"movie_type"</span><span class="token punctuation">:</span> types<span class="token punctuation">,</span>                <span class="token string">"movie_score"</span><span class="token punctuation">:</span>score<span class="token punctuation">,</span>                <span class="token string">"director"</span><span class="token punctuation">:</span> director<span class="token punctuation">,</span>                <span class="token string">"stars"</span><span class="token punctuation">:</span> stars<span class="token punctuation">,</span>                <span class="token string">"movie_synopsis"</span><span class="token punctuation">:</span> synopsis<span class="token punctuation">,</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># createIndex()</span>all_movies <span class="token operator">=</span> read_all_movies<span class="token punctuation">(</span><span class="token punctuation">)</span>helpers<span class="token punctuation">.</span>bulk<span class="token punctuation">(</span>es<span class="token punctuation">,</span>genData<span class="token punctuation">(</span>all_movies<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>通过运行脚本将documents添加到BulkAPI。修改“index”名称以适合您的名称并运行python脚本。将数据添加到相应目录下并更新<code>read_all_movies()</code>method中的路径。如果要添加更多文档，请将它们添加到同一文件夹中并运行脚本。对于抓取的数据，我已经相应地定义了字段。但是，如果您对数据进行了任何更改，请在<code>genData()</code>方法中添加相同的字段。</li><li>运行该ipynb文件，若输出结果如下所示，则运行成功：</li></ul><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">9990</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="配置Kibana"><a href="#配置Kibana" class="headerlink" title="配置Kibana"></a>配置Kibana</h4><p>为了进一步确认是否成功将json文件里的数据导入Elasticsearch里，我们利用Kibana来可视化dataset</p><ul><li>下载并安装<a href="https://www.elastic.co/cn/downloads/kibana">Kibana</a>，双击运行kibana.bat</li></ul><pre class=" language-python"><code class="language-python">D<span class="token punctuation">:</span>\kibana<span class="token number">-7.11</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>windows<span class="token operator">-</span>x86_64\bin\kibana<span class="token punctuation">.</span>bat</code></pre><ul><li>打开Web浏览器，然后粘贴以下URL，打开Kibana</li></ul><pre class=" language-python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">5601</span><span class="token operator">/</span></code></pre><ul><li>从左侧的菜单栏选择Management -&gt; Stack Management -&gt; Data -&gt; Index Management，若如下图所示，imdb_dataset即我们传入到Elasticsearch中的数据，共9990条，则成功！</li></ul><p><img src="/img/Kibana.png" alt="Kibana"></p><ul><li>这个界面可以手动管理我们的dataset，包括后续我们为BM25F模型创建的新的dataset，都会在这里显示。</li></ul><p>下一部分，我们将着重讲解如何实现不同的检索模型。</p>]]></content>
      
      
      <categories>
          
          <category> Information Retrieval </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Information Retrieval </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Search Engine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实时渲染技术的分析报告</title>
      <link href="2020/12/07/shi-shi-xuan-ran-ji-zhu-de-fen-xi-bao-gao/"/>
      <url>2020/12/07/shi-shi-xuan-ran-ji-zhu-de-fen-xi-bao-gao/</url>
      
        <content type="html"><![CDATA[<h1 id="Analysis-based-on-Real-time-Rendering-technology"><a href="#Analysis-based-on-Real-time-Rendering-technology" class="headerlink" title="Analysis based on Real-time Rendering technology"></a>Analysis based on Real-time Rendering technology</h1><p>By Jianxiang Gao</p><p>School of Electronic Engineering and Computer Science</p><p>Queen Mary University of London </p><p>London E1 4NS </p><p>December 2020</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>This report is about analyzing the development of real-time rendering technology. The report is aimed to understand the current advanced technologies in the real-time rendering field, including rasterization, ray tracing and hybrid real-time rendering. This report is inclined towards the analysis of the advantages and disadvantages of popular rendering technologies to get the development direction of the future rendering field.</p><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>The work described in this report aims to analyze the current status and future trends of real-time rendering technology. This chapter mainly introduces the background of real-time rendering technology and related research results and combs the outline of the report.</p><h3 id="1-1-Background"><a href="#1-1-Background" class="headerlink" title="1.1 Background"></a>1.1 Background</h3><p>Real-time rendering means that the computer renders the data into a picture in each frame and presents the 3D scene on the screen. Because the data of each frame is constantly changing, the picture of each frame is constantly changing after being presented. In addition, the time of each frame of real-time rendering is very short (for example, one frame per 16 milliseconds, that is, 60 frames per second). Therefore, real-time rendering technology requires very high computing speed. Generally, GPUs with strong parallel computing capabilities are used (Graphics Processing Unit) to perform rendering processing. This extremely high-speed rendering is mainly used in the field of image interaction, such as the game field, where every frame of the game screen must respond to changes brought about by the player’s input. In addition to games, it is also used in other fields that require real-time human-computer interaction such as film, animation, virtual reality and so on (Akenine-Möller, 2019).</p><p>In the past few decades, due to the limitations of computer hardware, rendering could not be achieved in real-time. Therefore, people rely on rasterization technology to process most real-time graphics, which can display three-dimensional objects on a two-dimensional screen with fast speed and good results. The main reason why rasterization can be widely used is that it fits well with the GPU architecture, and with the continuous optimization of real-time rendering algorithms based on rasterization and the continuous improvement of GPU hardware, rasterization technology has been a leader in rendering for decades.</p><p>In contrast, another way of rendering, ray tracing, is difficult to support the parallel algorithm of the GPU architecture due to the randomness of ray sampling, and it takes a long time to iterate. Therefore, ray tracing rendering was mainly used for offline rendering in the past, rather than real-time rendering.</p><p>With the improvement of GPU performance, the speed of real-time calculation is getting faster and the accuracy of the calculation picture is getting higher and higher, and real-time rendering technology based on ray tracing is also widely used. In 2018, NVIDIA launched the RTX real-time ray tracing technology, and Microsoft developed the DXR (DirectX Ray) Tracing API, which replaced most of the technologies used in today’s standard rendering with very sophisticated optical calculations to replicate the light’s performance in the real environment. Behaviour, providing more realistic images (Champagne, 2020).</p><p>However, the current hardware is not enough to support a complete ray tracing rendering pipeline, so the combination of ray tracing and rasterization not only makes up for the shortcomings of rasterization but also ensures the real-time rendering. This hybrid rendering pipeline has become the main direction in the real-time rendering field.</p><h3 id="1-2-Outline-of-the-report"><a href="#1-2-Outline-of-the-report" class="headerlink" title="1.2 Outline of the report"></a>1.2 Outline of the report</h3><p>The first chapter provides the background of the Real-time Rendering technology and the related works.</p><p>The second chapter mainly explains the simplified simulation method of the rendering process and introduces three different real-time rendering techniques, including rasterization, ray tracing and hybrid real-time rendering.</p><p>The third chapter mainly describes the limitations of Real-time Rendering technology and proposes the development direction that can be improved in the future.</p><p>The fourth chapter describes the summary of the report.</p><h2 id="2-Real-time-rendering-technology"><a href="#2-Real-time-rendering-technology" class="headerlink" title="2. Real-time rendering technology"></a>2. Real-time rendering technology</h2><p>This chapter further expands the background introduction of the previous chapter, including the existing real-time rendering technology such as Rasterization, Ray tracing and Hybrid Rendering.</p><h3 id="2-1-Graphics-rendering"><a href="#2-1-Graphics-rendering" class="headerlink" title="2.1 Graphics rendering"></a>2.1 Graphics rendering</h3><p>Rendering is a technology in the field of graphics, which mainly studies the process of mapping three-dimensional data to two-dimensional images, simulating the functions of cameras and eyes in real life. From a physical point of view, light is emitted from a light source, and after various physical phenomena such as refraction and reflection occur in space, external objects are mapped to the retina and film, and then transformed into an image after entering the imaging plane. It can be seen that rendering can be summarized as a computer simulation behaviour with light sources, scenes, and cameras as the main research objects and optical physics as the theoretical basis.</p><h4 id="2-1-1-Render-object"><a href="#2-1-1-Render-object" class="headerlink" title="2.1.1 Render object"></a>2.1.1 Render object</h4><p>Since the objects and processes in the real world are complex, in order to simulate behaviours to obtain sufficiently approximate results, it is necessary to perform simplified simulations on the three objects of camera, scene, and light source. </p><p><strong>1. Camera</strong></p><p>According to the principle of human eye imaging, light enters the retina through the pupil and is transmitted to the brain by tens of millions of photosensitive neurons behind the retina. After the simplified simulation, the combination of neurons and retina can be transformed into a two-dimensional matrix, which is called an image. Each data unit in the matrix simulates the optical information recorded by the neuron at the corresponding position, called a pixel. Therefore, the process of solving the image is the process of solving the characteristic position and angle of each pixel in a specific light source and scene, and the process of light incident on the pixel. In other words, by solving for all pixels, a complete image can be obtained.</p><p><strong>2. Scene</strong></p><p>In graphics, complex real objects are generally decomposed into two parts: model and material. The model determines the overall outline of the object at the macro level, and the material summarizes the detailed information of the object at the micro-level.</p><ul><li>Model: Use as little information as possible to summarize high-precision shape features. On the one hand, for regular objects, such as spheres, use formulas and parameters to summarize. On the other hand, for irregular objects, use grid or volume data to generalize.</li><li>Material: For the more detailed parts, such as the small unevenness and roughness of the surface of the object, even the uneven distribution of the micro-surface, the degree of electromagnetic wave absorption and disturbance caused by different material media causes refraction, scattering, reflection, and anisotropy Related optical phenomena such as transparency and transparency are unified into the material.</li></ul><p><strong>3. Light source</strong></p><p>To describe the light source in rendering, it is necessary to simplify the shape of the light source and the degree of light emission. Similar to the simulation of the scene, the shape of the light source can also be described by different types of geometric data, and the irradiance information at different positions of the light source is simplified to Part of similar material. At the same time, as the light spreads in the scene, any light-receiving object will also emit light after reflection and other effects, and the light source is regarded as a part of the scene.</p><h4 id="2-1-2-Rasterization"><a href="#2-1-2-Rasterization" class="headerlink" title="2.1.2 Rasterization"></a>2.1.2 Rasterization</h4><p>Before the rasterization operation, it needs to go through two stages of primitive assembly and screen mapping to transform the object coordinates to window coordinates. Rasterization is a discretization process, that is, the process of converting 3D continuous objects into discrete screen pixels. Specifically, this process includes two stages: triangle assembly and triangle traversal. First, rasterization will determine the fragments covered by the primitives, use vertex attribute interpolation to obtain the attribute information of the fragments, and then send it to the fragment shader for colour calculation. The difference is that fragments are candidates for pixels, so only fragments that pass subsequent tests will become the final displayed pixels (Akenine-Möller, 2019).</p><p><img src="/img/Rasterization.png" alt="Figure 1. Rasterization (Story, 2014)."></p><p>The development of GPU has a strong dependence on the development of rasterization. In order to optimize rasterization, most of the GPUs so far have used the SIMD architecture. Different data are calculated under the same instruction so that the GPU can perform rasterization and rendering calculations for each pixel or triangle at high speed in parallel. Although the research of real-time rendering based on rasterization is still developing rapidly, new algorithms and stronger GPUs will bring better pictures every year, but the real physical effects have not been completely solved, and the improvement of the picture has gradually encountered a bottleneck.</p><h4 id="2-1-3-Ray-tracing"><a href="#2-1-3-Ray-tracing" class="headerlink" title="2.1.3 Ray tracing"></a>2.1.3 Ray tracing</h4><p>A powerful feature of ray tracing is that it can greatly facilitate the content creation process. One of the most direct ways is to directly implement offline light transfer simulation algorithms, such as Path Tracing, in a real-time rendering engine that has already used physical shading and lighting. Specifically, in the scene editor of the rendering engine, you can directly switch to the GPU Path Tracing rendering mode with one click, and it only takes a few seconds to get the most correct solution for the current lighting. This has greatly improved the process of creating scenes, editing materials and lighting in game development.</p><p>Another big improvement is to use DXR to directly implement Light Map baking. Most of the existing engines have an external Light Map Baker, which uses completely different code and implementation from the renderer of the engine itself. The current workflow is often to export the scene from the engine, input it to the Light Map Baker, and then Baker outputs the calculated Light Map back. Because now ray tracing is officially added to the graphics API, it is very simple to directly implement the GPU-based Light Map Baker inside the engine. For example, the Light Map Baker that can be previewed in real-time in the engine editor is directly implemented in Unreal Engine 4. Because Path Tracer comes with all the resources and material shaders of the engine itself, with the ray-tracing API, both the cost of the lightmap process itself and the cost of developing Light Map rendering software have been greatly reduced. At the same time, the waiting time for calculation will be greatly shortened due to GPU acceleration (Keller, 2019).</p><h3 id="2-2-Graphics-API-and-rendering-engine"><a href="#2-2-Graphics-API-and-rendering-engine" class="headerlink" title="2.2 Graphics API and rendering engine"></a>2.2 Graphics API and rendering engine</h3><p>Rendering programming is very different from another programming. Since rendering is a complex process involving CPU, GPU and their communication, in rendering programming, it is not only necessary to write correct and efficient CPU logic and highly parallel GPU rendering algorithms, but also to perform efficient parallel CPU-GPU communication mode. In order to better manage the communication between CPU and GPU, Microsoft released DirectX12 graphics API in 2014. Compared with DX11, DX12 greatly exposes the underlying interface and also deletes many encapsulated tools. However, NVIDIA released RTX at GDC 2018, which added ray tracing technology (Stich, 2020). This has had a profound impact on the DirectX graphics API.</p><p>![Figure 2. The ray-tracing pipeline (Stich, 2020).](/img/The ray-tracing pipeline.png)</p><p>The improvement of DX12 at the API level this time is mainly to add a new pipeline to perform ray tracing tasks. Therefore, in addition to the existing rasterization rendering and general calculations, the way the GPU initiates tasks adds a new call to trace rays. If the pipeline of traditional rasterization is a process of turning triangles into pixels with a triangle as a unit, then the pipeline of ray tracing uses a ray as a unit to describe the process of intersecting and calculating the light rays. Unlike the rasterized linear pipeline, the ray-tracing pipeline can derive another ray by recursively calling TraceRay() and execute another pipeline instance.</p><h3 id="2-3-Hybrid-Rendering"><a href="#2-3-Hybrid-Rendering" class="headerlink" title="2.3 Hybrid Rendering"></a>2.3 Hybrid Rendering</h3><p>From the research results of rasterization rendering and ray tracing rendering, it can be found that the current mainstream real-time ray tracing technology in the industry essentially uses the “traditional rasterization rendering pipeline + ray tracing” Hybrid Rendering Pipeline form. In other words, rasterization is still the main rendering process of the current mainstream rendering pipeline in the industry, and ray tracing technology is generally only used for rendering expressions of secondary light effects, such as reflections, shadows, ambient light occlusion, and translucent rendering.</p><p>In 2018, Nvidia launched the Turing architecture, and real-time ray tracing is truly popular in the civilian field. Deferred ray tracing is currently the most successful implementation method, which uses delayed rendering to quickly realize the generation and intersection of Eye Rays, and records the additional information needed in the G-Buffer to calculate GI and denoise. Use very few ray samples to perform Monte Carlo integration in the time domain, and then use multiple time-domain filters to denoise, realize the difficult parts of rasterization such as GI, shadows, and motion blur, and greatly improve the quality of the picture ( Kilgariff, Moreton, Stam and Bell, 2018).</p><p>Although the development of hardware has brought innovations to real-time rendering, some real-time rendering fields, such as semi-transparent objects and scattering rendering, blurry reflections and soft shadows, require a lot of sampled light to be implemented, even the latest GPUs cannot fully meet the needs of computing power. The current mainstream approach is to reduce the sampling accuracy of each frame to ensure real-time performance, use re-sampling technology to obtain additional sampling information from the previous image at a very low cost, and then use post-processing algorithms to filter the noise to obtain a rendering result in higher quality. This is the hybrid real-time rendering technology that combines rasterization and ray tracing.</p><p>In this chapter, it has been explained that three real-time rendering technologies specifically. The chapter that follows moves on to describe the limitation of Hybrid Rendering Technology and proposes the direction of future work.</p><h2 id="3-Analysis"><a href="#3-Analysis" class="headerlink" title="3. Analysis"></a>3. Analysis</h2><p>The rendering technology that combines rasterization and ray tracing creates more possibilities in the rendering field. However, as a new type of rendering technology, it still has limitations in ray tracing. The following sections analyze the current limitations of hybrid real-time rendering technology and propose areas that should be improved for future work.</p><h3 id="3-1-Limitation"><a href="#3-1-Limitation" class="headerlink" title="3.1 Limitation"></a>3.1 Limitation</h3><p>The main limitations of hybrid real-time rendering technology are focused on ray tracing issues. In principle, ray tracing is more suitable for rendering most special effects than rasterization. There are many approximate solutions for shadows, environmental occlusion and reflection in real-time rendering. At the same time, these methods also have various problems caused by various approximations.</p><ul><li><p>For shadows, such as Shadow Mapping, the sampling rate is inconsistent with the sampling rate of the screen space, which requires a lot of manual adjustment and various artifacts, such as shadow acne, peter panning, etc.</p></li><li><p>For environmental occlusion, the results obtained by traditional screen space algorithms are more like edge detection, in other words, basically, all corners are darkened, and there will be a circle of black borders around the object, so it cannot cover the outside of the screen. Calculations.</p></li><li><p>For reflections, such as SSR (Screen Space Reflections), the main reason is that there is no way to render the triangles that are reflected off the screen. For Light Probes, the pre-calculation process usually only calculates the viewing angle light and the colour surface perpendicular to the situation, which makes the result of Glossy reflection lose many interesting characteristics, such as reflection elongated when the viewing angle is low.</p></li></ul><p>Another major problem is the huge amount of calculation required. Unlike rasterized rendering, ray tracing uses rays to sample the scene information around the shading point, so it does not make many approximations to the rendering equation. But the problem with ray tracing is that for most scenes, the solution of the rendering equation requires a large number of samples to get a low variance estimation. The number of samples per pixel in offline rendering is usually several hundred to several thousand. For real-time rendering, because the time budget for each frame is only 16 milliseconds, the affordable sample budget is far from enough to get a reliable solution to the rendering equation. The result is that there will be a lot of noise on the rendered pictures due to insufficient samples. Therefore, for ray tracing rendering, some algorithms, such as the Denoising algorithm, are needed to perform real-time noise reduction processing for ray tracing results of a certain number of samples (Galvan, 2020).</p><h3 id="3-2-Future-work"><a href="#3-2-Future-work" class="headerlink" title="3.2 Future work"></a>3.2 Future work</h3><p>In terms of rendering strategy, the currently released real-time ray tracing technology mostly reduces the number of samples per pixel and then cooperates with noise reduction technology and digital signal processing technology to achieve rendering results similar to real performance under limited computing power. Under this set of technical forms, product-level ray tracing reflections, ray tracing ambient light occlusion, ray tracing shadows and other global effects that are difficult to handle with traditional rasterization techniques, also show very high quality (Einig, 2017).</p><p>With the development of hardware, real-time rendering has gradually replaced the simplified model idea of sacrificing realism and improving computing efficiency with a ray-tracing model based on real physical rendering. However, the current hardware has not been developed enough to support a complete real-time ray tracing algorithm. In the past ten years, how to use a small amount of ray tracing to supplement the effect based on decades of research based on rasterization real-time rendering. Will be the mainstream trend of graphics.</p><p>Therefore, Hybrid Rendering Pipeline will be the main technical form carried by real-time ray tracing technology for many years to come. How to completely strip the rasterization pipeline, complete the switch to a purely ray tracing-based rendering pipeline and achieve a product-level interaction rate, is the most essential and ideal problem of real-time rendering technology that needs to be overcome.</p><p>This chapter has analysed the causes of real-time rendering technology’s limitations and has argued that the future work about how to improve the hybrid real-time rendering technology.</p><h2 id="4-Conclusion"><a href="#4-Conclusion" class="headerlink" title="4. Conclusion"></a>4. Conclusion</h2><p>In conclusion, the project was undertaken to analyze the development of real-time rendering technology. Firstly, the paper shows what is the rendering and how hardware upgrades affect the optimization of real-time rendering technology. Secondly, the process of real-time rendering and three real-time rendering methods are further introduced. And in the final part, it was concerned with analysing the limitations of popular real-time rendering technology and discussing the direction of future development. As a technology that plays an important role in various fields, real-time rendering technology is constantly being improved with hardware updates. With the popularity of ray tracing technology in the real-time rendering field, hybrid real-time rendering combining rasterization and ray tracing is a more important research direction in the future.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Akenine-Möller, T., Haines, E. and Hoffman, N., 2019. <em>Real-time rendering</em>. Crc Press.</p><p>Champagne, R., 2020. <em>Real-Time Ray Tracing Realized: RTX Brings The Future Of Graphics To Millions | NVIDIA Blog</em>. [online] The Official NVIDIA Blog. Available at: <a href="https://blogs.nvidia.com/blog/2020/08/25/rtx-real-time-ray-tracing/">https://blogs.nvidia.com/blog/2020/08/25/rtx-real-time-ray-tracing/</a> [Accessed 1 December 2020].</p><p>Einig, M., 2017. <em>Hybrid Rendering For Real-Time Lighting: Ray Tracing Vs Rasterization</em>. [online] Imagination. Available at: <a href="https://www.imaginationtech.com/blog/hybrid-rendering-for-real-time-lighting/">https://www.imaginationtech.com/blog/hybrid-rendering-for-real-time-lighting/</a> [Accessed 1 December 2020].</p><p>Galvan, A., 2020. <em>Ray Tracing Denoising</em>. [online] Alain.xyz. Available at: <a href="https://alain.xyz/blog/ray-tracing-denoising">https://alain.xyz/blog/ray-tracing-denoising</a> [Accessed 1 December 2020].</p><p>Keller, A., Viitanen, T., Barré-Brisebois, C., Schied, C. and McGuire, M., 2019, July. Are we done with ray tracing?. In <em>SIGGRAPH Courses</em> (pp. 3-1).</p><p>Kilgariff, E., Moreton, H., Stam, N. and Bell, B., 2018. <em>NVIDIA Turing Architecture In-Depth | NVIDIA Developer Blog</em>. [online] NVIDIA Developer Blog. Available at: <a href="https://developer.nvidia.com/blog/nvidia-turing-architecture-in-depth/">https://developer.nvidia.com/blog/nvidia-turing-architecture-in-depth/</a> [Accessed 1 December 2020].</p><p>Stich, M., 2018. <em>Introduction To NVIDIA RTX And Directx Ray Tracing | NVIDIA Developer Blog</em>. [online] NVIDIA Developer Blog. Available at: <a href="https://developer.nvidia.com/blog/introduction-nvidia-rtx-directx-ray-tracing/">https://developer.nvidia.com/blog/introduction-nvidia-rtx-directx-ray-tracing/</a> [Accessed 1 December 2020].</p><p>Stich, M., 2018. <em>The Ray Tracing Pipeline</em>. [image] Available at: <a href="https://developer.nvidia.com/blog/introduction-nvidia-rtx-directx-ray-tracing/">https://developer.nvidia.com/blog/introduction-nvidia-rtx-directx-ray-tracing/</a> [Accessed 1 December 2020].</p><p>Story, J., 2014. <em>Solid Fill - Conservative Raster OFF</em>. [image] Available at: <a href="https://developer.nvidia.com/content/dont-be-conservative-conservative-rasterization">https://developer.nvidia.com/content/dont-be-conservative-conservative-rasterization</a> [Accessed 1 December 2020].</p>]]></content>
      
      
      <categories>
          
          <category> Games develpment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Games develpment </tag>
            
            <tag> Real-time Rendering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习——线性回归</title>
      <link href="2020/10/06/ji-qi-xue-xi-xian-xing-hui-gui/"/>
      <url>2020/10/06/ji-qi-xue-xi-xian-xing-hui-gui/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习——线性回归"><a href="#机器学习——线性回归" class="headerlink" title="机器学习——线性回归"></a>机器学习——线性回归</h1><h2 id="1-什么是线性回归"><a href="#1-什么是线性回归" class="headerlink" title="1. 什么是线性回归"></a>1. 什么是线性回归</h2><p>举个例子，</p><table><thead><tr><th align="center">工资</th><th align="center">年龄</th><th align="center">额度</th></tr></thead><tbody><tr><td align="center">4000</td><td align="center">25</td><td align="center">20000</td></tr><tr><td align="center">8000</td><td align="center">30</td><td align="center">70000</td></tr><tr><td align="center">5000</td><td align="center">28</td><td align="center">35000</td></tr><tr><td align="center">7500</td><td align="center">33</td><td align="center">50000</td></tr><tr><td align="center">12000</td><td align="center">40</td><td align="center">85000</td></tr></tbody></table><ul><li><p>数据：工资、年龄（2个特征）——输入X1、X2</p><p>例子中只有2个特征，但是特征可以有更多</p></li><li><p>目标：预测银行会贷款给我多少钱（标签）——输出Y</p></li><li><p>考虑：工资和年龄都会影响最终银行贷款的结果，那么各自有多大的影响呢？（参数）</p><p>输入和输出之间有什么关系，这就是机器学习的核心</p></li></ul><p>通常，机器学习有监督算法分为<strong>回归</strong>和<strong>分类</strong>两种，</p><ul><li><p><strong>回归</strong>：通过数据，最终预测出一个值（这个值要求在一定区间上）</p><p>e.g. 银行借给我多少钱，比如0-10000之间的某一个值</p></li><li><p><strong>分类</strong>：得到一个唯一的类别值</p><p>e.g. 银行借不借给我这笔钱，比如0：借，1：不借</p></li></ul><h2 id="2-拟合曲线"><a href="#2-拟合曲线" class="headerlink" title="2. 拟合曲线"></a>2. 拟合曲线</h2><ul><li><p>X1，X2即2个特征（年龄、工资）</p><p>Y是银行最终借给我们多少钱</p></li><li><p>找到一条线（或一个面）来最好拟合我们的数据点</p></li></ul><p><img src="/img/IMG_0183(20201007-143658).PNG"></p><p><img src="/img/IMG_0182(20201007-143424).PNG"></p><ul><li><p>年龄X1和工资X2都会对输出产生影响，但我们不知道影响什么样的，所以假设了两个参数</p></li><li><p>θ1和θ2是<strong>权重参数</strong>，对最终的结果会产生较大的影响（因为权重参数与数据X1,X2组合在一起了）</p></li><li><p>θ0是<strong>偏置参数</strong>，对结果会产生较小的影响（偏置参数只是自己单独一个）</p></li><li><p>因为机器学习的思想——是能用简单的方法做，所以我们需要对长式子进行整合，化简</p></li><li><p>化简求和时，发现多了θ0*X0，X0虽然不是数据中的一个特征，但是我们可以在数据中额外加入一列X0，只不过X0都是为1</p></li><li><p>在后面的实践中，会经常加入额外的一列都是1，它们都是没用的，只不过是为了拟合平面的公式整合得更工整简单</p></li><li><p>因为通常数据复杂度都很高，所以我们需要转换数据的格式，标准的格式为<strong>矩阵格式</strong></p></li></ul><h2 id="3-误差"><a href="#3-误差" class="headerlink" title="3. 误差"></a>3. 误差</h2><p><img src="/img/IMG_0184(20201007-150245).PNG"></p><ul><li>从右侧的图片上来看，平面并没有完全拟合，平面上下存在很多个红色的点（即真实值）</li><li>用机器学习解决一个问题时，理论模型和现实模型必然存在差异，但只要合理的利用这个差异，就是可以的</li><li>y表示真实值，θ*x表示预测值，ϵ表示误差</li></ul><p><img src="/img/IMG_0185(20201007-151143).PNG"></p><ul><li><p><strong>独立</strong>：算法会同等的对待每一个样本，每个数据、样本都没有任何关系</p><p>e.g.张三李四去银行贷款，银行不会以为借给张三钱少，借给李四的钱就多，银行会根据每个人的指标去评估</p></li><li><p><strong>同分布</strong>：数据来自同样的一个地方</p><p>e.g. 张三去的建设银行，李四去的农业银行，两个不同的银行数据混合一起建立模型时不符合逻辑的，各自银行建立各自的模型-</p></li><li><p><strong>高斯分布</strong>：就是正态分布</p></li></ul><p><img src="/img/IMG_0186(20201007-152320).PNG"></p><h2 id="4-似然函数"><a href="#4-似然函数" class="headerlink" title="4. 似然函数"></a>4. 似然函数</h2><p><img src="/img/IMG_0187(20201007-152527).PNG"></p><p>e.g. 假如我今天要去赌博，但我不知道今天我是会赢还是会输，可能我的输赢服从着赌场的某一种规则，但这个规则我不知道，所以我在赌场门口蹲人，蹲了10个人中9个人挣钱了、1个人没挣钱，因此，不管赌场服从着什么规则，反正我今天进去了就有90%的可能性挣钱</p><ul><li><p><strong>似然函数</strong>就是根据样本去估计参数值，即参数估计</p></li><li><p>什么样的参数与数据组合后，更接近真实值，即它<strong>是真实值的可能性（概率）越大越好</strong>，即<strong>最大似然估计</strong></p></li><li><p>似然函数是一个累乘公式，所以取对数，把乘法转换为加法，计算就会简单</p></li></ul><p><img src="/img/IMG_0188(20201007-153751).PNG"></p><ul><li>因为我们是做极大似然估计，让结果值越大越好，所以我们要让“减号”后面的式子越小越好</li><li>引入一个目标函数J(θ)，让它越小越好，发现这是一个最小二乘法</li></ul><blockquote><p>Tag</p><p>面试笔试最爱考的三个点：</p><ol><li>为什么引入似然函数</li><li>为什么要对似然函数进行log变换</li><li>为什么要让右边的式子越小越好</li></ol></blockquote><p>aa</p><p><img src="/img/IMG_0189(20201007-154600).PNG"></p><ul><li>求偏导：因为我们要使得J(θ)最小，即求一个θ值最小值，即偏导=0</li></ul><h2 id="5-评估方法"><a href="#5-评估方法" class="headerlink" title="5. 评估方法"></a>5. 评估方法</h2><p><img src="/img/IMG_0190(20201007-155645).PNG"></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘(第二章) 数据</title>
      <link href="2020/09/28/shu-ju-wa-jue-di-er-zhang-shu-ju/"/>
      <url>2020/09/28/shu-ju-wa-jue-di-er-zhang-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="数据挖掘-第二章-数据"><a href="#数据挖掘-第二章-数据" class="headerlink" title="数据挖掘 (第二章) 数据"></a>数据挖掘 (第二章) 数据</h1><h2 id="2-1-数据对象、属性"><a href="#2-1-数据对象、属性" class="headerlink" title="2.1 数据对象、属性"></a>2.1 数据对象、属性</h2><p>数据集由数据对象组成，一个<strong>数据对象</strong>代表一个实体。例如，</p><ul><li>医疗数据库中，对象可以是患者</li><li>大学数据库中，对象可以是学生、教授、课程</li><li>销售数据库中，对象可以是顾客、商品</li></ul><h3 id="2-1-1-什么是属性"><a href="#2-1-1-什么是属性" class="headerlink" title="2.1.1 什么是属性"></a>2.1.1 什么是属性</h3><p><strong>属性</strong>(attribute)是一个数据字段，表示数据对象的一个特征。</p><blockquote><p>e.g.</p><p>描述顾客对象的属性——<em>custom_ID</em>, <em>name</em> 和 <em>address</em></p></blockquote><p>属性的类型可以分为：<strong>标称属性</strong>、<strong>二元属性</strong>、<strong>序数属性</strong>、<strong>数值属性</strong></p><h3 id="2-1-2-标称属性"><a href="#2-1-2-标称属性" class="headerlink" title="2.1.2 标称属性"></a>2.1.2 标称属性</h3><p><strong>标称属性</strong>(nominal attribute)的值是一些符号或事物的名字。</p><blockquote><p>e.g.</p><p>hair_color(头发颜色): black, white, yellow…</p><p>occupation(职业): teacher, doctor…</p></blockquote><p>可以看出以上的标称属性，如果用数学运算去计算这些数值或找平均数、中位数等，都没有任何意义。</p><p>所以标称属性值不具有有意义的序，且不是定量的。</p><p>标称属性有一件有意义的事是——<strong>众数</strong>(mode)——一种中心趋势度量</p><h3 id="2-1-3-二元属性"><a href="#2-1-3-二元属性" class="headerlink" title="2.1.3 二元属性"></a>2.1.3 二元属性</h3><p><strong>二元属性</strong>(binary attribute)是一种标称属性，只有两个状态（0或1）。</p><p>0：通常表示属性不该出现；</p><p>1：通常表示出现</p><blockquote><p>e.g.</p><p><em>smoker</em>: 0表示不抽烟的患者，1表示抽烟的患者</p></blockquote><p>一个二元属性是<strong>对称的</strong>，即两种状态的结果具有同等价值且携带相同的权重。</p><blockquote><p>性别属性<em>gender</em>的男和女</p></blockquote><p>一个二元属性是<strong>非对称的</strong>，即两种状态的结果不是同样重要的。</p><blockquote><p>艾滋病(HIV)化验的结果，阳性和阴性。</p></blockquote><h3 id="2-1-4-序数属性"><a href="#2-1-4-序数属性" class="headerlink" title="2.1.4 序数属性"></a>2.1.4 序数属性</h3><p><strong>序数属性</strong>(ordinal attribute)，其可能的值之间具有有意义的序或秩评定(ranking)，但是相继值之间的差是未知的。</p><blockquote><p>e.g.</p><p><em>drink_size</em> (饮料杯的大小): 小、中、大</p><p><em>grade</em> (成绩): A+, A, A-, B+…</p><p><em>professional_rank</em> (教师职位):助教、教师、副教授、教授</p></blockquote><p>以上的属性值都具有有意义的先后排序，但是我们不能说，“大” 比 “中” 大多少、“教授” 比 “副教授” 大多少？</p><p>对主观的质量评估，不能客观的度量。因此，序数属性通常用于等级评定调查。</p><p>序数属性的中心趋势可以用众数和中位数表示，但不能定义均值。</p><blockquote><p>Tag</p><p>标称属性、二元属性、序数属性都是<strong>定性的</strong>，即，描述对象的特征，而不给出实际的大小或数量。</p></blockquote><h3 id="2-1-5-数值属性"><a href="#2-1-5-数值属性" class="headerlink" title="2.1.5 数值属性"></a>2.1.5 数值属性</h3><p><strong>数值属性</strong>(numeric attribute)是定量的，可以用整数或实数值表示。</p><p>数值属性可以是<strong>区间标度</strong>或<strong>比率标度</strong>的。</p><ul><li><p><strong>区间标度属性</strong></p><p><strong>区间标度</strong>(interval_scaled)<strong>属性</strong>用相等的单位尺度度量。</p><p>区间属性的值有序，可以是正、负、0。</p><blockquote><p>e.g.</p><p>temperature*(摄氏、华氏温度)，可以计算温度差，但不能说谁是谁的倍数*</p><p><em>date</em>(日历日期)，日历日期没有绝对的零点</p></blockquote></li><li><p><strong>比率标度属性</strong></p><p><strong>比率标度</strong>(ratio-scaled)<strong>属性</strong>是具有固有零点的数值属性，即可以说一个值是另一个值得倍数(或比率)。</p><blockquote><p>e.g.</p><p>开氏温度(K)具有绝对零点</p><p>工作年限</p><p>字数</p><p>重量、高度、货币量等等</p></blockquote></li></ul><h3 id="2-1-6-离散属性、连续属性"><a href="#2-1-6-离散属性、连续属性" class="headerlink" title="2.1.6 离散属性、连续属性"></a>2.1.6 离散属性、连续属性</h3><p>机器学习领域的分类算法通常把属性分为<strong>离散的</strong>和<strong>连续的</strong>。</p><ul><li><p><strong>离散属性</strong></p><p>具有<strong>有限</strong>或<strong>无限可数</strong>数值。</p><blockquote><p>有限的：hair_color, drink_size</p><p>无限可数的：customer_ID，即可以建立整数集合一一对应</p></blockquote></li><li><p><strong>连续属性</strong></p><p>如果属性不是离散的，就是连续的。</p></li></ul><h2 id="2-2-数据的基本统计描述"><a href="#2-2-数据的基本统计描述" class="headerlink" title="2.2 数据的基本统计描述"></a>2.2 数据的基本统计描述</h2><h3 id="2-2-1-中心趋势度量：均值、中位数、众数"><a href="#2-2-1-中心趋势度量：均值、中位数、众数" class="headerlink" title="2.2.1 中心趋势度量：均值、中位数、众数"></a>2.2.1 中心趋势度量：均值、中位数、众数</h3><ul><li><p><strong>均值</strong>(mean)，还有一种丢弃高低极值的均值叫<strong>截尾均值</strong>(trimmed mean)</p></li><li><p><strong>中位数</strong>(median)</p></li><li><p><strong>众数</strong>(mode)，可分为<strong>单峰的</strong>(unimodal)，<strong>双峰的</strong>(bimodal)，<strong>三峰的</strong>(trimodal)，<strong>多峰的</strong>(multimodal)</p></li><li><p><strong>中列数</strong>(midrange)，是数据集的最大值和最小值的平均值</p></li></ul><h3 id="2-2-2-度量数据散布：极差、四分位数、方差、标准差、四分位数极差"><a href="#2-2-2-度量数据散布：极差、四分位数、方差、标准差、四分位数极差" class="headerlink" title="2.2.2 度量数据散布：极差、四分位数、方差、标准差、四分位数极差"></a>2.2.2 度量数据散布：极差、四分位数、方差、标准差、四分位数极差</h3>]]></content>
      
      
      <categories>
          
          <category> Data Mining </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Mining </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘(第一章) 导论</title>
      <link href="2020/09/26/shu-ju-wa-jue-di-yi-zhang-dao-lun/"/>
      <url>2020/09/26/shu-ju-wa-jue-di-yi-zhang-dao-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="数据挖掘-第一章-导论"><a href="#数据挖掘-第一章-导论" class="headerlink" title="数据挖掘 (第一章) 导论"></a>数据挖掘 (第一章) 导论</h1><h2 id="1-1-什么是数据挖掘"><a href="#1-1-什么是数据挖掘" class="headerlink" title="1.1 什么是数据挖掘"></a>1.1 什么是数据挖掘</h2><p><strong>数据挖掘</strong>是从大量数据中挖掘有趣模式和知识的过程。</p><p>数据源包括数据库、数据仓库、Web、其他信息存储库或动态地流入系统的数据。</p><p>另外，也可以将数据挖掘视为知识发现过程的一个基本步骤：</p><ol><li><strong>数据清理</strong>(Data cleaning)（消除噪声和删除不一致的数据）</li><li><strong>数据集成</strong>(Data integration)（多种数据源可以组合在一起）</li><li><strong>数据选择</strong>(Data selection)（从数据库中提取和分析任务相关的数据）</li><li><strong>数据变换</strong>(Data transformation)（把数据变换成适合挖掘的形式）</li><li><strong>数据挖掘</strong>(Data mining)（使用智能方法提取数据模式）</li><li><strong>模式评估</strong>(Pattern evaluation)（根据某种兴趣度度量，识别代表知识的真正有趣的模式）</li><li><strong>知识表示</strong>(Knowledge presentation)（使用可视化技术，向用户提供挖掘的知识）</li></ol><h2 id="1-2-数据挖掘的重要性"><a href="#1-2-数据挖掘的重要性" class="headerlink" title="1.2 数据挖掘的重要性"></a>1.2 数据挖掘的重要性</h2><p>我们处在信息化时代，其拥有着爆炸性增长和巨大数量的数据。因此，我们需要一种功能强大和通用的工具，以便从海量数据中发现有价值的信息——数据挖掘因而诞生。</p><h2 id="1-3-数据的类型"><a href="#1-3-数据的类型" class="headerlink" title="1.3 数据的类型"></a>1.3 数据的类型</h2><p>数据的最基本形式包括</p><ul><li><strong>数据库数据</strong>(Database data)</li><li><strong>数据仓库数据</strong>(Data warehouse data)</li><li><strong>事务数据</strong>(Transactional data)</li><li>其他类型数据(e.g., data streams, spatial data, text data, multimedia data, and the WWW)</li></ul><h3 id="1-3-1-数据库数据-Database-data"><a href="#1-3-1-数据库数据-Database-data" class="headerlink" title="1.3.1 数据库数据(Database data)"></a>1.3.1 <strong>数据库数据</strong>(Database data)</h3><p>数据库系统，也叫<strong>数据库管理系统</strong>(database management system)，由一组内部相关的数据(即数据库)和一组管理、存储数据的软件程序组成。</p><p><strong>关系表数据库</strong>(relational database)是数据挖掘最常见、最丰富的信息源，是数据挖掘研究的一种主要数据形式。</p><h3 id="1-3-2-数据仓库数据-Data-warehouse-data"><a href="#1-3-2-数据仓库数据-Data-warehouse-data" class="headerlink" title="1.3.2 数据仓库数据(Data warehouse data)"></a>1.3.2 <strong>数据仓库数据</strong>(Data warehouse data)</h3><p><strong>数据仓库</strong>(Data warehouse)是一个从多个数据源收集的信息存储库，存放在一致的模式下，通常驻留在单个站点上。数据仓库通过以下过程来构造：</p><ul><li>数据清理</li><li>数据变换</li><li>数据集成</li><li>数据装入</li><li>定期数据刷新</li></ul><p>数据仓库又称作<strong>数据立方体</strong>(data cube)的多维数据结构建模。其中，每个维对应模式中的一个或一组属性，而每个单元存放某种聚集度量值，如<em>count</em>或<em>sum</em>。</p><h3 id="1-3-3-事务数据-Transactional-data"><a href="#1-3-3-事务数据-Transactional-data" class="headerlink" title="1.3.3 事务数据(Transactional data)"></a>1.3.3 <strong>事务数据</strong>(Transactional data)</h3><p>一般来说，<strong>事务数据库</strong>(Transactional database)每个记录代表一个事务，如顾客的一次购物、一个航班订票，或一个用户的网页点击。</p><p>事务数据的数据挖掘可以通过挖掘<strong>频繁项集</strong>(frequent itemset)，频繁项集是频繁地在事务数据集中出现的商品的集合。</p><blockquote><p>Tag</p><p>数据库、数据仓库的区别：</p><ol><li>数据库通常用于业务，数据仓库通常服务于分析。</li><li>很多个业务系统的数据库往数据仓库输送数据，是各个数据库的集合体，数据仓库的建立时基于这些数据库之上的。</li></ol></blockquote><h2 id="1-4-数据挖掘任务"><a href="#1-4-数据挖掘任务" class="headerlink" title="1.4 数据挖掘任务"></a>1.4 数据挖掘任务</h2><p>任务可以分为两类：</p><ul><li><strong>描述性</strong>(descriptive)任务：刻画目标数据的一般性质</li><li><strong>预测性</strong>(predictive)任务：归纳当前数据，以便做出预测</li></ul><h3 id="1-4-1-类-概念描述：特征化与区分"><a href="#1-4-1-类-概念描述：特征化与区分" class="headerlink" title="1.4.1 类/概念描述：特征化与区分"></a>1.4.1 类/概念描述：特征化与区分</h3><p><strong>类/概念描述</strong>(Class/Concept Description)可以通过下述方法得到：</p><ul><li><strong>数据特征化</strong>(data characterization)：汇总<strong>目标类</strong>(target class)的数据</li><li><strong>数据区分</strong>(data discrimination)：将目标类和一个或多个<strong>对比类</strong>(contrasting class)进行比较</li><li>数据特征化和区分</li></ul><h3 id="1-4-2-挖掘频繁模式、关联、相关性"><a href="#1-4-2-挖掘频繁模式、关联、相关性" class="headerlink" title="1.4.2 挖掘频繁模式、关联、相关性"></a>1.4.2 挖掘频繁模式、关联、相关性</h3><p>第6、7章详细讨论</p><h3 id="1-4-3-分类、回归"><a href="#1-4-3-分类、回归" class="headerlink" title="1.4.3 分类、回归"></a>1.4.3 分类、回归</h3><p><strong>分类</strong>(classification)，指找出描述和区分数据类或概念的模型(或函数)，以便使用模型预测类标号未知的对象的类标号。</p><p>分类和回归区别：</p><ul><li><p><strong>分类</strong>预测类别(离散的、无序的)标号</p></li><li><p><strong>回归</strong>建立连续值函数模型</p></li></ul><p>也就是说，<strong>回归</strong>用来预测缺失的或难以获得的<strong>数值数据值</strong>(numerical data values)，而不是(离散的)类标号。</p><blockquote><p>e.g.</p><p>假设作为AllElectronics的销售经理，您希望根据对销售活动的三种响应，对商店中的大量商品进行分类：良好响应、中等响应、没有响应。您要根据商品的描述性特征（例如<em>price</em>, <em>brand</em>, <em>place_made</em> 和 <em>category</em>），对这三个类别中的每一个类别导出一个模型。最终的分类应最大程度地将每个类别与其他类别区分开，以呈现有组织的数据集描述。</p><p>假设结果分类模型用决策树的形式表示。例如，决策树可以将<em>price</em>识别为最能区分这三个类别的单个因素。该树可能表明，除了<em>price</em>之外，有助于进一步区分每个类别的对象的其他特征包括<em>brand</em> 和 <em>place_made</em>。这样的决策树可以帮助您了解给定销售活动的影响，并在将来设计更有效的活动。</p><p>相反，假设您不想预测每个商店商品的分类响应标签，而是希望根据以前的销售数据预测每个商品在AllElectronics即将进行的销售期间将产生的收入金额。这是回归分析的一个示例，因为构建的回归模型将预测连续函数（或有序值）。</p></blockquote><h3 id="1-4-4-聚类分析"><a href="#1-4-4-聚类分析" class="headerlink" title="1.4.4 聚类分析"></a>1.4.4 聚类分析</h3><p><strong>聚类</strong>(Cluster)分析数据对象，不考虑类标号，而分类和回归分析的是标记类的(训练)数据集。</p><p>对象根据<strong>最大化类内相似性、最小化类间相似性</strong>的原则进行聚类或分组，也就是说，同一个簇(cluster)中的对象具有很高的相似性，而与其它簇中的对象很不相似。</p><p>聚类便于分类法形成(taxonomy formation)，即将观测组织成类分层结构，把类似的事件组织在一起。</p><h3 id="1-4-5-离群点分析"><a href="#1-4-5-离群点分析" class="headerlink" title="1.4.5 离群点分析"></a>1.4.5 离群点分析</h3><p>数据集中可能包含一些数据对象，他们与数据的一般性为或模型不一致，这些数据对象是<strong>离群点</strong>(outlier)。离群点数据分析又叫<strong>离群点分析</strong>(outlier analysis)或<strong>异常挖掘</strong>(anomaly mining)。</p><p>大部分数据挖掘方法都将离群点视为噪声或异常丢弃，但是，在一些应用中(如欺诈检测)，离群点具有很大作用。</p><p>检测离群点的方法：</p><ul><li>假定一个数据分布或概率模型，使用统计检验来检测离群点</li><li>使用距离度量，将远离任何簇的对象视为离群点</li><li>基于密度的方法也可以识别局部区域中的离群点</li></ul><h2 id="1-5-数据挖掘使用的技术"><a href="#1-5-数据挖掘使用的技术" class="headerlink" title="1.5 数据挖掘使用的技术"></a>1.5 数据挖掘使用的技术</h2><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AF%B8%E5%A4%9A%E6%8A%80%E6%9C%AF.png" alt="数据挖掘使用的诸多技术"></p><h2 id="1-6-数据挖掘的主要问题"><a href="#1-6-数据挖掘的主要问题" class="headerlink" title="1.6 数据挖掘的主要问题"></a>1.6 数据挖掘的主要问题</h2><ul><li>挖掘方法</li><li>用户交互</li><li>有效性和可伸缩性</li><li>数据类型的多样性</li><li>数据挖掘与社会</li></ul>]]></content>
      
      
      <categories>
          
          <category> Data Mining </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Mining </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI in Games</title>
      <link href="2020/09/22/you-xi-zhong-de-ren-gong-zhi-neng/"/>
      <url>2020/09/22/you-xi-zhong-de-ren-gong-zhi-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="AI-in-Games"><a href="#AI-in-Games" class="headerlink" title="AI in Games"></a>AI in Games</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>哈哈哈哈哈哈</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>哈哈哈哈</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Games develpment </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
