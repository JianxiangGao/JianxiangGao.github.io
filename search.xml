<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习——线性回归</title>
      <link href="2020/10/06/ji-qi-xue-xi-xian-xing-hui-gui/"/>
      <url>2020/10/06/ji-qi-xue-xi-xian-xing-hui-gui/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习——线性回归"><a href="#机器学习——线性回归" class="headerlink" title="机器学习——线性回归"></a>机器学习——线性回归</h1><h2 id="1-什么是线性回归"><a href="#1-什么是线性回归" class="headerlink" title="1. 什么是线性回归"></a>1. 什么是线性回归</h2><p>举个例子，</p><table><thead><tr><th align="center">工资</th><th align="center">年龄</th><th align="center">额度</th></tr></thead><tbody><tr><td align="center">4000</td><td align="center">25</td><td align="center">20000</td></tr><tr><td align="center">8000</td><td align="center">30</td><td align="center">70000</td></tr><tr><td align="center">5000</td><td align="center">28</td><td align="center">35000</td></tr><tr><td align="center">7500</td><td align="center">33</td><td align="center">50000</td></tr><tr><td align="center">12000</td><td align="center">40</td><td align="center">85000</td></tr></tbody></table><ul><li><p>数据：工资、年龄（2个特征）——输入X1、X2</p><p>例子中只有2个特征，但是特征可以有更多</p></li><li><p>目标：预测银行会贷款给我多少钱（标签）——输出Y</p></li><li><p>考虑：工资和年龄都会影响最终银行贷款的结果，那么各自有多大的影响呢？（参数）</p><p>输入和输出之间有什么关系，这就是机器学习的核心</p></li></ul><p>通常，机器学习有监督算法分为<strong>回归</strong>和<strong>分类</strong>两种，</p><ul><li><p><strong>回归</strong>：通过数据，最终预测出一个值（这个值要求在一定区间上）</p><p>e.g. 银行借给我多少钱，比如0-10000之间的某一个值</p></li><li><p><strong>分类</strong>：得到一个唯一的类别值</p><p>e.g. 银行借不借给我这笔钱，比如0：借，1：不借</p></li></ul><h2 id="2-拟合曲线"><a href="#2-拟合曲线" class="headerlink" title="2. 拟合曲线"></a>2. 拟合曲线</h2><ul><li><p>X1，X2即2个特征（年龄、工资）</p><p>Y是银行最终借给我们多少钱</p></li><li><p>找到一条线（或一个面）来最好拟合我们的数据点</p></li></ul><p><img src="/img/IMG_0183(20201007-143658).PNG"></p><p><img src="/img/IMG_0182(20201007-143424).PNG"></p><ul><li><p>年龄X1和工资X2都会对输出产生影响，但我们不知道影响什么样的，所以假设了两个参数</p></li><li><p>θ1和θ2是<strong>权重参数</strong>，对最终的结果会产生较大的影响（因为权重参数与数据X1,X2组合在一起了）</p></li><li><p>θ0是<strong>偏置参数</strong>，对结果会产生较小的影响（偏置参数只是自己单独一个）</p></li><li><p>因为机器学习的思想——是能用简单的方法做，所以我们需要对长式子进行整合，化简</p></li><li><p>化简求和时，发现多了θ0*X0，X0虽然不是数据中的一个特征，但是我们可以在数据中额外加入一列X0，只不过X0都是为1</p></li><li><p>在后面的实践中，会经常加入额外的一列都是1，它们都是没用的，只不过是为了拟合平面的公式整合得更工整简单</p></li><li><p>因为通常数据复杂度都很高，所以我们需要转换数据的格式，标准的格式为<strong>矩阵格式</strong></p></li></ul><h2 id="3-误差"><a href="#3-误差" class="headerlink" title="3. 误差"></a>3. 误差</h2><p><img src="/img/IMG_0184(20201007-150245).PNG"></p><ul><li>从右侧的图片上来看，平面并没有完全拟合，平面上下存在很多个红色的点（即真实值）</li><li>用机器学习解决一个问题时，理论模型和现实模型必然存在差异，但只要合理的利用这个差异，就是可以的</li><li>y表示真实值，θ*x表示预测值，ϵ表示误差</li></ul><p><img src="/img/IMG_0185(20201007-151143).PNG"></p><ul><li><p><strong>独立</strong>：算法会同等的对待每一个样本，每个数据、样本都没有任何关系</p><p>e.g.张三李四去银行贷款，银行不会以为借给张三钱少，借给李四的钱就多，银行会根据每个人的指标去评估</p></li><li><p><strong>同分布</strong>：数据来自同样的一个地方</p><p>e.g. 张三去的建设银行，李四去的农业银行，两个不同的银行数据混合一起建立模型时不符合逻辑的，各自银行建立各自的模型-</p></li><li><p><strong>高斯分布</strong>：就是正态分布</p></li></ul><p><img src="/img/IMG_0186(20201007-152320).PNG"></p><h2 id="4-似然函数"><a href="#4-似然函数" class="headerlink" title="4. 似然函数"></a>4. 似然函数</h2><p><img src="/img/IMG_0187(20201007-152527).PNG"></p><p>e.g. 假如我今天要去赌博，但我不知道今天我是会赢还是会输，可能我的输赢服从着赌场的某一种规则，但这个规则我不知道，所以我在赌场门口蹲人，蹲了10个人中9个人挣钱了、1个人没挣钱，因此，不管赌场服从着什么规则，反正我今天进去了就有90%的可能性挣钱</p><ul><li><p><strong>似然函数</strong>就是根据样本去估计参数值，即参数估计</p></li><li><p>什么样的参数与数据组合后，更接近真实值，即它<strong>是真实值的可能性（概率）越大越好</strong>，即<strong>最大似然估计</strong></p></li><li><p>似然函数是一个累乘公式，所以取对数，把乘法转换为加法，计算就会简单</p></li></ul><p><img src="/img/IMG_0188(20201007-153751).PNG"></p><ul><li>因为我们是做极大似然估计，让结果值越大越好，所以我们要让“减号”后面的式子越小越好</li><li>引入一个目标函数J(θ)，让它越小越好，发现这是一个最小二乘法</li></ul><blockquote><p>Tag</p><p>面试笔试最爱考的三个点：</p><ol><li>为什么引入似然函数</li><li>为什么要对似然函数进行log变换</li><li>为什么要让右边的式子越小越好</li></ol></blockquote><p>aa</p><p><img src="/img/IMG_0189(20201007-154600).PNG"></p><ul><li>求偏导：因为我们要使得J(θ)最小，即求一个θ值最小值，即偏导=0</li></ul><h2 id="5-评估方法"><a href="#5-评估方法" class="headerlink" title="5. 评估方法"></a>5. 评估方法</h2><p><img src="/img/IMG_0190(20201007-155645).PNG"></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘(第二章) 数据</title>
      <link href="2020/09/29/shu-ju-wa-jue-di-er-zhang-shu-ju/"/>
      <url>2020/09/29/shu-ju-wa-jue-di-er-zhang-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="数据挖掘-第二章-数据"><a href="#数据挖掘-第二章-数据" class="headerlink" title="数据挖掘 (第二章) 数据"></a>数据挖掘 (第二章) 数据</h1><h2 id="2-1-数据对象、属性"><a href="#2-1-数据对象、属性" class="headerlink" title="2.1 数据对象、属性"></a>2.1 数据对象、属性</h2><p>数据集由数据对象组成，一个<strong>数据对象</strong>代表一个实体。例如，</p><ul><li>医疗数据库中，对象可以是患者</li><li>大学数据库中，对象可以是学生、教授、课程</li><li>销售数据库中，对象可以是顾客、商品</li></ul><h3 id="2-1-1-什么是属性"><a href="#2-1-1-什么是属性" class="headerlink" title="2.1.1 什么是属性"></a>2.1.1 什么是属性</h3><p><strong>属性</strong>(attribute)是一个数据字段，表示数据对象的一个特征。</p><blockquote><p>e.g.</p><p>描述顾客对象的属性——<em>custom_ID</em>, <em>name</em> 和 <em>address</em></p></blockquote><p>属性的类型可以分为：<strong>标称属性</strong>、<strong>二元属性</strong>、<strong>序数属性</strong>、<strong>数值属性</strong></p><h3 id="2-1-2-标称属性"><a href="#2-1-2-标称属性" class="headerlink" title="2.1.2 标称属性"></a>2.1.2 标称属性</h3><p><strong>标称属性</strong>(nominal attribute)的值是一些符号或事物的名字。</p><blockquote><p>e.g.</p><p>hair_color(头发颜色): black, white, yellow…</p><p>occupation(职业): teacher, doctor…</p></blockquote><p>可以看出以上的标称属性，如果用数学运算去计算这些数值或找平均数、中位数等，都没有任何意义。</p><p>所以标称属性值不具有有意义的序，且不是定量的。</p><p>标称属性有一件有意义的事是——<strong>众数</strong>(mode)——一种中心趋势度量</p><h3 id="2-1-3-二元属性"><a href="#2-1-3-二元属性" class="headerlink" title="2.1.3 二元属性"></a>2.1.3 二元属性</h3><p><strong>二元属性</strong>(binary attribute)是一种标称属性，只有两个状态（0或1）。</p><p>0：通常表示属性不该出现；</p><p>1：通常表示出现</p><blockquote><p>e.g.</p><p><em>smoker</em>: 0表示不抽烟的患者，1表示抽烟的患者</p></blockquote><p>一个二元属性是<strong>对称的</strong>，即两种状态的结果具有同等价值且携带相同的权重。</p><blockquote><p>性别属性<em>gender</em>的男和女</p></blockquote><p>一个二元属性是<strong>非对称的</strong>，即两种状态的结果不是同样重要的。</p><blockquote><p>艾滋病(HIV)化验的结果，阳性和阴性。</p></blockquote><h3 id="2-1-4-序数属性"><a href="#2-1-4-序数属性" class="headerlink" title="2.1.4 序数属性"></a>2.1.4 序数属性</h3><p><strong>序数属性</strong>(ordinal attribute)，其可能的值之间具有有意义的序或秩评定(ranking)，但是相继值之间的差是未知的。</p><blockquote><p>e.g.</p><p><em>drink_size</em> (饮料杯的大小): 小、中、大</p><p><em>grade</em> (成绩): A+, A, A-, B+…</p><p><em>professional_rank</em> (教师职位):助教、教师、副教授、教授</p></blockquote><p>以上的属性值都具有有意义的先后排序，但是我们不能说，“大” 比 “中” 大多少、“教授” 比 “副教授” 大多少？</p><p>对主观的质量评估，不能客观的度量。因此，序数属性通常用于等级评定调查。</p><p>序数属性的中心趋势可以用众数和中位数表示，但不能定义均值。</p><blockquote><p>Tag</p><p>标称属性、二元属性、序数属性都是<strong>定性的</strong>，即，描述对象的特征，而不给出实际的大小或数量。</p></blockquote><h3 id="2-1-5-数值属性"><a href="#2-1-5-数值属性" class="headerlink" title="2.1.5 数值属性"></a>2.1.5 数值属性</h3><p><strong>数值属性</strong>(numeric attribute)是定量的，可以用整数或实数值表示。</p><p>数值属性可以是<strong>区间标度</strong>或<strong>比率标度</strong>的。</p><ul><li><p><strong>区间标度属性</strong></p><p><strong>区间标度</strong>(interval_scaled)<strong>属性</strong>用相等的单位尺度度量。</p><p>区间属性的值有序，可以是正、负、0。</p><blockquote><p>e.g.</p><p>temperature*(摄氏、华氏温度)，可以计算温度差，但不能说谁是谁的倍数*</p><p><em>date</em>(日历日期)，日历日期没有绝对的零点</p></blockquote></li><li><p><strong>比率标度属性</strong></p><p><strong>比率标度</strong>(ratio-scaled)<strong>属性</strong>是具有固有零点的数值属性，即可以说一个值是另一个值得倍数(或比率)。</p><blockquote><p>e.g.</p><p>开氏温度(K)具有绝对零点</p><p>工作年限</p><p>字数</p><p>重量、高度、货币量等等</p></blockquote></li></ul><h3 id="2-1-6-离散属性、连续属性"><a href="#2-1-6-离散属性、连续属性" class="headerlink" title="2.1.6 离散属性、连续属性"></a>2.1.6 离散属性、连续属性</h3><p>机器学习领域的分类算法通常把属性分为<strong>离散的</strong>和<strong>连续的</strong>。</p><ul><li><p><strong>离散属性</strong></p><p>具有<strong>有限</strong>或<strong>无限可数</strong>数值。</p><blockquote><p>有限的：hair_color, drink_size</p><p>无限可数的：customer_ID，即可以建立整数集合一一对应</p></blockquote></li><li><p><strong>连续属性</strong></p><p>如果属性不是离散的，就是连续的。</p></li></ul><h2 id="2-2-数据的基本统计描述"><a href="#2-2-数据的基本统计描述" class="headerlink" title="2.2 数据的基本统计描述"></a>2.2 数据的基本统计描述</h2><h3 id="2-2-1-中心趋势度量：均值、中位数、众数"><a href="#2-2-1-中心趋势度量：均值、中位数、众数" class="headerlink" title="2.2.1 中心趋势度量：均值、中位数、众数"></a>2.2.1 中心趋势度量：均值、中位数、众数</h3><ul><li><p><strong>均值</strong>(mean)，还有一种丢弃高低极值的均值叫<strong>截尾均值</strong>(trimmed mean)</p></li><li><p><strong>中位数</strong>(median)</p></li><li><p><strong>众数</strong>(mode)，可分为<strong>单峰的</strong>(unimodal)，<strong>双峰的</strong>(bimodal)，<strong>三峰的</strong>(trimodal)，<strong>多峰的</strong>(multimodal)</p></li><li><p><strong>中列数</strong>(midrange)，是数据集的最大值和最小值的平均值</p></li></ul><h3 id="2-2-2-度量数据散布：极差、四分位数、方差、标准差、四分位数极差"><a href="#2-2-2-度量数据散布：极差、四分位数、方差、标准差、四分位数极差" class="headerlink" title="2.2.2 度量数据散布：极差、四分位数、方差、标准差、四分位数极差"></a>2.2.2 度量数据散布：极差、四分位数、方差、标准差、四分位数极差</h3>]]></content>
      
      
      <categories>
          
          <category> Data Mining </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Mining </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘(第一章) 导论</title>
      <link href="2020/09/26/shu-ju-wa-jue-di-yi-zhang-dao-lun/"/>
      <url>2020/09/26/shu-ju-wa-jue-di-yi-zhang-dao-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="数据挖掘-第一章-导论"><a href="#数据挖掘-第一章-导论" class="headerlink" title="数据挖掘 (第一章) 导论"></a>数据挖掘 (第一章) 导论</h1><h2 id="1-1-什么是数据挖掘"><a href="#1-1-什么是数据挖掘" class="headerlink" title="1.1 什么是数据挖掘"></a>1.1 什么是数据挖掘</h2><p><strong>数据挖掘</strong>是从大量数据中挖掘有趣模式和知识的过程。</p><p>数据源包括数据库、数据仓库、Web、其他信息存储库或动态地流入系统的数据。</p><p>另外，也可以将数据挖掘视为知识发现过程的一个基本步骤：</p><ol><li><strong>数据清理</strong>(Data cleaning)（消除噪声和删除不一致的数据）</li><li><strong>数据集成</strong>(Data integration)（多种数据源可以组合在一起）</li><li><strong>数据选择</strong>(Data selection)（从数据库中提取和分析任务相关的数据）</li><li><strong>数据变换</strong>(Data transformation)（把数据变换成适合挖掘的形式）</li><li><strong>数据挖掘</strong>(Data mining)（使用智能方法提取数据模式）</li><li><strong>模式评估</strong>(Pattern evaluation)（根据某种兴趣度度量，识别代表知识的真正有趣的模式）</li><li><strong>知识表示</strong>(Knowledge presentation)（使用可视化技术，向用户提供挖掘的知识）</li></ol><h2 id="1-2-数据挖掘的重要性"><a href="#1-2-数据挖掘的重要性" class="headerlink" title="1.2 数据挖掘的重要性"></a>1.2 数据挖掘的重要性</h2><p>我们处在信息化时代，其拥有着爆炸性增长和巨大数量的数据。因此，我们需要一种功能强大和通用的工具，以便从海量数据中发现有价值的信息——数据挖掘因而诞生。</p><h2 id="1-3-数据的类型"><a href="#1-3-数据的类型" class="headerlink" title="1.3 数据的类型"></a>1.3 数据的类型</h2><p>数据的最基本形式包括</p><ul><li><strong>数据库数据</strong>(Database data)</li><li><strong>数据仓库数据</strong>(Data warehouse data)</li><li><strong>事务数据</strong>(Transactional data)</li><li>其他类型数据(e.g., data streams, spatial data, text data, multimedia data, and the WWW)</li></ul><h3 id="1-3-1-数据库数据-Database-data"><a href="#1-3-1-数据库数据-Database-data" class="headerlink" title="1.3.1 数据库数据(Database data)"></a>1.3.1 <strong>数据库数据</strong>(Database data)</h3><p>数据库系统，也叫<strong>数据库管理系统</strong>(database management system)，由一组内部相关的数据(即数据库)和一组管理、存储数据的软件程序组成。</p><p><strong>关系表数据库</strong>(relational database)是数据挖掘最常见、最丰富的信息源，是数据挖掘研究的一种主要数据形式。</p><h3 id="1-3-2-数据仓库数据-Data-warehouse-data"><a href="#1-3-2-数据仓库数据-Data-warehouse-data" class="headerlink" title="1.3.2 数据仓库数据(Data warehouse data)"></a>1.3.2 <strong>数据仓库数据</strong>(Data warehouse data)</h3><p><strong>数据仓库</strong>(Data warehouse)是一个从多个数据源收集的信息存储库，存放在一致的模式下，通常驻留在单个站点上。数据仓库通过以下过程来构造：</p><ul><li>数据清理</li><li>数据变换</li><li>数据集成</li><li>数据装入</li><li>定期数据刷新</li></ul><p>数据仓库又称作<strong>数据立方体</strong>(data cube)的多维数据结构建模。其中，每个维对应模式中的一个或一组属性，而每个单元存放某种聚集度量值，如<em>count</em>或<em>sum</em>。</p><h3 id="1-3-3-事务数据-Transactional-data"><a href="#1-3-3-事务数据-Transactional-data" class="headerlink" title="1.3.3 事务数据(Transactional data)"></a>1.3.3 <strong>事务数据</strong>(Transactional data)</h3><p>一般来说，<strong>事务数据库</strong>(Transactional database)每个记录代表一个事务，如顾客的一次购物、一个航班订票，或一个用户的网页点击。</p><p>事务数据的数据挖掘可以通过挖掘<strong>频繁项集</strong>(frequent itemset)，频繁项集是频繁地在事务数据集中出现的商品的集合。</p><blockquote><p>Tag</p><p>数据库、数据仓库的区别：</p><ol><li>数据库通常用于业务，数据仓库通常服务于分析。</li><li>很多个业务系统的数据库往数据仓库输送数据，是各个数据库的集合体，数据仓库的建立时基于这些数据库之上的。</li></ol></blockquote><h2 id="1-4-数据挖掘任务"><a href="#1-4-数据挖掘任务" class="headerlink" title="1.4 数据挖掘任务"></a>1.4 数据挖掘任务</h2><p>任务可以分为两类：</p><ul><li><strong>描述性</strong>(descriptive)任务：刻画目标数据的一般性质</li><li><strong>预测性</strong>(predictive)任务：归纳当前数据，以便做出预测</li></ul><h3 id="1-4-1-类-概念描述：特征化与区分"><a href="#1-4-1-类-概念描述：特征化与区分" class="headerlink" title="1.4.1 类/概念描述：特征化与区分"></a>1.4.1 类/概念描述：特征化与区分</h3><p><strong>类/概念描述</strong>(Class/Concept Description)可以通过下述方法得到：</p><ul><li><strong>数据特征化</strong>(data characterization)：汇总<strong>目标类</strong>(target class)的数据</li><li><strong>数据区分</strong>(data discrimination)：将目标类和一个或多个<strong>对比类</strong>(contrasting class)进行比较</li><li>数据特征化和区分</li></ul><h3 id="1-4-2-挖掘频繁模式、关联、相关性"><a href="#1-4-2-挖掘频繁模式、关联、相关性" class="headerlink" title="1.4.2 挖掘频繁模式、关联、相关性"></a>1.4.2 挖掘频繁模式、关联、相关性</h3><p>第6、7章详细讨论</p><h3 id="1-4-3-分类、回归"><a href="#1-4-3-分类、回归" class="headerlink" title="1.4.3 分类、回归"></a>1.4.3 分类、回归</h3><p><strong>分类</strong>(classification)，指找出描述和区分数据类或概念的模型(或函数)，以便使用模型预测类标号未知的对象的类标号。</p><p>分类和回归区别：</p><ul><li><p><strong>分类</strong>预测类别(离散的、无序的)标号</p></li><li><p><strong>回归</strong>建立连续值函数模型</p></li></ul><p>也就是说，<strong>回归</strong>用来预测缺失的或难以获得的<strong>数值数据值</strong>(numerical data values)，而不是(离散的)类标号。</p><blockquote><p>e.g.</p><p>假设作为AllElectronics的销售经理，您希望根据对销售活动的三种响应，对商店中的大量商品进行分类：良好响应、中等响应、没有响应。您要根据商品的描述性特征（例如<em>price</em>, <em>brand</em>, <em>place_made</em> 和 <em>category</em>），对这三个类别中的每一个类别导出一个模型。最终的分类应最大程度地将每个类别与其他类别区分开，以呈现有组织的数据集描述。</p><p>假设结果分类模型用决策树的形式表示。例如，决策树可以将<em>price</em>识别为最能区分这三个类别的单个因素。该树可能表明，除了<em>price</em>之外，有助于进一步区分每个类别的对象的其他特征包括<em>brand</em> 和 <em>place_made</em>。这样的决策树可以帮助您了解给定销售活动的影响，并在将来设计更有效的活动。</p><p>相反，假设您不想预测每个商店商品的分类响应标签，而是希望根据以前的销售数据预测每个商品在AllElectronics即将进行的销售期间将产生的收入金额。这是回归分析的一个示例，因为构建的回归模型将预测连续函数（或有序值）。</p></blockquote><h3 id="1-4-4-聚类分析"><a href="#1-4-4-聚类分析" class="headerlink" title="1.4.4 聚类分析"></a>1.4.4 聚类分析</h3><p><strong>聚类</strong>(Cluster)分析数据对象，不考虑类标号，而分类和回归分析的是标记类的(训练)数据集。</p><p>对象根据<strong>最大化类内相似性、最小化类间相似性</strong>的原则进行聚类或分组，也就是说，同一个簇(cluster)中的对象具有很高的相似性，而与其它簇中的对象很不相似。</p><p>聚类便于分类法形成(taxonomy formation)，即将观测组织成类分层结构，把类似的事件组织在一起。</p><h3 id="1-4-5-离群点分析"><a href="#1-4-5-离群点分析" class="headerlink" title="1.4.5 离群点分析"></a>1.4.5 离群点分析</h3><p>数据集中可能包含一些数据对象，他们与数据的一般性为或模型不一致，这些数据对象是<strong>离群点</strong>(outlier)。离群点数据分析又叫<strong>离群点分析</strong>(outlier analysis)或<strong>异常挖掘</strong>(anomaly mining)。</p><p>大部分数据挖掘方法都将离群点视为噪声或异常丢弃，但是，在一些应用中(如欺诈检测)，离群点具有很大作用。</p><p>检测离群点的方法：</p><ul><li>假定一个数据分布或概率模型，使用统计检验来检测离群点</li><li>使用距离度量，将远离任何簇的对象视为离群点</li><li>基于密度的方法也可以识别局部区域中的离群点</li></ul><h2 id="1-5-数据挖掘使用的技术"><a href="#1-5-数据挖掘使用的技术" class="headerlink" title="1.5 数据挖掘使用的技术"></a>1.5 数据挖掘使用的技术</h2><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AF%B8%E5%A4%9A%E6%8A%80%E6%9C%AF.png" alt="数据挖掘使用的诸多技术"></p><h2 id="1-6-数据挖掘的主要问题"><a href="#1-6-数据挖掘的主要问题" class="headerlink" title="1.6 数据挖掘的主要问题"></a>1.6 数据挖掘的主要问题</h2><ul><li>挖掘方法</li><li>用户交互</li><li>有效性和可伸缩性</li><li>数据类型的多样性</li><li>数据挖掘与社会</li></ul>]]></content>
      
      
      <categories>
          
          <category> Data Mining </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Mining </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI in Games</title>
      <link href="2020/09/23/you-xi-zhong-de-ren-gong-zhi-neng/"/>
      <url>2020/09/23/you-xi-zhong-de-ren-gong-zhi-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="AI-in-Games"><a href="#AI-in-Games" class="headerlink" title="AI in Games"></a>AI in Games</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>哈哈哈哈哈哈</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>哈哈哈哈</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Games develpment </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
