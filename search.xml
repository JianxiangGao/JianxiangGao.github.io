<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开放世界关卡设计：全方面分析</title>
      <link href="2021/04/26/kai-fang-shi-jie-guan-qia-she-ji/"/>
      <url>2021/04/26/kai-fang-shi-jie-guan-qia-she-ji/</url>
      
        <content type="html"><![CDATA[<p>本篇博客原版出自法国自由创意总监和游戏设计师<a href="https://www.gamasutra.com/blogs/author/PascalLuban/136385/">Pascal Luban</a>，在征得作者同意后，翻译成中文，共5篇，我将其整合在一起进行分享。</p><h2 id="一、开放世界游戏关卡设计的三种策略"><a href="#一、开放世界游戏关卡设计的三种策略" class="headerlink" title="一、开放世界游戏关卡设计的三种策略"></a>一、开放世界游戏关卡设计的三种策略</h2><p><strong>“Why”比”How”更重要</strong></p><p>当我们思考一款开放世界游戏设计的时候，有一个基础问题是必须要提的：Why？为什么我们想要做一个开放世界？</p><p>这个问题值得思考，因为它的答案会对开放世界内容以及游戏机制产生重大影响。按照意图来说，开放世界游戏里的关卡设计使用有三种策略：</p><h3 id="策略1：填满玩家的游戏时间"><a href="#策略1：填满玩家的游戏时间" class="headerlink" title="策略1：填满玩家的游戏时间"></a>策略1：填满玩家的游戏时间</h3><p>该策略被运用在育碧的多个系列游戏中，比如《孤岛惊魂》、《幽灵行动》以及《全境封锁》。它的目标是给游戏带来巨大的生命周期，通过增加任务数量、不断刷新开放世界内容和支持“刷资源(farming)”机制来实现，为了鼓励玩家们收集或得到大量资源以提高角色能力、装备等等。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%80%E6%94%BE%E4%B8%96%E7%95%8C%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/%E4%BB%BB%E5%8A%A1%E9%9D%A2%E6%9D%BF.jpg" alt="任务面板"></p><p>这种策略的优势是什么？</p><p>玩家们在一款特定游戏里的时间越长，他们购买额外内容（DLC、装饰道具等）的可能性就越大，后者对于游戏销售本身来说，可以带来很大一部分的额外收入。</p><p>一款带有“无限”游戏体验的产品比较不太可能进入二手游戏市场，因为玩家们会保留游戏。而在线性体验和有限内容的游戏中，无论是场景还是关卡数较少，玩家们都会在体验完之后想要卖掉。</p><p>当玩家进入有款游戏很长时间、它的生命周期被额外、付费或免费内容延展之后，就会一直出现在媒体和玩家的视线中，因此发行商可以保持其IP的曝光率。</p><p>最后，大量内容的游戏往往更容易卖出高价格，因为这样会让玩家们觉得物有所值。</p><p>另一方面，这种游戏机制的系统维度方面也可能让开放世界变的重复，有可能削弱其玩法。另外，开发商也很难给额外内容做一个令人信服的剧情。稍后我们会专门提到使用这种策略该如何做开放世界的关卡设计。</p><h3 id="策略2：沉浸感优先"><a href="#策略2：沉浸感优先" class="headerlink" title="策略2：沉浸感优先"></a>策略2：沉浸感优先</h3><p>《荒野大镖客2》或者《刺客信条》早期的游戏是该策略最佳的案例。它通过将玩家传送到真实可信、令人感兴趣的世界获得玩家的青睐。较高可信度主要得益于细节打磨、历史参照和世界里大量NPC的行为。最后，主题的选择是让游戏宇宙有趣的原因：比如文艺复兴时期的佛罗伦萨、19世纪末的美国等等。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%80%E6%94%BE%E4%B8%96%E7%95%8C%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/%E8%8D%92%E9%87%8E%E5%A4%A7%E9%95%96%E5%AE%A22.jpg" alt="荒野大镖客2"></p><p>该策略的优点如下：</p><p>它的首个优势是对特定主题的吸引力，对该主题感兴趣的用户有可能成为潜在的游戏买家。</p><p>另一个优势是可以加入高质量的剧情。实际上，如果一款游戏世界的可信度较高，就更容易塑造可信的角色和场景，后两者对于讲述好故事都很重要。后者吸引了一些玩家，并且展示了它可以给很多游戏带来附加价值。作为证明，《最后生还者》就将高效率游戏玩法和高质量剧情完美结合在了一起。</p><p>在弱点方面，这种对细节的关注会让研发复杂化，因此提高了游戏研发成本。另外，让游戏环境可信的需求对呈献给玩家的动作密度也有一定影响，但同时还对玩家所控角色技能、能力和装备的升级有所影响，因此有可能削弱玩法。</p><h3 id="策略3：具有挑战性的地图"><a href="#策略3：具有挑战性的地图" class="headerlink" title="策略3：具有挑战性的地图"></a>策略3：具有挑战性的地图</h3><p>这个策略是《漫漫长夜》、《Day Z》或者《森林》等生存游戏的核心，在大多数的开放世界游戏里，<strong>地图的主要目的是支撑游戏任务</strong>，除了刷资源和一些伏击任务之外，地图就没有其他的玩法功能。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%80%E6%94%BE%E4%B8%96%E7%95%8C%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/DayZ.png" alt="Day Z"></p><p>但在生存游戏里，则是另一种情况。对周围世界的了解是让玩家生存和发展的关键，玩家的挑战的一部分在于，他们需要直到如何走出去，找到必要的生存资源。因此，地图是游戏系统的核心组成部分之一，而不是为了任务或者动作场景而作的简单装饰品。</p><p>该策略可以带来一些好处：</p><p>它能够带来比其他动作游戏更原创、更复杂的玩法。另外，该玩法并不一定要侧重战斗，因此可以吸引厌倦战斗或者喜欢合作体验的玩家们。</p><p>生存游戏的玩法可以做到比较复杂，它们给游戏带来了更硬核的定位。实际上，这类游戏的玩法需要掌握游戏的很多个方面：了解环境、利用所发现的资源，制定良好的生存和发展策略。此外，任何尊重自己的生存游戏都不会提供存档。当玩家们的角色死亡，它们就必须从头开始，这种残酷的功能可以弱化，但仍然是游戏体验的核心部分。</p><p>最后，该策略与很多游戏模式兼容：单机、联机合作等等。合作模式有为有趣，因为它们可以吸引所有技术水平的大量玩家们。</p><p>但是，这种策略也有劣势。该品类相关的玩法机制比较复杂，因此可以让不那么熟练玩家们望而却步，而且不同的游戏可能会有重复感，削弱了品类整体的吸引力。</p><h3 id="如何选择策略？"><a href="#如何选择策略？" class="headerlink" title="如何选择策略？"></a>如何选择策略？</h3><p>有些游戏只选择一种策略。例如，《Day Z》聚焦于策略3，《巫师3》使用策略2，因为它超出了所有基于强剧情的动作冒险游戏，开放世界相对是比较少被探索的。</p><p>但很多游戏选择将这些策略结合起来，比如《荒野大镖客2》很巧妙地融合了策略1和2，《漫漫长夜》用比较原始的方式使用了策略2和3提供了不同的游戏模式：其生存模式带来了真实的生存玩法；但其Wintermute模式则是围绕线性剧情打造，同时提供了更多的生存玩法。</p><p>将这些策略不同程度的混合是一种有效的选择，当设计一款开放世界游戏的时候，应该避免的错误是，在增加功能的时候不问自己想要创造的游戏体验是什么。了解这三种策略可以让它变得很容易被定义，让整个团队都清晰了解游戏的核心是什么，在游戏功能方面作出正确的选择。</p><h2 id="二、如何处理玩家进度？"><a href="#二、如何处理玩家进度？" class="headerlink" title="二、如何处理玩家进度？"></a>二、如何处理玩家进度？</h2><p>解决了游戏关卡的目标策略之后，游戏策划需要确定能够实现该目标的地图功能，因此第二个部分我们要说的是玩家进度。</p><h3 id="1-无所不在的进度功能"><a href="#1-无所不在的进度功能" class="headerlink" title="1. 无所不在的进度功能"></a>1. 无所不在的进度功能</h3><p>相信很多人都注意到，所有开放世界游戏都给了玩家很多提升角色的可能或者很多机会：获得更好的装备、角色能力提升、新功能、解锁新区域等等。这并非偶然，加入这样的机制满足了很多需求：</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%80%E6%94%BE%E4%B8%96%E7%95%8C%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/%E5%B7%AB%E5%B8%883%E6%8A%80%E8%83%BD%E8%A7%A3%E9%94%81.jpg" alt="巫师3技能解锁"></p><p><strong>进度机制给玩家短中期目标，带给他们很多奖励</strong>。因此，它们可以鼓励玩家投入更多时间，“开环”原则也是让免费游戏如此迷人的原因。我们不能忽视的是，带来长生命周期是开放世界游戏的主要优势之一，尤其是在发行商看来。</p><p><strong>与进度机制相关的奖励通常让玩家满意</strong>，因为它们可以影响游戏体验，而不是装饰品，因此可以丰富游戏体验。</p><p><strong>进度机制源于RPG游戏，玩家们有很多选择来提升和定制角色能力</strong>，一款游戏提供的选择往往是越多越好。</p><p>最后，<strong>进度功能还可以用于游戏教学</strong>。这个方面是不容忽视的，因为开放世界游戏往往比较复杂。如果玩家不能充分理解如何提升他们的角色，就不会从该游戏体验获得太多的帮助。</p><p>也就是说，无处不在的进度机制似乎让开放世界游戏更标准化。换句话说，它们的主题、游戏机制不同，但却可以带来相似的游戏体验，有可能让玩家厌倦。因此，对于开放世界游戏来说，在关卡设计中处理好进度机制是非常重要的。</p><h3 id="2-为开放世界游戏打造进度的策略"><a href="#2-为开放世界游戏打造进度的策略" class="headerlink" title="2. 为开放世界游戏打造进度的策略"></a>2. 为开放世界游戏打造进度的策略</h3><p>高质量的游戏设计是满足需求的设计，因此一个好的开放世界游戏也不是由大量散乱的场景和玩法随机组成的，它的构成必须是对打造特定游戏体验意图的回应，那么这些策略都是什么？</p><p>在一款开放世界游戏里，玩家进度的打造可以基于三种类型的游戏体验：</p><p><strong>玩家能力提升。</strong>这是最常见的，玩家们开始是比较弱的角色，并且呼吸寻求提升能力：装备、属性、队友、疆域等等。这种策略在育碧大多数的开放世界游戏里都有出现，比如《孤岛惊魂》和《全境封锁》系列，玩家的动机就是不断增加他们角色的“能力”。</p><p><strong>剧情推进。</strong>对于剧情向游戏来说，主线剧情的发展才是玩家的主要动力，这在《荒野大镖客2》当中很明显。玩家的角色提升很少，当然，他们可以挣（偷）钱或者物品获得更好的武器或马匹，购买装备或者药品。但这不是该游戏的乐趣所在。而在上面提到的育碧游戏里，，玩家角色能力的提升成为玩游戏的主要动机，而在《荒野大镖客2》里，主线剧情的推进才是吸引玩家的主要动力。</p><p><strong>探索游戏世界。</strong>在这种情况下，整个开放世界并不是一下全部开放的，玩家们必须保持进度解锁新区域，这个策略在《巫师3》游戏里比较常见。</p><p>当然，大多数的开放世界都融合了以上三种体验，只不过是用不同的方式。因此，作为游戏策划，比较重要的是，一开始就要问如何在三者之间做融合，得出的答案会为开放世界带来设计选择。</p><h3 id="3-开放世界关卡设计的运用"><a href="#3-开放世界关卡设计的运用" class="headerlink" title="3. 开放世界关卡设计的运用"></a>3. 开放世界关卡设计的运用</h3><p>我们先从玩家能力升级策略开始，打造开放世界最好的方法是什么？</p><p>我建议让资源获取（材料、经验、装备、消耗品等）只有一部分是运气的结果。换句话说，资源的发现首先要源于玩家的选择和他们对世界的了解，这是优秀设计的一个原则。过多的随机性会扼杀优秀的玩法，因为它阻碍了玩家发挥才能和决策的能力。</p><p>以下是选择这种方向的一些建议：</p><p><strong>形成一个关卡设计基本结构。</strong>一组规则和其他东西决定了玩家在哪里可以找到特定资源，比如，蘑菇只能在大树脚下的木头上找到。一旦玩家将资源与位置联系起来，它们就非常乐于猜测如何找到特定资源。</p><p><strong>将资源与兴趣点挂钩。</strong>玩家们会自然地被指引到那里，另外，这样做也比在小地图用icon标记方位更有沉浸感。</p><p><strong>不要在地图上“撒”资源。</strong>如果玩家们发现随机走路就能找到资源或目标，地图的探索就会变得机械化、没有目标，因此带来的奖励感会很少。将这些兴趣点或者资源围绕“小群体”分组会更有趣，就像迷你旅行那样。这种构造使得引导玩家行动成为可能，可以通过有趣的观点、要寻找的艺术品、随机遭遇战以及传送等替代手段引导玩家行为。因此，走到一个兴趣点或者一群兴趣点附近，成为了一个小型冒险，而不是单调的区间走动。</p><p>接下来我们看基于剧情进展的进度策略，打造开放世界的好方法是什么？</p><p>当然，<strong>任务必须作为主进度机制，而非资源收获。</strong>但首先，任务不能仅仅是借口，必须对玩家动作赋予意义带来帮助，同时要让他们与NPC形成更好的关系，更好的了解他们。负责脚本的团队应该这样拓展真正的叙事进度，并带来高质量的剧情，这个问题会在文章稍后部分详细说明。</p><p><strong>基于任务拓展地图结构，而不是让任务设计跟着地图走。</strong>3D美术团队经常会做一个开放地图，然后让关卡设计团队去理解、并增加他们的任务。换句话说，装饰品的构造比任务设计本身完成的更早。这种方式我是不推荐的，因为一个优秀的任务设计需要定制化的结构。</p><p><strong>用集群方式解锁任务，而非逐次解锁。</strong>比如任务E、F、G和H只有在玩家们完成了任务A、B、C和D之后才会解锁。该系统可以让游戏编剧控制剧情线的进度，同时为玩家动作带来自由度，因为他们可以按照自己的选择完成每个组的任务。</p><p><strong>将第一组任务作为上手体验。</strong>需要提醒的是，上手体验不止是新手教学，它的目标还包括给玩家长线投入的动力。因此，优秀的上手体验对于3A和手游都一样重要。首批任务的顺序应该是固定的，而且必须非常谨慎的制作。实际上，玩家们在上手体验期间才对游戏有了感情。背景必须是引人入胜，甚至是波澜壮阔的，任务必须可以很简单就能完成，同时要带给玩家扣人心弦的体验，遇到的第一个角色必须讨人喜欢，当然，玩家们必须快速对他们的角色产生同理心。</p><p>最后，用地图发现的方式谈谈进度策略。这种情况下，整个地图并不是理解开放，游戏机制多少有些限制，让玩家不能随心所欲地到他们想去的地方。因此，玩家们是逐渐发现开放世界地理构造的。</p><p>这种策略比上述两种带来的深度更少，但也提供了两个优势：它对于喜欢探索的玩家来说很有吸引力，而且还可以强化前两个策略：玩家能力的提升和剧情的进展。</p><p>采用这种进度策略的关卡设计，必须谨慎处理好以下两个问题：</p><p><strong>如何让区域有差异化？</strong>实际上，如果发现新区域对于打造玩家体验是很重要的元素，那么每个新区域都必须和之前的有很大差别。仅仅改变环境是不够的，还应该加入能够影响玩法的新功能：新威胁、新资源、新类型游戏目标、新战术选择等，再次强调的是，关卡设计必须指引美术团队的目标。</p><p><strong>如何避免游戏机制限制玩家随意移动？</strong>在一款承诺做到开放世界的游戏里，人为阻碍玩家移动的做法一点都不优雅，现有的解决方案是要求玩家建造一个特定装备，比如一艘船。《孤岛惊魂：原始杀戮》提供了一个有趣的妥协方案：一些区域是开放的，但没有保暖的衣服，玩家们无法在那里停留太长时间。</p><h2 id="三、如何设计开放世界游戏地图？"><a href="#三、如何设计开放世界游戏地图？" class="headerlink" title="三、如何设计开放世界游戏地图？"></a>三、如何设计开放世界游戏地图？</h2><p>前两部分完成之后，关卡设计团队必须面对“白纸”的现状，并开始画地图。在这个阶段，策划团队确定了开放世界在制定游戏体验中的角色，并且选择了一个以上的玩家进度策略，那么如何“画出”开放世界本身呢？</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%80%E6%94%BE%E4%B8%96%E7%95%8C%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/%E5%AD%A4%E5%B2%9B%E6%83%8A%E9%AD%825%E5%9C%B0%E5%9B%BE.jpg" alt="孤岛惊魂5地图"></p><p>现在，负责开放世界设计选择的团队需要确定一个描述其基础特点的高级文档，这个任务是复杂的，因为他们必须解决之前两个选择带来的限制，遵循适用于所有关卡设计的黄金法则，并且给打造团队的关卡设计师们清楚的指引。</p><p>我建议使用以下方法，它可以让你以正确的顺序问对的问题。</p><p><strong>问题1：开放世界该做一个巨大地图，还是由多个相邻地图组成？</strong></p><p>两种情况都存在。《孤岛惊魂》系列的游戏都是用非常巨大的地图，它会随着玩家进度而加载。相反，《漫漫长夜》则是由一系列中型地图组成，从一个地图切换到另一个地图会导致地图加载，打断了游戏体验。</p><p>两个选择各有优点。第一个选择从技术角度更为优雅，让玩家感觉更舒服，但第二个选择更适合大陆、星球甚至银河系这样的巨型世界。原因是什么？因为将关卡设计的重点放在有限区域上，比提供一个重复或者空白的巨大世界要好得多。</p><p><strong>问题2：地图应该是统一还是提供差异化区域？</strong></p><p>《全境封锁》系列游戏提供了统一风格的地图，而《深海迷航》则带有差异化区域，玩家们潜水越来越深就会发现更多区域。后一个选择带来多种优势：可以防止游戏环境单一，可能带来新玩法，给玩家带来进度感等等，但在美术资源方面会造成昂贵的成本，因此不适合所有主题。</p><p>最后，我们也不要忘记用一个经济的方案为玩家带来多样性：白天和黑夜之间的选择。这种方式由中世纪主题生存游戏《The Black Death》开发商带来，地图会在白天和黑夜之间变化，地图结构相同，但捕食者和特定NPC的行为和密度发生了变化。</p><p><strong>问题3：玩家是否能随时访问整个地图？是否有一个“门槛”机制认为限制他们的行动？</strong></p><p>让玩家随时访问整个地图，可以增强探索与自由移动的乐趣，它给人的感觉更真实。但很多开放世界游戏都限制玩家移动。比如在《巫师3》当中，主线剧情的进度解锁新区域，而在《孤岛惊魂：原始杀戮》里，玩家们必须解锁抓钩才能到达特定海拔的区域。</p><p>在这完全自由或限制机制两种策略之间，有些游戏使用了混合系统，既允许很大的行动自由度，又不鼓励玩家到处游荡。比如在《全境封锁2》当中，华盛顿特区所有区域都是可以步行访问的，但玩家们很快发现，如果他们没有达到最小等级，就完全打不过特定区域的敌人。</p><p><strong>问题4：地图导航是否要成为对玩家的挑战？</strong></p><p>为了帮助玩家通过开放地图，你可以采用两种策略：仅通过导航（小地图或增强图标），或者让玩家理解他们周围的地图结构，然后自己猜测该怎么走。</p><p>正确的选择，取决于地图导航在游戏体验中的角色。</p><p>如果导航的目标是在开放地图中从A点走到B点，那么第一个策略是最优选，你没有道理让他们选择正确的路线增加游戏的复杂性，比如《GTA》系列游戏里，地图导航随处可见。</p><p>另一方面，如果寻找路线、发现隐藏路径或者地点是玩家必须面对的挑战之一，那么就可以选择第二种策略，比如在《漫漫长夜》里就是如此。与在现实中一样，玩家们没有寻路“魔法”，他们只能凭借自己的观察力来判断该怎么走。这种情况下，给玩家找到预测兴趣点或者路线的线索很有必要。比如，一个路标的出现可以让你猜出冰雪之下隐藏着一条路，一条小溪很自然地成为旅行方式，远处的烟就是一个兴趣点等等。因此这种结构引导玩家并奖励使用逻辑思考和有观察力的玩家。因此区域必须通过规划主线路的方式构成，将兴趣点有逻辑的放置，并提供线索，让玩家有机会发现这些元素。</p><p><strong>问题5：如何定位玩家必须恢复的资源？</strong></p><p>所有开放世界游戏都提供大量的收集资源：植物、矿物、各种物体、动物等等。他们符合多个目标：为玩家进度带来帮助、为他们提供微观奖励，并调整地图的开放维度。但是如何定位它们？有两种策略可以使用：分散式和集中式。</p><p>分散式策略包括将资源用随机方式分散到整个地图。这种方法的优点是让玩家访问整个地图，当他们发现稀有资源的时候可以增强满足感，也简化了地图设计的工作量。</p><p>集中式策略要求设计师将资源围绕兴趣点或者特殊区域分布，比如河床或者崖底。这种方式限制了开放式地图的价值，但让资源的发现更有可预测性，它有利于那些对特定资源分布规律有了解的玩家，比如，蘑菇只能在特定森林里被找到。这样做实际上对发现某些东西的玩家更友好，因为他们凭借自己的了解而发现了资源，而非全靠运气。</p><p>第一个策略适用于投入很多时间探索地图的玩家，而第二种则让努力了解周边环境的玩家更感兴趣。</p><p><strong>问题6：开放世界关卡设计的基本法则应该是什么？</strong></p><p>关卡设计原则设定了一款游戏或整个开放世界地图都必须遵循的规则，这些规则主要聚焦于以下几点：</p><p>资源出现点。即便选择了分散式策略，资源也不应该以荒谬的方式呈现，比如玩家们可能不会理解为何森林中间发现了煤气罐。</p><p>动物的位置和行为。如果后者是猎物或者掠食者，它们就不是简单的装饰元素，而是玩法的一部分。游戏系统和AI决定了它们的行为，但定位它们的是关卡设计师，所以玩家可以预测到它们的出现。如果游戏提供昼夜交替环境，就应该充分利用该优势。比如，狼群应该在白天避开玩家，但在夜间会发起攻击并靠近房屋。</p><p>旨在引导玩家移动的视觉线索。为了让玩家的行为尽可能出于本能，他们必须很快能够辨别可以打开或穿过的缺口、无障碍岩石、攀爬区域等等，它们还必须确定行动的主线，这些图形元素，以及使用规则也是关卡设计原则的一部分。</p><p>玩家将与之交互的路径与物体的大小和体积模型。这包括窗户的宽度、可通过跳跃跨越障碍物的高度，甚至是角色背后防止他们遭到敌人火力的掩护点。这些模型将确保动画具有连贯性，玩法意图被尊重。</p><p><strong>问题7：如何给环境做动画？</strong></p><p>如果你想让玩家沉浸在一个可信的宇宙中，那么它就必须有动画：风的效果、烟雾、鸟群、角色或者背景移动的车辆、雨、激流等等，这些动画不一定影响玩法，但能够让玩家体验更有沉浸感。</p><p>因此，在地图上的关键位置预测和定位最壮观的动画是必要的，甚至可以通过指引的方式让玩家走向它们。因此，发现瀑布可以带来印象深刻的瞬间，并且作为兴趣点的支撑。</p><p><strong>问题8：我们能否在地图里引入“难忘时刻”？</strong></p><p>最后，如果有可能，规划一两个壮观场景是聪明的做法。这些将带来兴奋感，有助于游戏与玩家之间的沟通。</p><h2 id="四、如何在开放世界游戏里讲故事"><a href="#四、如何在开放世界游戏里讲故事" class="headerlink" title="四、如何在开放世界游戏里讲故事"></a>四、如何在开放世界游戏里讲故事</h2><p>需要说明的是，优秀的故事有三大要素：主角、环境和剧情。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%80%E6%94%BE%E4%B8%96%E7%95%8C%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/%E5%B7%AB%E5%B8%883%E6%95%85%E4%BA%8B.png" alt="巫师3"></p><p>我们经常忘记，但主角是所有好故事里的核心元素。后者之所以有趣，是因为它关系到角色与戏剧相关的方式。因此，任何优秀的叙事，都是从定义一个让观众产生代入感的有趣角色开始的。</p><p>环境决定了装饰物和主题，通常吸引玩家的是后者，环境通过提供强化戏剧性框架的方式增强故事。比如飞机在安第斯山脉坠机，比在太平洋上的某个岛屿让一群乘客幸存者的故事更有戏剧性。</p><p>最后，剧情只有一个目的：创造戏剧条件，直到最后一刻解开悬念。写作的规则自希腊悲剧以来就是一成不变的。</p><p>在了解了基本元素之后，我们来看看开放世界游戏如何加入剧情和关卡设计。</p><h3 id="1-案例分析：《荒野大镖客2》与《巫师3》"><a href="#1-案例分析：《荒野大镖客2》与《巫师3》" class="headerlink" title="1. 案例分析：《荒野大镖客2》与《巫师3》"></a>1. 案例分析：《荒野大镖客2》与《巫师3》</h3><p>这两个游戏是开放世界游戏的象征，因为两家研发工作室在剧情方面投入了大量资源。然而，他们选择了不同的方式。</p><p>《荒野大镖客2》发生在20世纪之交的美国西部，这个时代具有惊人的可信度，我们跟随一群试图逃避敌人的法外之徒进行冒险，但最重要的是达到一个地上天堂，一个他们都希望和平生活的地方。</p><p>在这款游戏里，剧情很简单，它只是说明该群体行动和游戏主线任务的借口。叙事主要通过NPC角色和它们与玩家角色亚瑟的关系而展开。开发商在次要角色上投入了很大的努力，他们的形象、个性、表达方式、道德观、配音，任何东西都不是随机选择的。这些角色真实可信，玩家们投入大量时间与他们想出，最终产生真实情感，对他们同情或者反感。就像电视剧那样，《荒野大镖客2》的开发者们聚焦于角色而非剧情，这在游戏行业是比较罕见的。</p><p>因此，关卡设计里的叙事影响力是很低的，但有一点例外：对环境细节的关注。这是不容忽视的，因为后者是优秀叙事的三大关键元素之一。</p><p>现在来说《巫师3》。这款游戏设定在东欧中世纪灵感的幻想世界，主角杰洛特是一名巫师，是雇佣兵的一种，收取金钱帮助当地人消灭怪兽。</p><p>在《巫师3》游戏里，CDPR开发者们做了不同的选择：他们聚焦于剧情和环境。</p><p>主剧情的结构比《荒野大镖客2》更好一些，它围绕一次精准的搜寻，也就是杰洛特养女希里的失踪而展开，带来戏剧效果的阴谋，与很多游戏不同的是，支线任务往往很有趣。后者让我们发现感人的角色，令人心痛的家庭，需要执行的调查等等。</p><p>游戏环境是精心打磨的，这是个充满了战争与军人的世界，地点和场景没那么壮阔，与《指环王》史诗级的背景相去甚远，但《巫师3》的世界是真实可信的。这可以通过遭遇角色行为看出来，无论是简单的农民、军阀还是君主。数小时的游戏之后，我们被特殊的氛围笼罩，它混合了绝望、残忍，还有人性。</p><p>角色本身没有那么多的深度，因为他们都相对脸谱化：比如沉默寡言的英雄、充满智慧的导师，战士同伴等。我们对他们的代入感较低，因为他们缺乏厚度，游戏也没有提供足够的机会让玩家更好地了解他们。</p><p>在《巫师3》当中，叙事对关卡设计的影响是最主要的，它引领了次要人物的剧情，给了游戏环境以灵魂。</p><h3 id="2-优秀叙事的好方法"><a href="#2-优秀叙事的好方法" class="headerlink" title="2. 优秀叙事的好方法"></a>2. 优秀叙事的好方法</h3><p>我们看到在开放世界游戏里，将关卡设计与剧情融合的策略有很多种，我们来回顾一些比较好的方法。</p><h4 id="1-围绕主角个人任务集中故事进度"><a href="#1-围绕主角个人任务集中故事进度" class="headerlink" title="(1) 围绕主角个人任务集中故事进度"></a>(1) 围绕主角个人任务集中故事进度</h4><p>需要再次强调：优秀的叙事是围绕角色展开的，这种原则也适用于游戏。我们必须从打造让玩家有代入感的主角开始，为此，我们需要给他们厚度，让他们真实可信。然后英雄必须遇到个人危机，不需要让他们拯救地球也能让任务令人兴奋，我们可以简单地给他们所爱之人带来威胁。</p><p>一旦玩家设定个人目标，想要保护或者扮演英雄，它们在游戏里的参与度就有了动力，哪怕游戏只提供重复任务和聚焦刷资源的机制。</p><h4 id="2-围绕NPC的戏剧经历打造任务"><a href="#2-围绕NPC的戏剧经历打造任务" class="headerlink" title="(2) 围绕NPC的戏剧经历打造任务"></a>(2) 围绕NPC的戏剧经历打造任务</h4><p>所有开放世界游戏都为玩家提供任务，它们并不总是有趣的，通常出现的目的很单一：就是为玩家行动提供借口。这种现象在很多开放世界游戏里很常见，研发团队往往倾向于数量而非质量。</p><p>但是，如果游戏的创意方向给剧情方向赋予了重要性，那么这些任务的剧情就需要投入更多关注。</p><p>围绕NPC的戏剧经历打造任务，当玩家们在遭遇中因为NPC的伤心而被感动的时候，它们会在相关任务里更有参与感，《巫师3》就提供了大量这类任务。为了不会掉新手玩家的乐趣，这里我们就不做剧透。</p><h4 id="3-将任务写成微型冒险"><a href="#3-将任务写成微型冒险" class="headerlink" title="(3) 将任务写成微型冒险"></a>(3) 将任务写成微型冒险</h4><p>这个方法也适用于叙事型游戏任务，它不适用于通过大量重复任务推动玩家进度的体验。</p><p>认真编写的任务剧情可以控制玩家将要经历的东西：游戏节奏、位置多样性、战术环境的趣味性、难度曲线的呈现，但还可以展示戏剧性的转折带来更多选择。</p><p>通过融合这些技巧，关卡设计师或任务策划可以筹划任务，同时带来出色的游戏体验。值得一提的是，它们可以做出一些不可预测的任务，因此我们可以将关卡设计师与编剧的技巧结合。在我看来，最好的一个案例是《S.T.A.L.K.E.R》当中的任务，它是由GSC Game World研发的射击游戏。</p><p>但是，如果你觉得“沙盒”是开放世界当中的主要兴趣点，确保这些任务不是强制的，我们不能加入这样的任务阻碍玩家进度，这会带来挫败感。</p><h2 id="五、开放世界游戏如何创新"><a href="#五、开放世界游戏如何创新" class="headerlink" title="五、开放世界游戏如何创新"></a>五、开放世界游戏如何创新</h2><p>以上四个部分谈到了开放世界游戏关卡设计里的必要问题，但最后一个部分仍是不容忽视的，那就是创新。</p><p>如果简单抄袭成功开放世界游戏的选择，将会是很危险的。实际上，危险不在于带来任何新东西、不在于刷新玩家体验，不在于给玩家带来一定程度的厌倦感。玩家们和媒体一样，都喜欢被新想法和创意吸引。</p><p>在最后这一部分，我将快速谈到几个我验证过的可以刷新开放世界游戏内容的方法。</p><h3 id="方法1-开放世界手游"><a href="#方法1-开放世界手游" class="headerlink" title="方法1: 开放世界手游"></a>方法1: 开放世界手游</h3><p>由于高速增长和在业内占比越来越高，移动平台可能是该类型游戏的下一个战场。但首先，这些平台基于以下2点可以带来新玩法：1）地理定位2）永恒世界但使用。</p><p>这些游戏终端的主要特征是，我们可以随时进入这些世界，无论我们在什么地方。这让永恒世界更具有吸引力，因为它更容易让我们在事件发生时作出反应。</p><p>至于地理定位，尽管有《Pokemon Go》或者《一起来捉妖》等成功作品存在，但它远没有成为大多数玩家的习惯。不过，这只是时间问题，因为智能机在人们生活中的重要性会不断增加。</p><p>开放世界的地理定位可以让我们将真实世界作为地图，这会让游戏更有沉浸感。它还可以带来玩家交换的新维度，AR的进步可以让这些游戏更舒适和精准，我甚至特别想到了在苹果iPad上刚刚出现的激光雷达技术的研发。</p><p>然而，它也将激化开放世界游戏里的多人模式问题（匹配、玩家密度等）。</p><p>开放世界游戏的经济模式也必须调整，目前的付费模式在移动平台很可能行不通，因为免费模式才是手游平台主导模式，我们将不得不转向限制体验模式或者内购模式。</p><h3 id="方法2-新进度机制"><a href="#方法2-新进度机制" class="headerlink" title="方法2: 新进度机制"></a>方法2: 新进度机制</h3><p>开放世界游戏可以让玩家厌倦的一个方面就是进度系统，无论游戏的主题是什么，它几乎总是同样的：玩家们提升属性（健康值、力量等）、技能（谨慎、精准度等）与装备。另外，游戏进度几乎总是依赖于刷资源机制，让玩家重复动作，很难体现关卡策划的创意，这些机制很有效，但它们是重复的，每个游戏几乎都一样，这会降低它所带来的乐趣。</p><p>然而，其他进度机制也是有可能的：</p><p>1）解锁新区域：玩家进度可以根据对区域的发现，这会让他们拓展能力解锁信息或者联盟，以取得在游戏里的进步。这种方法非常重视跑酷玩法以及动作游戏里比较少用的技巧，比如攀岩。</p><p>2）制造：该机制通常出现在开放世界游戏里，但与主进度系统相比，往往是简单的附加功能。如果制造成为玩家进度的核心功能，刷资源就会更有趣，最重要的是，我们可以给玩家带来传统玩法不具备的自由度。</p><p>3）玩家与NPC的剧情和关系：如果玩家不能提升技能，但必须依赖于冒险过程中遇到的角色才能推进游戏会怎样？这是一种尚未被使用过的方法。如果一个款游戏想要提供可信的游戏体验，那就不能依赖人为设计的进度获得属性点。在游戏里与NPC的互动可以让玩家形成联盟、获取关键信息、解锁获取方式或价值。这种方法可以增强机遇对话的玩法，但也可以用于玩家在冒险中遇到的道德选择。</p><h3 id="方法3-新主题"><a href="#方法3-新主题" class="headerlink" title="方法3: 新主题"></a>方法3: 新主题</h3><p>刷新开放世界游戏体验的另一个方法，是简单地提供新主题，比如：</p><p>1）使用船舶或者太空基地等密闭空间：开放世界最大的特征就是自由移动和很多目标的动作，无论是否有意。数平方公里的区域并不是必备条件，使用小地点可以带来一些优势，比如更多细节、前所未见的背景，以及更低的预算。</p><p>2）开放世界游戏里的玩法探索应用很少，比如谍战、商战、竞速等。开放世界游戏几乎都提供动作玩法，后者的确受玩家欢迎，但其他不那么暴力的用户更喜欢体育或策略玩法。探索这些玩法可以成为开放世界游戏拓展用户、解决动作玩法单一性的方式。育碧的《The Crew 2》就遵循了这个策略，并且为其竞速游戏打造了一个巨大的开放世界。</p><p>3）以时间更新代替物理位移改变维度：开放世界主要是提供移动和动作自由度，但这个自由度可以转向第四个维度，时间。换句话说，玩家们不在一个大区域里物理移动，而是在时间里移动，这种方法可以带来非常差异化但体验，但需要特别专业的剧情与玩法混合。</p><p>4）游戏品类混合，比如战术与格斗游戏。如果两个品类很难融合在一起，那么动作与战术就表现相当不错。有人可能还记得动视的《终极战区》，该游戏成功融合了第一人称动作与战术选择，这种类型的组合很少有人用，但它与大多数动作游戏的预期兼容，不管是战术还是战略，都可以在开放世界游戏里受欢迎。</p><p>5）未使用的背景：比较好的案例是《The Black Death》，这款游戏由Syrin Studio研发和发行，我有幸作为顾问参与其中。该游戏发生在中世纪，但与大多数取材同时期的游戏都很不同，还在玩法方面加入了新功能。较少使用的背景或者时代可以作为开放世界游戏的偏爱：被占领时期的法国、新世界的发现等等。</p><h3 id="方法4-使用断续世界"><a href="#方法4-使用断续世界" class="headerlink" title="方法4: 使用断续世界"></a>方法4: 使用断续世界</h3><p>这是刷新玩家体验的最后一个维度：为玩家提供一个由断续区域组成的开放世界，换句话说，是彼此不接触的区域，从一个区域移动到另一个区域，然后模拟动作。</p><p>用连续地图打造开放世界的优势在于，可以让玩家从一个兴趣点转移到另一个兴趣点的时候选择路线，如果旅行本身有趣，这是件好事。然而，事实并非总是如此，太多的开放世界游戏强迫玩家浪费很长时间，而且是无趣的时间在地图上移动。</p><p>通过去掉这些枯燥的移动阶段打造一个开放世界游戏有几个优势：</p><ul><li><p>开放世界可以覆盖一些不可能建模的巨大空间，比如一个国家、一个星球甚至是太阳系，我们可以据此拓展新主题和游戏机制。</p></li><li><p>断续开放世界更真实，因为它要不断扩张。一些开放世界游戏将很大的区域压缩到一个很小的地图上，这个世界就是去了很多的可信度与沉浸感。</p></li><li><p>当策划团队不再担心兴趣点之间如何填满的时候，他们可以聚焦于打造更好的兴趣点。这可以带来更高质量的关卡设计：有趣的结构、更优化的对手AI、难度以及节奏管理。</p></li><li><p>最后，一个断续的结构可以让限制移动更简单，因此可以更好地控制玩家进度。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望这个长篇大论的文章对同行们设计开放世界关卡有用，我的目标是帮助你们找到正确的问题，因为，一旦形成了对的问题，找到对的答案就更容易了。</p>]]></content>
      
      
      <categories>
          
          <category> 个人向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Level Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关卡设计的10个技巧</title>
      <link href="2021/04/25/guan-qia-she-ji-de-10-ge-ji-qiao/"/>
      <url>2021/04/25/guan-qia-she-ji-de-10-ge-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以下分享的技巧是以<strong>不同方式</strong>针对<strong>不同游戏</strong>起作用的<strong>一般建议</strong>。这些技巧是关卡设计师用来移动玩家，鼓励探索并创建沉浸式游戏区域的方法。每个游戏都是不同的，因此每个游戏都需要不同的方法。</p><p>技巧的选择绝不是关卡设计的“规则”。我认为，没有规则，只有准则才有助于创造最佳体验。每个设计师都有自己的创建关卡和解决问题的方法，因此我们应该以这些技巧和窍门为参考，而不是将之作为关卡设计的“铁”则。</p><h2 id="1-清晰明了的“Affordances”"><a href="#1-清晰明了的“Affordances”" class="headerlink" title="1. 清晰明了的“Affordances”"></a>1. 清晰明了的“Affordances”</h2><p><strong>Affordances</strong>是对象的属性，它向玩家显示他们可以执行的操作。玩家应该能够感知并清楚地理解如何使用这些物品。例如，门上的推垫（图左）或拉杆（图右）会告诉您应采取什么措施打开门。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E9%97%A8%E6%8A%8A%E6%89%8B.jpg" alt="门把手"></p><p><strong>Affordances</strong>在游戏中就是通过游戏关卡设计创建的规则。例如在《古墓丽影》中，如果玩家看到一块木板或一辆旧车在空中倾斜，他们就会很清楚地知道能够将其作为发射台来进行更远的跳跃。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E5%8F%A4%E5%A2%93%E4%B8%BD%E5%BD%B1.jpg" alt="古墓丽影"></p><p>在游戏的关卡中，拥有清晰且一致的<strong>Affordances</strong>是非常重要的。设计者需要与玩家建立<strong>“信任连接”</strong>，以便玩家清楚地了解自己在游戏中可以做什么和不能做什么。设计者则应该避免违反这种<strong>“信任连接”</strong>。如果这样做，将会给玩家们造成混乱和挫败感。例如，当一扇门上面标识着“PUSH”但实际上需要去拉动时，在现实生活中有多烦人？</p><p>当然这不是绝对的，有时候，一些游戏可能会需要设计者与玩家解除这种<strong>“信任连接”</strong>。例如在生存恐怖游戏中，破坏周围的<strong>Affordances</strong>是减轻压力和使玩家承受压力的好方法。即使这样也有着一定的风险，并可能最终激怒一些玩家。</p><h2 id="2-引导线"><a href="#2-引导线" class="headerlink" title="2. 引导线"></a>2. 引导线</h2><p><strong>引导线（Leading lines）</strong>是一种有助于将玩家的视线引导到特定位置或事件的技术。</p><p>这些<strong>Leading lines</strong>通常是通过建筑元素的排列和位置形成的，它可以巧妙地引导玩家的<strong>视线，移动和注意力</strong>，而无需其他明显的文字提示。引导线的范围可以从天花板上的管道，树篱行或地板和墙壁上的不同纹理。这些方向性元素增强了互连空间的流动性，它们利用物理世界的属性有效地将玩家引导到了设计师想要它们去的地方。这些应与照明和其他技术结合使用。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/direction_lines.jpg" alt="Leading lines"></p><h2 id="3-利用架构来塑造游戏空间"><a href="#3-利用架构来塑造游戏空间" class="headerlink" title="3. 利用架构来塑造游戏空间"></a>3. 利用架构来塑造游戏空间</h2><p>设计者应该始终关注现实生活空间以及它们的体系结构如何转换为关卡设计。几百年来，建筑师与关卡设计师一直在做同样的事情，因此了解建筑元素是有意义的。</p><p>应该使用建筑元素来塑造关卡设计。结构组件是用于组织和塑造空间的工具。在用板条箱作为障碍之前，请考虑一下您的体系结构可以做什么。与其将板条箱放置在开放区域中，不如放置也可以用作掩体的柱子，设计者要创造一个更可信、合理的空间。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E6%8E%A9%E4%BD%93.jpg" alt="游戏中柱子掩体"></p><p>通过查看现实生活中的空间，您可以找到使用直观的建筑元素创建更可信的关卡的方法。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E6%9F%B1%E5%AD%90.jpg" alt="现实中柱子掩体"></p><h2 id="4-教学机制"><a href="#4-教学机制" class="headerlink" title="4. 教学机制"></a>4. 教学机制</h2><p>关卡设计的工作之一是给玩家介绍，调整节奏并教导游戏的基本操作。</p><p>作为游戏的设计师，您会非常了解自己的游戏机制，所以对于您来说，这意味着挑战很容易。而对于大部分玩家来说，尤其是新玩家，必要的机械教学是他们是否能够继续玩下去的基础。例如类似《守望先锋》等射击类型游戏，新手教学一般都是以<strong>方向移动</strong>→<strong>定点目标射击</strong>→<strong>移动目标射击</strong>→<strong>特殊技能使用</strong>→<strong>AI实战模拟</strong>的流程去引导玩家。</p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E6%95%99%E5%AD%A6%E6%9C%BA%E5%88%B6.png" alt="守望先锋" style="zoom:67%;" /><p>当然，教学机制是循循渐进的，设计者不能在一开始就以最高难度的级别去指导玩家，通常以<strong>简单</strong>→<strong>一般</strong>→<strong>困难</strong></p><p>的层次去区分教学机制。</p><p><strong>注意</strong>：新手教学一定要避免大量文字叙述，甚至完全文字叙述，这会极大削弱新玩家对于游戏的热情，通常我们以<strong>实际操作</strong>+<strong>旁白语音</strong>+<strong>极简文字显示</strong>的方式去建立新手教学。另外，对于一些本身操作复杂的游戏，我们除了必要基础教学外，可以在设置栏上附加操作说明（通常以图片+文字叙述）以方便玩家在游戏过程中随时查看。</p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E6%8E%A7%E5%88%B6%E8%AF%B4%E6%98%8E.jpg" alt="控制说明" style="zoom:67%;" /><h2 id="5-拒绝和奖励策略"><a href="#5-拒绝和奖励策略" class="headerlink" title="5. 拒绝和奖励策略"></a>5. 拒绝和奖励策略</h2><p>拒绝和奖励策略是一种建筑技术，主要用于丰富人在建筑环境中的通道。建筑师通过向人们提供其目标的视图，然后暂时从视线中对其进行筛选来做到这一点。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E5%BB%BA%E7%AD%91.jpg"></p><p>我们可以将相同的技术用于关卡设计中的进度，以增强玩家的进度感。让玩家先看到他们的目标，然后引导他们到不再能看到它的路线上，接着再以新的可视角度使他们靠近目标。</p><p>下图显示了如何使用拒绝和奖励策略来开始关卡。玩家首先可以清楚地看到目标，但直达路径被阻塞（无法通过），同时被赋予了通往目标的替代路线（即引导玩家进入这个路线以接近目标）。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E8%A7%86%E8%A7%921.jpg" alt="远视角"></p><p>而到了下图，通过之前的代替路径后，玩家又拥有一个新的可视角度，这次目标建筑距离玩家更近，而更近的目标将使他们获得真正的进步感。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E8%A7%86%E8%A7%922.jpg" alt="近视角"></p><p>在《The Last Of Us》的一个章节中，设计者运用了拒绝和奖励策略：先让玩家瞥见黄色桥梁（它们的目标位置），然后暂时看不见它，最后直到它重新出现为止。这样的游戏策略激起玩家前进的动力，使玩家的旅途更加有趣。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E6%B8%B8%E6%88%8F%E8%A7%86%E8%A7%92.jpg" alt="The Last Of Us"></p><h2 id="6-提供一个良好的起点"><a href="#6-提供一个良好的起点" class="headerlink" title="6. 提供一个良好的起点"></a>6. 提供一个良好的起点</h2><p>玩家如何到达某个区域将影响他们的第一步。在起点，让玩家面对正确的方向，并确保他们的开始位置可以为他们提供<strong>视觉提示</strong>和<strong>选择方式</strong>。</p><p>下图为《神秘海域4》中的截图，它演示了如何通过让玩家清楚地了解前方的<strong>道路</strong>，<strong>引导线</strong>和周围环境的<strong>架构</strong>，来清晰地了解目标位置以及玩家可以看到开口和其他位置，从而提高玩家的起始位置<strong>选项</strong>。该示例使用了多种技术，但关键是要了解所有这些方法如何与起始位置结合使用，方便玩家清楚地了解自己的工作。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E8%89%AF%E5%A5%BD%E7%9A%84%E8%B5%B7%E7%82%B9.jpg"></p><p>有时这种技巧也可能会改变。 例如，玩家的路径或出口可以位于他们的后面或上方，但只要玩家对此有清晰的信息，就可以鼓励地图探索和发现，从而创造出非常有益的体验。</p><h2 id="7-边界设计"><a href="#7-边界设计" class="headerlink" title="7. 边界设计"></a>7. 边界设计</h2><p>边界是一种显示玩家在区域之间转换时的方式。边界有两种类型：<strong>实心边界（solid boundaries）</strong>和<strong>软边界（soft boundaries）</strong>。</p><h3 id="1-实心边界"><a href="#1-实心边界" class="headerlink" title="(1) 实心边界"></a>(1) 实心边界</h3><p>实心边界可用于标记出意外或敌方活动的区域。设计者不希望玩家知道里面的东西，而是希望他们清楚地了解他们正在改变位置。这样一来，您就可以为该地区的许多敌人创造一种惊喜和不确定性的元素。这是在开放世界游戏的关卡设计中将玩家引导到特定入口点的一种极好的方法，因此设计者可以创建更多脚本化的序列。</p><p>例如，下图清楚地表明了，玩家面前的边界后面是敌人区域。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E5%AE%9E%E5%BF%83%E8%BE%B9%E7%95%8C.jpg" alt="实心边界"></p><h3 id="2-软边界"><a href="#2-软边界" class="headerlink" title="(2) 软边界"></a>(2) 软边界</h3><p>软边界与实心边界正好相反，设计者希望玩家能够看到边界里面的东西，并将玩家吸引到该区域。如下图《和平精英》中的围墙、栅栏、铁丝网等都属于软边界。</p><img src="https://github.com/JianxiangGao/hexo_blog_img/blob/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E8%BD%AF%E8%BE%B9%E7%95%8C.png?raw=true" style="zoom: 67%;" /><h2 id="8-面包屑导航"><a href="#8-面包屑导航" class="headerlink" title="8. 面包屑导航"></a>8. 面包屑导航</h2><p><strong>面包屑导航（Breadcrumb）</strong>是一种导航辅助，其通常被用于网页设计，是用户在程序或文件中确定和转移他们位置的一种方法。在游戏设计中，我们也通常运用这种方法。</p><p>面包屑导航可以有很多不同的形式，可以通过设计地面上的不同质地，来吸引玩家朝特定路径上前进。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E9%9D%A2%E5%8C%85%E5%B1%911.jpg"></p><p>或者，沿着小路利用金币或其他道具点缀，来使玩家重回正轨。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/%E9%9D%A2%E5%8C%85%E5%B1%912.jpg"></p><h2 id="9-照明"><a href="#9-照明" class="headerlink" title="9. 照明"></a>9. 照明</h2><p>有效利用照明可以将玩家的注意力引向空间内的某个位置。正如下图所示，聚光灯经常在黑暗的环境中被使用，以引导玩家的视线转向感兴趣的区域，玩家可以看到入口/出口、敌人位置。在这种情况下，光线会增强门作为当前场景中最重要的对象，从而提高了玩家对它背后可能存在的期望。</p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E7%9A%8410%E4%B8%AA%E6%8A%80%E5%B7%A7/lighting_direct_attention.jpg" style="zoom: 80%;" /><h2 id="10-迭代测试"><a href="#10-迭代测试" class="headerlink" title="10. 迭代测试"></a>10. 迭代测试</h2><p>当我们设计完游戏关卡，想要使我们的游戏达到良好水平，就需要持续迭代的测试。通过初始的游戏测试，设计者将发现问题，找到解决方案并开始提高自己的水平。</p><p>别害怕让人们玩我们设计的游戏，毕竟这就是我们创造游戏的原因！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上整理的的10个关卡设计技巧，只能作为游戏设计的参考，而不是游戏设计的规则，后续我也会继续分享详细的关卡设计技巧。</p>]]></content>
      
      
      <categories>
          
          <category> 个人向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Level Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深谈游戏行业现状</title>
      <link href="2021/04/22/shen-tan-you-xi-xing-ye-xian-zhuang/"/>
      <url>2021/04/22/shen-tan-you-xi-xing-ye-xian-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章包含了玩家角度的主观感受、部分游戏开发商的发家史、部分论文的引用、还有对游戏行业盈利模式的分析等等，内容涉及的领域很多很杂，文章也很长，所以请慢慢阅读。</p><p>由于我是一名探索型玩家（后文会细说），因此叙事角度可能带有个人主观色彩，假如与您的理解方向有差别，也欢迎在评论区提出问题共同探讨。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ul><li>米哈游新作《原神》于2020年9月28日全平台公测，虽然曾有许多谩骂声，但多次在多个国家流水登顶，至今也是争议不断，而且米哈游公布了一个大计划——“十年内打造十亿人愿意生活在其中的虚拟世界”。</li></ul><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/%E5%8E%9F%E7%A5%9E.jpg" alt="原神" style="zoom:67%;" /><ul><li>2020年12月10日，历经多次跳票后，波兰公司CD Projekt Red制作的《赛博朋克2077》正式发售，可随之而来的确实重大滑铁卢。</li></ul><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/Cyberpunk%202077.jpg" alt="赛博朋克2077" style="zoom:67%;" /><ul><li>2021年2月10日，育碧宣布转型，未来不再让3A游戏成为其商业模式的重心，并表示新模式为：“3A游戏之外还有各个平台上的、新的优质和免费的创新体验。这些多样化的体验将通过互补的玩法和商业模式彼此滋养。”</li></ul><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/Ubisoft.jpg" alt="育碧" style="zoom:67%;" /><ul><li>2021年2月26日，宝可梦25周年新作发布会正式举行，结果《珍珠/钻石》重制版让2021年的顶级IP大作遭到巨大非议。</li></ul><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/%E9%92%BB%E7%9F%B3%E7%8F%8D%E7%8F%A0%E5%A4%8D%E5%88%BB.png" alt="珍珠钻石复刻" style="zoom:67%;" /><p>我不禁开始思考，为什么游戏行业出现了这些现象？</p><h2 id="1-乌托邦游戏畅想"><a href="#1-乌托邦游戏畅想" class="headerlink" title="1. 乌托邦游戏畅想"></a>1. 乌托邦游戏畅想</h2><p>首先，我要提及一个网游小说作家<strong>失落叶</strong>，其笔下的网游三部曲（《网游之盗版神话》，《网游之纵横天下》，《网游之天下无双》）是我第一次接触的网游类型小说，虽然并不是网游题材的创始人，但其作品内容是非常出色的。</p><p>为什么要提到网游小说呢？因为，大部分的网游类型小说讲述的都是在未来，虚拟游戏已经融入到现实世界中了，就类似于电影《头号玩家》，人们只需要通过游戏头盔等介质就能前往拥有超真实感官的虚拟世界，这也就是米哈游公司说的”十年大计划“。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/Ready%20Player%20One.gif"></p><p>所以，无论是小说还是电影，都似乎告诉了我们游戏这个行业随着科技的发展，<strong>未来一定会出现一款让全世界玩家都聚集在一起的虚拟游戏，休闲玩家可以进去选取生活职业去赚钱，技术玩家可以打各种BOSS、PK，大佬们则花钱组建工会，在游戏里打工会战，甚至国战。</strong></p><p>要是真有这种游戏出来会很震撼，很振奋人心不是嘛！可是，这也仅仅是一种<strong>乌托邦式的畅想</strong>，在说原因之前，我先介绍一下游戏玩家的类型。</p><h2 id="2-玩家类型"><a href="#2-玩家类型" class="headerlink" title="2. 玩家类型"></a>2. 玩家类型</h2><p>在游戏设计中有一个著名的理论，那就是<strong>Richard Bartle</strong>在1996年提出并发表的一篇名为<a href="https://d1wqtxts1xzle7.cloudfront.net/53430882/HEARTS_CLUBS_DIAMONDS_SPADES_PLAYERS_WHO20170608-3157-1rebd1m.pdf?1496907752=&response-content-disposition=inline;+filename=Hearts_Clubs_Diamonds_Spades_Players_Who.pdf&Expires=1619129685&Signature=Puc8aacwYxZhfqmRGqGLmd1Uru5G0Apo0s6WyOhM3m5DouotPfwcAnZwiTevUbpEvAKFH0y8vF04qrNEJxB17-xlHYYgI8hBNJo9jLkAEmW1hy2YJbsjhrBr2Y6uc5ZpJPSntPE04Rnb53ZAC6HQ731IjMws2SEKQt6YA28tQd1CLfuPzXvddfnpfla8~Xs1dHtXFKPBtC5aRbRz0GXVIT6wi5G4kUL2hQKb-nvdP0jZ517HLxCQsIfYkXUg1QVukRzbcpKGYsf8CuwwXrLdB2dmVYJ~7J6SkEztpxp8CdyGGJBB69gnNWxffn~s9~xc3aCOh2MzM34BUxg1-Rg2KQ__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA">”Hearts,Clubs, Diamonds, Spades: Players Who Suit MUDs“</a>的文章，其中<strong>Bartle</strong>将所有的玩家分成了4类，并且这4种玩家分别对应扑克牌里的一种花色，分别是：<strong>成就型（Achievers）</strong>，<strong>探索型（Explorers）</strong>，<strong>社交型（Socializers）</strong>和<strong>杀手型（Killers）</strong>。</p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/%E7%8E%A9%E5%AE%B6%E7%B1%BB%E5%9E%8B.jpg" alt="玩家类型" style="zoom: 50%;" /><h3 id="1-成就型（Achievers）"><a href="#1-成就型（Achievers）" class="headerlink" title="(1) 成就型（Achievers）"></a>(1) 成就型（Achievers）</h3><p>成就型玩家，即追求取胜或是达成某些目标为偏好的玩家，<strong>注意</strong>，是偏好，并不是说成就型玩家就不社交不探索了，而是他们偏好去完成一些挑战，说个最简单的例子，追求极速通关的玩家，大多数就是成就型玩家。在黑魂里，要达成无伤怼boss，几小时通关，只用小木棍；又或是微信跳一跳里想达到1000分，这种都属于成就型玩家所追求的；再比如重度成就型玩家会沉迷于戴森球计划、都市天际线或模拟人生等游戏。</p><p>可以说大部分纯单机玩家都属于成就者类型，他们自豪的是他们游戏里的各种等级体系的完成度，以及他们能够花多短的时间去达到这些等级。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/%E9%A9%AC%E9%87%8C%E5%A5%A5.jpg" alt="马里奥"></p><h3 id="2-探索型（Explorers）"><a href="#2-探索型（Explorers）" class="headerlink" title="(2) 探索型（Explorers）"></a>(2) 探索型（Explorers）</h3><p>探索型玩家，就是那些喜欢探索游戏里的整一片天地，喜欢把自己代入到游戏中，他们享受着探索，一步步尝试着这款游戏里的所有道具，即便是喝下刚炼成的毒药。他们可以把一款游戏里所有东西都拔出来，就算是隐藏的再深的道具也能被他们找到。Minecraft，泰拉瑞亚等沙盒游戏吸引了很多探索型玩家，又或是喜欢分析黑魂、血源这种不讲清楚剧情，而是把线索放在道具里的游戏的剧情的玩家们，这便是探索型玩家。</p><blockquote><p>我就是一个典型的探索型玩家，我最喜欢的一款游戏是《上古卷轴5：天际》，在这个游戏中我喜欢探索每一处城镇中的酒馆，因为中世纪音乐是真的好听；我喜欢做许多支线任务，因为有时候可以惊喜地了解到一个任务事件背后的原因，甚至与这个游戏的大背景息息相关；在加了mod后，我可以每次选择一个不同势力开局，无论是雪漫、暴徒、东堡法师我都沉浸式体验过不同的人生。讲真的，对于天际的泰姆瑞尔大陆历史，我初高中的历史课都没这么认真过。</p></blockquote><p>如果一个游戏在后期玩法重复了，那么探索型玩家就很快会对这个游戏感到厌倦。探索型玩家自豪的是他们的广闻博见，特别是如果新手们把他们看作一切智慧的源泉。</p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/The%20Elder%20Scrolls%20V.jpg" alt="上古卷轴5：天际" style="zoom:67%;" /><h3 id="3-社交型（Socializers）"><a href="#3-社交型（Socializers）" class="headerlink" title="(3) 社交型（Socializers）"></a>(3) 社交型（Socializers）</h3><p>社交型玩家，对于他们而言，游戏只是社交的一个载体，许多MMORPG中，享受活跃于公会的玩家就是社交型玩家，他们可以把游戏玩成第二个社会，也可以通过游戏去认识更多人，即使一个游戏玩家互动成分很低，社交型玩家也会加各种游戏交流群。但同时这类玩家也被少数其他玩家抨击，因为确实有些社交型玩家就是哪个火了玩那个，好不好玩不要紧，社交型玩家认为跟人打交道才有意思。社交型玩家自豪的是他们的友情，以及他们相互之间的接触与影响。</p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/%E9%AD%94%E5%85%BD%E5%89%AF%E6%9C%AC.jpg" alt="魔兽副本" style="zoom:67%;" /><h3 id="4-杀手型（Killers）"><a href="#4-杀手型（Killers）" class="headerlink" title="(4) 杀手型（Killers）"></a>(4) 杀手型（Killers）</h3><p>杀手型玩家，他们享受游戏内的杀戮与竞争。这类玩家喜欢厮杀，大乱斗，团队死斗，剧情、奖杯、公会都不重要，对于他们，增加角色战斗力，以便于杀更多的敌人，才是他们看重的。有很多射击游戏和格斗游戏深深的吸引了这类玩家。除了成就型玩家之外，杀手型玩家似乎被所有人讨厌。杀手型玩家自豪的是他们的名誉以及别人对自己战斗技能的评价。</p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/%E5%90%83%E9%B8%A1.jpg" alt="绝地求生" style="zoom:67%;" /><p>作为游戏的系统设计师，根本想不出一种方案同时满足四种类型玩家。</p><ul><li><p>假如你是一名杀手型玩家，那你肯定会去找人PK，但是如何提升战斗力？没钱氪金买顶级装备的话，你就需要去做无止境的枯燥且重复的任务，收集各种材料去打造装备。而这种情况就会与你玩家类型冲突，喜欢PK的你却陷入了无止境的数值提升中，最后你会觉得这游戏真麻烦，不玩了！</p></li><li><p>假如你是一名成就型玩家，喜欢在游戏里种田、开商店、钓鱼挖矿等，游戏内PVP机制注定了这个游戏的价值观为谁战斗力最强，谁nb，战斗力高的大佬们的成就感明显要强于种田类型玩家，那作为一名成就型玩家，再去钓鱼种田，图啥呢？可能图的是通过种田、钓鱼、挖矿等玩法去获取资源，再把这些游戏内资源转换成现实中的金钱，也就是所谓的”搬砖党“，那这个游戏和打工就几乎没有区别了，更别谈成就感了。很多MMORPG游戏的发展，都是有这个趋势：一开始设计一堆花里胡哨的副业，看起来玩法很丰富，可随着游戏进度的推进，这些东西都成为了摆设。</p></li></ul><p>不可能让一个游戏包容所有玩家，即使强行容纳所有玩家，也必然会有某一种最优策略去挤压其他玩家的生存空间，所以上文我所描绘的乌托邦未来游戏不可能实现，我认为<strong>未来的游戏发展趋势是越来越类型化，越来越细分</strong>。</p><h2 id="3-谈谈《赛博朋克2077》"><a href="#3-谈谈《赛博朋克2077》" class="headerlink" title="3. 谈谈《赛博朋克2077》"></a>3. 谈谈《赛博朋克2077》</h2><p>那么有没有一种类型的游戏，可以包容下很多类型的玩家呢？</p><p>有的，沉浸式的单人游戏，特别是角色扮演游戏，就可以做到包容大部分类型的玩家。有人玩《荒野大镖客：救赎2》一路做任务，有人则一路赌博、打猎；有人玩《上古卷轴5：天际》一路捡垃圾，有人则一直研究怎么输出最高；有人玩《塞尔达传说：荒野之息》追求速通打法，有人则到处探险、看风景。只要一款游戏交互系统足够丰富，那么各种各样的玩家都能满足，以上举例的3款游戏都是非常成功的开放世界单机游戏。</p><p>那么现在说一下不成功的《赛博朋克2077》，这款游戏一经发售，口碑就一直差强人意，因为按照官方宣传，这应该是一款交互系统十分nice的开放游戏，玩家应该可以自己选择身份：比如夜之城的居民，搞个副业捡捡垃圾啥的。可是游戏一发售，细节之处真的很糟糕，随便一个小吃店，除了贴图不同外，很多AI人物都无法交流，完全没有任何交互！还有大量的俱乐部、酒吧等娱乐场所只是做了一个场景出来，NPC在里面玩的很high，可玩家却只能进去转转。最可恨的是BUG太多了，已经超出了正常玩家能忍受的程度，可以说完全毁掉了游戏体验。</p><p>但是，我并不会说这个游戏是个垃圾游戏，我只是感到很可惜，因为这款游戏的框架非常强大、也非常nice，比如游戏内的夜之城，这个城市的场景规划是真心的好。目前开放世界游戏的三大天花板：《上古卷轴5：天际》、《塞尔达传说：荒野之息》、《荒野大镖客：救赎2》，这三者的城镇和村落与《赛博朋克2077》比起来，只能算一个个中型或大型据点，而且以城市为背景的游戏《看门狗》系列、《GTA》系列，单从城市设计这方面来说，也无法抗衡《2077》。</p><p>而且《赛博朋克2077》游戏是第一人称视角，开发者的初衷就是想让玩家有更好的沉浸式体验。但是，真是可惜了这么好的游戏底子，游戏最后实在差强人意。</p><p>为什么失败了呢，首先我认为CD Projekt Red选择了一个在现代游戏工业体系下不可能完成的宏大目标，他们初衷是像一次性来个大的，做一个颠覆游戏行业的游戏，想在游戏史的发展历程上建造一座丰碑。他们为这个梦想孤注一掷，可惜，失败了。并且，为此他们承担了后果：被PSN下架、道歉退款、股价暴跌，最重要一点是以往积攒下来的声誉和口碑几乎被颠覆了。</p><h3 id="1-回顾CDPR的发家之路"><a href="#1-回顾CDPR的发家之路" class="headerlink" title="(1) 回顾CDPR的发家之路"></a>(1) 回顾CDPR的发家之路</h3><p>我们很惊奇的发现，CD Projekt Red的发家之路其实就是一个“赌徒”之路。</p><ul><li>1994年，公司成立，主要是卖盗版游戏CD光碟，这也是为啥公司叫CD Projekt，哈哈哈。之所以倒卖盗版游戏，是因为当时波兰穷，一个正版游戏70美刀，完全买不起。</li><li>随着卖盗版CD逐渐做大，开始卖一小部分正版游戏，比如《博德之门》的波兰代理权。</li></ul><blockquote><p>当时是游戏三大巨头争雄的年代：任天堂、索尼、微软。大家都在玩PS2、XBOX，这些游戏机不仅售价比电脑便宜，玩游戏的性能也超过电脑。而当时国内与波兰都在玩PC端。</p></blockquote><ul><li>可是《博德之门》的续作只支持PS2平台，CDPR拿下了代理却在波兰卖不出去，因此他们开始了游戏平台的移植，将PS2游戏移植到PC端。</li><li>移植过程中，CDPR不断积累了大量的游戏开发经验。于是开始第一次”赌博“——自己开发一款《巫师》的PC端游戏，开发团队15人，开发资金来自卖盗版CD的钱。</li><li>在《博德之门》代理商提供的技术支持下，CDPR成功做出《巫师》demo，并以此获得投资。</li><li>经过5年开发，2007年，《巫师1》诞生，在那个游戏机横行的年代，这款以剧情为导向的RPG大作大卖200万份。</li><li>随之，CDPR拿着全部《巫师1》赚的钱继续第二场”赌博“——《巫师2》，可是过程中被合作的外包公司坑了，单方面撕毁合约不给投资。所幸，CDPR的创始人在金融市场上一顿操作，才搞到了一笔投资。</li><li>2011年，《巫师2》诞生。</li></ul><blockquote><p>《巫师2》的厉害之处在于它采用了两条剧情线，选了一条后，玩家对另一条剧情是完全不知情的，因此可以将这个游戏毫无重复感得通关2次。并且结局分支十分复杂，游戏脚本量巨大。最重要的是，《巫师2》的所有DLC全部免费，并且取消防盗版措施。因此《巫师2》横扫当年各大奖项，销量达到600万份，口碑销量双丰收，不过可惜同年也诞生了《上古卷轴5》，没能夺得年度最佳游戏。</p></blockquote><ul><li>不过，《巫师1》、《巫师2》都是关卡类型游戏：做完这个关卡内任务，才能继续下一关卡剧情。因此，继章节式游戏，CDPR准备进军游戏行业最难的类型——开放世界。</li><li>于是，CDPR继续第三场”赌博“，倾注所有《巫师2》赚取的钱去开发《巫师3》。</li><li>2014年，《巫师3》发售，16个DLC全部免费，仍取消防盗版措施。</li><li>2015年，《巫师3》斩获年度最佳游戏，得票257票，第二名才58票。</li><li>2016年，凭借新DLC《血与酒》力压《黑暗之魂3》，拿到年度最佳RPG游戏。</li><li>从此，CDPR这家波兰游戏公司进入了游戏节T0梯队。</li><li>如今，他们已经进行了第四场”赌博“——《赛博朋克2077》，可惜”失败“了。</li></ul><h3 id="2-盈利-or-销量？"><a href="#2-盈利-or-销量？" class="headerlink" title="(2) 盈利 or 销量？"></a>(2) 盈利 or 销量？</h3><p>我们都知道，《赛博朋克2077》跳票了好几次，而一些眼尖的人从CDPR最近几季财务报表中分析出，CDPR公司没钱了，也就是说这次不能再跳票了，已经没有游戏开发资金了。《赛博朋克2077》这款游戏做了5年，但是其完成度，我个人认为完成度连50%都没有达到，假如再跳票3、4年，做一个完全体的《赛博朋克2077》，可能还要增加2亿美元左右的开发成本。到时候这款游戏还能赚钱嘛？没人说得清楚，保本也不行，因为CDPR需要盈利才能赚取到开发下一款游戏的资金。</p><p>CDPR之所以取消防盗版措施，看似是放弃抵抗让玩家们白嫖他们的游戏，其实反而巩固了他们的文化输出地位，因为当一些国家的经济水平发展起来后，人们的正版意识建立起来，自然会跑来支持你，跑来补票。</p><p>这几年，steam在中国盛行，可是看看5年前，steam上带简体中文的游戏屈指可数，而现在上面不带简体中文的游戏才是奇葩，这说明一个问题：<strong>游戏行业太需要新鲜血液了，来来回回贡献销量的就那么一批人，现在中国玩家正版意识崛起，庞大的中国市场得到了众多游戏行业开发商的重视。</strong></p><blockquote><p>中国现在经济发展迅速，人们逐渐有了正版意识，盗版现象较于以前真的削弱了太多了。</p></blockquote><p>对于盗版问题，游戏开发商其实是无能为力的，因为他们也不能跨国执法，但是CDPR放任别人玩盗版，这相当于开拓了一个起码几十亿以上人口的潜在市场，假如这个策略成功了，无数低收入国家和人群天天受到他们游戏的熏陶，他们在游戏界的地位可能就无法撼动了，因为他们的潜在受众被硬生生扩大了一圈，届时他们的IP影响力将无人能敌。</p><ul><li><p>《GTA5》销量破亿，跨越了三个PS世代，最重要的是它有线上模式，如果没有GTAOL，《GTA5》销量会腰斩。</p></li><li><p>R星的《荒野大镖客：救赎2》研发费用是8亿美元，是《赛博朋克2077》的多少倍？！为什么他们能投资这么多钱，因为有线上模式。</p></li><li><p>而任天堂的盈利模式一直是软件、硬件相辅相成，比如NS发售的时候，基本没有什么游戏，全靠《塞尔达传说：荒野之息》热卖，当然任天堂还有各种会员订阅、amiibo等等，但这些都是暴利。</p></li></ul><p>以上3种介绍是想说明一个问题，假如CDPR不计成本的开发，做一个完全体的单机版《2077》，必然是赚不到钱的，这也侧面说明了：在游戏开发成本日益上涨的今天，如果还是按照现在60美元的定价来出售游戏，游戏界就不可能诞生CDPR和所有玩家当时设想的完全体、沉浸式单机版《2077》。</p><p><strong>有人可能会说：游戏涨价不就好了吗？</strong></p><p>首先，30年前游戏的当时售价就是60美元（比如《马里奥》），如今加上通货膨胀、游戏开发成本膨胀，30年前一款游戏开发成本100万美元，现如今动不动就是1亿美元，开发成本翻了100倍，游戏售价怎么翻？也100倍=6000美元？下面给大家看一下，目前全球游戏销量前十的榜单（数据来自<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E6%B8%B8%E6%88%8F%E9%94%80%E9%87%8F%E6%8E%92%E8%A1%8C%E5%88%97%E8%A1%A8">Wikipedia</a>）：</p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E8%B0%88%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E7%8E%B0%E7%8A%B6/%E6%B8%B8%E6%88%8F%E9%94%80%E9%87%8F%E5%89%8D%E5%8D%81.png" alt="游戏销量前十" style="zoom:67%;" /><p>从中能看出，第1、3、5、6、7、8、10名都是联机游戏，而沉浸式单人游戏根本就卖不出很多，<strong>单人游戏的上限就是3000万</strong>，其中二手转卖交易很大程度上限制了单机游戏的售价，以及销量。</p><p>说回文章最开始所说的——宝可梦复刻之作遭到网友非议，由于Game Freak的营销策略一直就是一年新作一年复刻老作的模式，每年都会以60美元售价稳定卖出1000-2000万份赚得10亿美元，<strong>那么假如你是Game Freak的人，你会选择重复每年稳定赚10亿，还是选择花费几个亿美元开发5-6年去赌新游戏能卖到4000万销量以上呢？</strong></p><p>答案显而易见，傻子才去赌。</p><p>全球游戏销量前十榜单，可以得出<strong>财富密码 = 联机</strong>，只要有着联机功能的游戏，其销量必然会高。既然如此，我们可不可以开发一款有着联网功能的类网游，且玩法还无所不包的完美游戏呢？不能，之前我说过了，玩家类型的独特性注定了这种游戏中某类玩家的游戏策略挤压其他玩家的生存空间。</p><h2 id="4-谈谈《原神》"><a href="#4-谈谈《原神》" class="headerlink" title="4. 谈谈《原神》"></a>4. 谈谈《原神》</h2><p>现在一看，《原神》这款游戏不得了！</p><p>首先它是一个开放世界的单人游戏，而且还能联机，最重要的是免费玩（指的是非买断制），这进一步扩大了玩家圈层，游戏内还有极其吸金的氪金系统。所以，这款游戏把网游和单机的尴尬之处全部避开了，难道这就是未来游戏行业的发展方向吗？</p><p>我本人也玩了这款游戏，这里做个简单的个人主观评价：</p><ul><li>从整体的游戏游玩来看，完全媲美传统的3A游戏。</li><li>游戏除了PC端外，可以在手机等移动端正常运行，技术方面也是过关的。</li><li>游戏的<strong>地图设计</strong>与<strong>关卡设计</strong>，绝对不输于世界上任何一款一流大作。</li><li>对于游戏内的抽卡模式，我是持批判态度的。</li></ul><p>而且你会发现，这款游戏在国外游戏圈内也非常火爆，一向对游戏很挑剔的他们之所以热衷于《原神》，是因为他们已经玩过太多60美元买断制的单机游戏了，突然出现一款免费开玩的3A质量游戏，他们都觉得很新鲜。</p><p>但是，《原神》就代表了未来游戏的发展方向吗？</p><p>我觉得不能，因为<strong>作为一款长久运营的游戏，即便它的大部分玩法是纯单机的，但是它必须保证所有人的游戏路径是一模一样的，否则每个玩家资源和利益分配就不一样了，这就很容易出问题。</strong>换句话说，多结局无法做出来，网状叙事结构也做不出来，而这是所有<strong>非单人游戏</strong>共有的问题。而且，作为长久运营的游戏，剧情是否能够完结？假如完结了，那么代表这款游戏完结了，必然就不会运营下去了。而且，《原神》是可以在移动端玩的，那么为了照顾移动端玩家，游戏内的操作必然不会像大型3A大作一样做的很复杂。</p><p>总而言之，《原神》这款游戏质量是绝对没问题的，但是受到的限制太多，因此这种游戏必然不会取代传统单机游戏。</p><p>买断制游戏界目前太缺乏新生的消费力量，CDPR公司通过让更多人免费白嫖盗版游戏以增强IP影响力，并拓展用户边界；同样，米哈游的《原神》也是通过让更多人可以在移动端免费体验3A水准游戏，也是在拓展用户边界，最终通过氪金系统来营收。</p><h2 id="5-谈谈育碧"><a href="#5-谈谈育碧" class="headerlink" title="5. 谈谈育碧"></a>5. 谈谈育碧</h2><p>那么现在说回育碧宣布转型，未来不再以3A游戏为其商业模式的重心，为什么，最大的原因就是看到《原神》成功了，所以才把工作重心转移到这上面来，逐渐将以前的3A游戏的技术沉淀到手游中。其实，早在米哈游《原神》出现之前，育碧就已经在做尝试了，比如最近的几款《刺客信条》都带有内购氪金模式，而现在《原神》的成功也让育碧下定了决心。</p><p>那么育碧这次转型是否会成功，我的答案是<strong>很大可能会的</strong>，因为育碧本身就做过不少手游，例如《刺客信条》手游、《魔法门之英雄无敌》系列，再加上育碧本身拥有着开发3A大作的技术水平，我觉得两者结合势必也会产生良好的反应。</p><p>所以，这就是《原神》游戏带来的世界影响：<strong>客观上提高了氪金游戏的制作成本</strong>，带动了更多大公司入局，要知道，游戏大公司的技术力真是一个比一个强，假如未来全力开发一款类似《原神》的游戏，我认为绝对会超越《原神》的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我认为，<strong>无论国内外，众多游戏大厂研发方向会逐渐偏向3A水准的氪金游戏，并以此为主要盈利手段</strong>，当然类似于《巫师3》等的单机游戏地位并不会被取代，因为不同的玩家类型注定了游戏界并不会一碗水端平，而是只能给每种玩家各端一碗水。</p>]]></content>
      
      
      <categories>
          
          <category> 个人向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Elasticsearch的电影搜索引擎设计(二)</title>
      <link href="2021/04/17/sou-suo-yin-qing-she-ji-er/"/>
      <url>2021/04/17/sou-suo-yin-qing-she-ji-er/</url>
      
        <content type="html"><![CDATA[<p>在第一部分中，我们从IMDB网站上搜刮了数据，并将其传入到Elasticsearch中。</p><p>在本文中，我们将构建搜索引擎前端，以及两种不同的检索模型，用于搜索电影数据。</p><h2 id="Tools-准备"><a href="#Tools-准备" class="headerlink" title="Tools 准备"></a>Tools 准备</h2><p>我们的Python Flask应用程序将成为我们的Web框架，并且我们将使用jinja模板来呈现html文件。</p><p>在PyCharm中创建新的项目，选择Flask (我使用的是Python3.8，Jinja2)。</p><h2 id="检索模型的构建"><a href="#检索模型的构建" class="headerlink" title="检索模型的构建"></a>检索模型的构建</h2><p>对于我们的<code>app.py</code>文件：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> Elasticsearch<span class="token punctuation">,</span> helpers<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token keyword">from</span> SearchForm <span class="token keyword">import</span> SearchTitleFormses <span class="token operator">=</span> Elasticsearch<span class="token punctuation">(</span><span class="token string">'http://localhost:9200'</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'my secret key'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># The function to capture the fields as a new index dataset</span>    <span class="token keyword">def</span> <span class="token function">gen_bm25_Data</span><span class="token punctuation">(</span>query_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> movie <span class="token keyword">in</span> query_list<span class="token punctuation">:</span>            name <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'movie_name'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            types <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'movie_type'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            score <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'movie_score'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            director <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'director'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            stars <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'stars'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            synopsis <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            bm25f <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'BM25F'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>            <span class="token keyword">yield</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"_index"</span><span class="token punctuation">:</span> <span class="token string">"bm25_dataset"</span><span class="token punctuation">,</span>                <span class="token string">"_source"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token string">"movie_name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>                    <span class="token string">"movie_type"</span><span class="token punctuation">:</span> types<span class="token punctuation">,</span>                    <span class="token string">"movie_score"</span><span class="token punctuation">:</span> score<span class="token punctuation">,</span>                    <span class="token string">"director"</span><span class="token punctuation">:</span> director<span class="token punctuation">,</span>                    <span class="token string">"stars"</span><span class="token punctuation">:</span> stars<span class="token punctuation">,</span>                    <span class="token string">"movie_synopsis"</span><span class="token punctuation">:</span> synopsis<span class="token punctuation">,</span>                    <span class="token string">"BM25F"</span><span class="token punctuation">:</span> bm25f<span class="token punctuation">,</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    form <span class="token operator">=</span> SearchTitleForms<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Search in BM25 model</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>bm25_search<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            q <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"We are looking for : "</span><span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token string">" In elastic search "</span><span class="token punctuation">)</span>            body <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>                <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token string">"multi_match"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token string">"query"</span><span class="token punctuation">:</span> q<span class="token punctuation">,</span>                        <span class="token string">"fields"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"movie_name"</span><span class="token punctuation">,</span> <span class="token string">"movie_type"</span><span class="token punctuation">,</span> <span class="token string">"movie_score"</span><span class="token punctuation">,</span> <span class="token string">"director"</span><span class="token punctuation">,</span> <span class="token string">"stars"</span><span class="token punctuation">,</span> <span class="token string">"movie_synopsis"</span><span class="token punctuation">]</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            query <span class="token operator">=</span> es<span class="token punctuation">.</span>search<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">'imdb_dataset'</span><span class="token punctuation">,</span> body<span class="token operator">=</span>body<span class="token punctuation">)</span>            results <span class="token operator">=</span> query<span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> movie <span class="token keyword">in</span> results<span class="token punctuation">:</span>                movie<span class="token punctuation">[</span><span class="token string">'_source'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'query_score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> movie<span class="token punctuation">[</span><span class="token string">'_score'</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'es_searchengine.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">,</span> response<span class="token operator">=</span>results<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Create a new dataset with the determined weight object and weight value</span>        <span class="token keyword">elif</span> form<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            select <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"select"</span><span class="token punctuation">]</span>            weight <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"weight"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            m_name_weight <span class="token operator">=</span> <span class="token boolean">False</span>            m_type_weight <span class="token operator">=</span> <span class="token boolean">False</span>            m_score_weight <span class="token operator">=</span> <span class="token boolean">False</span>            director_weight <span class="token operator">=</span> <span class="token boolean">False</span>            stars_weight <span class="token operator">=</span> <span class="token boolean">False</span>            m_synopsis_weight <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Title'</span><span class="token punctuation">:</span>                m_name_weight <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Type'</span><span class="token punctuation">:</span>                m_type_weight <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Score'</span><span class="token punctuation">:</span>                m_score_weight <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Director'</span><span class="token punctuation">:</span>                director_weight <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Actors'</span><span class="token punctuation">:</span>                stars_weight <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">'Synopsis'</span><span class="token punctuation">:</span>                m_synopsis_weight <span class="token operator">=</span> <span class="token boolean">True</span>            q <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"We are looking for : "</span><span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token string">" In elastic search "</span><span class="token punctuation">)</span>            body <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>                <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token string">"match_all"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            query <span class="token operator">=</span> es<span class="token punctuation">.</span>search<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">'imdb_dataset'</span><span class="token punctuation">,</span> body<span class="token operator">=</span>body<span class="token punctuation">,</span> sort<span class="token operator">=</span><span class="token string">"_score"</span><span class="token punctuation">)</span>            results <span class="token operator">=</span> query<span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span>            query_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> movie <span class="token keyword">in</span> results<span class="token punctuation">:</span>                query_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie<span class="token punctuation">[</span><span class="token string">'_source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> movie_source <span class="token keyword">in</span> query_list<span class="token punctuation">:</span>                bm25f <span class="token operator">=</span> <span class="token string">""</span>                <span class="token keyword">if</span> m_name_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                            <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_name'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                        <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_name'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">if</span> m_type_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                            <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_type'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                        <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_type'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">if</span> m_score_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                            <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_score'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_score'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                        <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_score'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_score'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">if</span> director_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                            <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'director'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'director'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'director'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'director'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">if</span> stars_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'stars'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'stars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'stars'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'stars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">if</span> m_synopsis_weight <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                            <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> str<span class="token punctuation">(</span>                        <span class="token string">'None'</span> <span class="token keyword">if</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None <span class="token keyword">else</span> movie_source<span class="token punctuation">[</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                length <span class="token operator">=</span> len<span class="token punctuation">(</span>bm25f<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>                        bm25f <span class="token operator">=</span> bm25f <span class="token operator">+</span> <span class="token string">' None'</span>                movie_source<span class="token punctuation">[</span><span class="token string">'BM25F'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bm25f            helpers<span class="token punctuation">.</span>bulk<span class="token punctuation">(</span>es<span class="token punctuation">,</span> gen_bm25_Data<span class="token punctuation">(</span>query_list<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'es_searchengine.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Search in BM25F model</span>        <span class="token keyword">elif</span> form<span class="token punctuation">.</span>bm25f_search<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            q <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span>            body2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>                <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token string">"match"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token string">"BM25F"</span><span class="token punctuation">:</span> q                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            query <span class="token operator">=</span> es<span class="token punctuation">.</span>search<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">"bm25_dataset"</span><span class="token punctuation">,</span> body<span class="token operator">=</span>body2<span class="token punctuation">,</span> sort<span class="token operator">=</span><span class="token string">"_score"</span><span class="token punctuation">)</span>            results <span class="token operator">=</span> query<span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hits'</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> bm25_movie <span class="token keyword">in</span> results<span class="token punctuation">:</span>                bm25_movie<span class="token punctuation">[</span><span class="token string">'_source'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'query_score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bm25_movie<span class="token punctuation">[</span><span class="token string">'_score'</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'es_searchengine.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">,</span> response<span class="token operator">=</span>results<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Clear the whole data in the new dataset</span>        <span class="token keyword">elif</span> form<span class="token punctuation">.</span>clear_all<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            <span class="token keyword">if</span> es<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">"bm25_dataset"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                es<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"bm25_dataset"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'es_searchengine.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'es_searchengine.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h4 id="BM25模型"><a href="#BM25模型" class="headerlink" title="BM25模型"></a>BM25模型</h4><p>该模型是Elasticsearch默认使用的，因此我们直接利用<code>multi_match</code>去查询<code>query</code>。</p><p>首先您需要了解BM25检索模型的打分方式，即对于所有documents的不同fields (即所有documents的title field、type field、director filed…)，分别进行打分得到一个分数，最后加在一起得到最后的query score (即BM25模型的最终分数)，下图可以方便您进行理解：</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EElasticsearch%E7%9A%84%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/BM25%E6%89%93%E5%88%86%E6%96%B9%E5%BC%8F.png" alt="BM25打分方式"></p><blockquote><p>假如你只想制作一个简易的搜索引擎，那么你可以直接忽略BM25F模型相关的代码</p></blockquote><h4 id="BM25F模型"><a href="#BM25F模型" class="headerlink" title="BM25F模型"></a>BM25F模型</h4><p>BM25F检索模型具有不同的打分方式，即我们将所有fields合成一个field，如下图的BM25F View所示即为我们需要打分的filed，因为每个电影的简介(<code>movie_synopsis</code>)字数不同，所以我们添加一定数量的None，以确保<code>movie_synopsis</code>中都含有100个字(超出100字的我们就不管了，因为不是很多)，这样做可以保证最后打分的公平性。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EElasticsearch%E7%9A%84%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/BM25F%E6%89%93%E5%88%86%E6%96%B9%E5%BC%8F.png" alt="BM25F打分方式"></p><hr><p>对于我们的<code>SearchForm.py</code>文件：</p><ul><li>为了在此搜索引擎中处理Web表单，我们使用Flask-WTF。</li><li>对于需要其他HTML属性的字段，可以将其作为参数传递。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> Form<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> SubmitField<span class="token punctuation">,</span> StringField<span class="token punctuation">,</span> SelectField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> DataRequired<span class="token keyword">class</span> <span class="token class-name">SearchTitleForms</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#对应页面的下拉栏</span>    select <span class="token operator">=</span> SelectField<span class="token punctuation">(</span>        <span class="token string">'select'</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        choices<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Title'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Type'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Score'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Director'</span><span class="token punctuation">,</span> <span class="token string">'director'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Actors'</span><span class="token punctuation">,</span> <span class="token string">'actors'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'Synopsis'</span><span class="token punctuation">,</span> <span class="token string">'synopsis'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#以下分别对应各个按钮</span>    weight <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">"Weight"</span><span class="token punctuation">)</span>    dataset <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">"Create Dataset"</span><span class="token punctuation">)</span>    clear_all <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">"Clear Dataset"</span><span class="token punctuation">)</span>    q <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">"Keyword"</span><span class="token punctuation">)</span>    bm25_search <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">"BM25 Search"</span><span class="token punctuation">)</span>    bm25f_search <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">"BM25F Search"</span><span class="token punctuation">)</span></code></pre><p>我们的搜索页面将被命名为<code>templates/layout.html</code>：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family<span class="token punctuation">=</span>Pacifico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://obj-cache.cloud.ruanbekker.com/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>ES Engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Movie Search Engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span>% block content %<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span>% endblock %<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>输入搜索查询后，我们将对<code>templates/es_searchengine.html</code>页面进行POST请求，该页面将包含一些逻辑，因为它将使用传递给它的数据，并通过for循环运行：</p><pre class=" language-html"><code class="language-html"><span class="token entity" title="&#123;">&amp;#123;</span>% extends "layout.html" %<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#123;">&amp;#123;</span>% block content %<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;&amp;#123; url_for(<span class="token punctuation">'</span>search<span class="token punctuation">'</span>) &amp;#125;&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>post</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.select <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.weight.label <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.weight <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.dataset <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.clear_all <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.q.label <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.q <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.bm25_search <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> form.bm25f_search <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Type<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Score<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Director<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Actors<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Synopsis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Query Score<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>BM25F View<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span>% for hit in response %<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['movie_name'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['movie_type'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['movie_score'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['director'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['stars'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['movie_synopsis'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['query_score'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> hit['_source']['BM25F'] <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span>% endfor %<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2021 Jianxiang Gao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span>% endblock %<span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h4 id="运行Python-Flask-Web应用程序："><a href="#运行Python-Flask-Web应用程序：" class="headerlink" title="运行Python Flask Web应用程序："></a>运行Python Flask Web应用程序：</h4><p>如果一切都按计划运行，则您应该能够运行您的<code>app.py</code>，它将在端口5000上侦听：</p><pre class=" language-python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span></code></pre><p>当您访问端口5000上的端点时，您应该能够看到电影搜索引擎的主页面，该页面应如下所示：</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EElasticsearch%E7%9A%84%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B8%BB%E9%A1%B5%E9%9D%A2.png" alt="搜索引擎主页面"></p><h4 id="BM25搜索"><a href="#BM25搜索" class="headerlink" title="BM25搜索"></a>BM25搜索</h4><p>输入任何<code>Keyword</code>，直接点击<code>BM25 Search</code>，可以得到下图所示结果：</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EElasticsearch%E7%9A%84%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/BM25%E6%90%9C%E7%B4%A2.png" alt="BM25搜索"></p><h4 id="BM25F搜索"><a href="#BM25F搜索" class="headerlink" title="BM25F搜索"></a>BM25F搜索</h4><ul><li>首先输入权重<code>Weight</code>，当<code>Weight=1</code>时，所有field的权重均相同且等于1，也可以设置一个特定field的权重(例：设置type权重为5，则其它fields默认为1)：</li></ul><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EElasticsearch%E7%9A%84%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E7%BD%AEtype%E6%9D%83%E9%87%8D%E4%B8%BA5.png" alt="设置type权重为5"></p><ul><li>点击<code>Create Dataset</code>后，我们可以去Kibana的Index管理界面看到下图所示(查看的方法可参考上一个博客)，成功新建了一个<code>bm25_dataset</code>：</li></ul><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EElasticsearch%E7%9A%84%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/Kibana%E6%96%B0dataset.png" alt="Kibana新dataset"></p><ul><li>输入任何<code>Keyword</code>，直接点击<code>BM25F Search</code>，可以得到下图所示结果：</li></ul><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EElasticsearch%E7%9A%84%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/BM25F%E6%90%9C%E7%B4%A2.png" alt="BM25F搜索"></p><ul><li><strong>注意</strong>：更换权重前，先点击<code>Clear Dataset</code>，然后再创建新的Dataset，否则dataset中的数据会叠加重复。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本项目是在学习完Information Retrieval课程后，为了充分理解并使用学过的内容，因此用Python调用Elasticsearch的API，并穿插使用了一下Kibana，最后用Flask实现了一个简单的电影搜索引擎。</p><p>其中，BM25F模型，参考了论文：<a href="https://dl.acm.org/doi/10.1145/1031171.1031181">Simple BM25 Extension to Multiple Weighted Fields</a></p><ul><li>索引&amp;检索模型：本设计直接使用了Elasticsearch中的内置的索引以及BM25检索方法，但是为了更好地理解，可以尝试不结合Elasticsearch，而直接用Python编写Index，各种检索model的方法，去实现搜索引擎。</li><li>Flask：我们的搜索引擎页面十分简洁，因为作者本人并没有学习过Flask相关用法，这些都是现学现卖而已，所以想美化页面的朋友们可以自行优化。另外，对于页面上手动<code>Create/Clear Dataset</code>，其实是可以去掉改成自动的，只需要在<code>app.py</code>文件中修改即可，只是为了更方便其他人对BM25F设计的逻辑进行理解。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目-信息检索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Information Retrieval </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Search Engine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Elasticsearch的电影搜索引擎设计(一)</title>
      <link href="2021/04/16/sou-suo-yin-qing-she-ji-yi/"/>
      <url>2021/04/16/sou-suo-yin-qing-she-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="Tools-准备"><a href="#Tools-准备" class="headerlink" title="Tools 准备"></a>Tools 准备</h2><p>PyCharm —— Flask实现搜索引擎的网页</p><p>Jupyter Notebook (或Colab) —— 编写部分ipynb文件</p><p>Elasticsearch —— 具有API的搜索引擎</p><p>Kibana (或Postman) —— 对于Elasticsearch的可视化工具</p><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>整体的项目结构如下图，可分为三个主要部分，而我会用两个博客去分别介绍：</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EElasticsearch%E7%9A%84%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/Architecture.png" alt="Architecture"></p><ul><li>数据爬取&amp;索引</li><li>检索模型的构建 (BM25 model，BM25F model)</li><li>Web page的搭建</li></ul><h2 id="数据爬取"><a href="#数据爬取" class="headerlink" title="数据爬取"></a>数据爬取</h2><h4 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h4><ul><li><p>在构建电影搜索引擎之前，必须收集电影相关数据。<a href="https://www.imdb.com/">www.imdb.com</a>是一个电影网站，其中包含按电影名称，导演，主演以及电影介绍等相关信息。</p></li><li><p>利用Jupyter Notebook编写一个web crawler来爬取2017-2021年共9990条数据。</p><p><strong>Note：</strong>别问我为啥是9990条，本来爬取了1w条，结果最后少了10条 (T_T)</p></li><li><p>由于电影的数据种类很多，我们就只爬取了电影名，类型，评分，导演，主演以及评论。对于原数据为空的，我们添加None。</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> google<span class="token punctuation">.</span>colab <span class="token keyword">import</span> drivedrive<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'/content/drive/'</span><span class="token punctuation">,</span> force_remount<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>movie_count <span class="token operator">=</span> <span class="token number">1</span>page_count <span class="token operator">=</span> <span class="token number">1</span>Max_page_number <span class="token operator">=</span> <span class="token number">40</span>movie_json <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> page_count <span class="token operator">&lt;=</span> Max_page_number<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Page:'</span><span class="token punctuation">,</span>page_count<span class="token punctuation">)</span>  <span class="token keyword">if</span> page_count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://www.imdb.com/search/title/?title_type=tv_movie&amp;release_date=2017-01-01,2021-01-01&amp;sort=user_rating,desc&amp;count=250'</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://www.imdb.com/search/title/?title_type=tv_movie&amp;release_date=2017-01-01,2021-01-01&amp;sort=user_rating,desc&amp;count=250&amp;start='</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>page_count<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">250</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&amp;ref_=adv_nxt'</span>    <span class="token comment" spellcheck="true"># Read the content of the original json file to prevent the connection from being interrupted and data loss</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'**********reading json file**********'</span><span class="token punctuation">)</span>    movie_json <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'/content/drive/My Drive/movie_data.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        load_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        num_movie <span class="token operator">=</span> len<span class="token punctuation">(</span>load_dict<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num_movie<span class="token punctuation">,</span><span class="token string">'movies in document'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start Crawler from'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>page_count<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">250</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'movie later'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_movie<span class="token punctuation">)</span><span class="token punctuation">:</span>            movie_name <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'movie_name'</span><span class="token punctuation">]</span>            movie_type <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'movie_type'</span><span class="token punctuation">]</span>            movie_score <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'movie_score'</span><span class="token punctuation">]</span>            director <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'director'</span><span class="token punctuation">]</span>            stars <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'stars'</span><span class="token punctuation">]</span>            movie_synopsis <span class="token operator">=</span> load_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'movie_synopsis'</span><span class="token punctuation">]</span>            movie_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'movie_name': movie_name,'movie_type': movie_type,'movie_score': movie_score,'director': director,'stars': stars,'movie_synopsis': movie_synopsis&amp;#125;</span>            movie_json<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_dict<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'***************finish****************'</span><span class="token punctuation">)</span>  page_count <span class="token operator">+=</span> <span class="token number">1</span>  html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  html<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>  movies <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"lister-item mode-advanced"</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> movie <span class="token keyword">in</span> movies<span class="token punctuation">:</span>    movie_name <span class="token operator">=</span> <span class="token string">'None'</span>    movie_type <span class="token operator">=</span> <span class="token string">'None'</span>    movie_score <span class="token operator">=</span> <span class="token string">'None'</span>    director <span class="token operator">=</span> <span class="token string">'None'</span>    stars <span class="token operator">=</span> <span class="token string">'None'</span>    movie_synopsis <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token comment" spellcheck="true"># movie_name</span>    <span class="token keyword">if</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.lister-item-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a <span class="token keyword">is</span> None<span class="token punctuation">:</span>      movie_name <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      movie_name <span class="token operator">=</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.lister-item-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true"># movie_type</span>    <span class="token keyword">if</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.genre'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> None<span class="token punctuation">:</span>      movie_type <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      clean_type <span class="token operator">=</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.genre'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>      clean_type <span class="token operator">=</span> clean_type<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>      movie_type <span class="token operator">=</span> clean_type    <span class="token comment" spellcheck="true"># movie_score</span>    <span class="token keyword">if</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.ratings-bar'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> None<span class="token punctuation">:</span>      movie_score <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token keyword">elif</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.ratings-bar'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strong <span class="token keyword">is</span> None<span class="token punctuation">:</span>      movie_score <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      movie_score <span class="token operator">=</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.ratings-bar'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strong<span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true"># director and stars</span>    movie_url <span class="token operator">=</span> <span class="token string">'https://www.imdb.com'</span><span class="token operator">+</span>movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.lister-item-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'?ref_=adv_li_tt'</span>    movie_page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>movie_url<span class="token punctuation">)</span>    movie_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>movie_page<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> staff <span class="token keyword">in</span> movie_soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"credit_summary_item"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> staff<span class="token punctuation">.</span>h4<span class="token punctuation">.</span>string <span class="token operator">==</span> <span class="token string">"Director:"</span> <span class="token operator">or</span> staff<span class="token punctuation">.</span>h4<span class="token punctuation">.</span>string <span class="token operator">==</span> <span class="token string">"Directors:"</span><span class="token punctuation">:</span>        director <span class="token operator">=</span> <span class="token string">''</span>        key <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> director_name <span class="token keyword">in</span> staff<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> key <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            director <span class="token operator">=</span> director <span class="token operator">+</span> director_name<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">','</span>          key <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token keyword">if</span> staff<span class="token punctuation">.</span>h4<span class="token punctuation">.</span>string <span class="token operator">==</span> <span class="token string">"Star:"</span> <span class="token operator">or</span> staff<span class="token punctuation">.</span>h4<span class="token punctuation">.</span>string <span class="token operator">==</span> <span class="token string">"Stars:"</span><span class="token punctuation">:</span>        stars <span class="token operator">=</span> <span class="token string">''</span>        key <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> stars_name <span class="token keyword">in</span> staff<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> key <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            stars <span class="token operator">=</span> stars <span class="token operator">+</span> stars_name<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">','</span>          key <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># movie_synopsis</span>    <span class="token keyword">if</span> movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.lister-item-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span> <span class="token keyword">is</span> None<span class="token punctuation">:</span>      movie_synopsis <span class="token operator">=</span> <span class="token string">'None'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      movie_sum <span class="token operator">=</span> <span class="token string">'https://www.imdb.com'</span><span class="token operator">+</span>movie<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.lister-item-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'plotsummary?ref_=tt_ov_pl'</span>      movie_sum_page <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>movie_sum<span class="token punctuation">)</span>      movie_sum_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>movie_sum_page<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>      movie_synopsis <span class="token operator">=</span> movie_sum_soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">'.ipl-zebra-list__item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true">#Generate per-movie information</span>    movie_content <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'movie_name'</span><span class="token punctuation">:</span> movie_name<span class="token punctuation">,</span>        <span class="token string">'movie_type'</span><span class="token punctuation">:</span> movie_type<span class="token punctuation">,</span>        <span class="token string">'movie_score'</span><span class="token punctuation">:</span> movie_score<span class="token punctuation">,</span>        <span class="token string">'director'</span><span class="token punctuation">:</span> director<span class="token punctuation">,</span>        <span class="token string">'stars'</span><span class="token punctuation">:</span> stars<span class="token punctuation">,</span>        <span class="token string">'movie_synopsis'</span><span class="token punctuation">:</span> movie_synopsis    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">if</span> movie_count <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No.'</span><span class="token punctuation">,</span>movie_count<span class="token punctuation">,</span><span class="token string">'Movie'</span><span class="token punctuation">)</span>    movie_count <span class="token operator">+=</span> <span class="token number">1</span>    movie_json<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># insert to json file</span>  <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'/content/drive/My Drive/movie_data.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> json_file<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>movie_json<span class="token punctuation">,</span>json_file<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h4 id="配置ElasticSearch"><a href="#配置ElasticSearch" class="headerlink" title="配置ElasticSearch"></a>配置ElasticSearch</h4><ul><li><p>下载并安装<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html">Elasticsearch</a>，打开安装后Elasticsearch的bin文件夹，然后双击运行elasticsearch.bat。</p><p>这步可以在本地主机中托管elasticsearch，默认端口是9200。</p></li></ul><pre class=" language-python"><code class="language-python">D<span class="token punctuation">:</span>\elasticsearch<span class="token number">-7.11</span><span class="token punctuation">.</span><span class="token number">1</span>\bin\elasticsearch<span class="token punctuation">.</span>bat</code></pre><ul><li>打开Web浏览器，然后粘贴以下URL，以检查Elasticsearch搜索服务器是否已启动并正在运行。</li></ul><pre class=" language-python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">9200</span><span class="token operator">/</span></code></pre><ul><li>结果必须类似于下图，说明运行成功。</li></ul><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EElasticsearch%E7%9A%84%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/localhost9200.png" alt="localhost:9200"></p><ul><li>请注意，默认端口是9200，但可以更改。在config文件夹中，打开“ config.yml”文件，并根据需要编辑端口号。</li></ul><pre class=" language-python"><code class="language-python">http<span class="token punctuation">.</span>port：<span class="token number">9300</span></code></pre><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><ul><li>手动添加JSON将是一项繁重的任务，而且成本很高。因此，Elasticsearch借助“ BULK API”提供了帮助，我们可以在一个API调用中添加大量的documents。</li><li>为了通过BulkAPI添加文档，需要将我通过抓取网站收集的JSON转换为Bulk JSON。但是需要添加一个小的Python脚本来对我收集的数据进行修改，并使用Python通过BulkAPI进行数据添加。</li></ul><blockquote><p>您可以自己尝试一下，只需运行下面的<code>InsertDataToES.py</code>。另外，如果您在读取文件和添加任何字符替换时具有自己的数据和操作，请尝试修改以下脚本。Index的创建，documents的添加和搜索也可以使用python和elasticsearch库完成。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> elasticsearch<span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> Elasticsearch<span class="token punctuation">,</span> helpers<span class="token keyword">from</span> elasticsearch_dsl <span class="token keyword">import</span> Index<span class="token keyword">import</span> json<span class="token punctuation">,</span> re<span class="token keyword">import</span> codecs<span class="token keyword">import</span> unicodedata<span class="token comment" spellcheck="true"># import queries</span>es <span class="token operator">=</span> Elasticsearch<span class="token punctuation">(</span>HOST<span class="token operator">=</span><span class="token string">"http://localhost"</span><span class="token punctuation">,</span> PORT<span class="token operator">=</span><span class="token number">9200</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_all_movies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'movie_data.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        all_movies <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&amp;#125;\n&amp;#123;"</span><span class="token punctuation">,</span> <span class="token string">"&amp;#125;,\n&amp;#123;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res_list <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> n<span class="token punctuation">,</span> i <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>all_movies<span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> all_movies<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res_list<span class="token keyword">def</span> <span class="token function">genData</span><span class="token punctuation">(</span>movie_array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> movie <span class="token keyword">in</span> movie_array<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Fields-capturing                </span>        name <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"movie_name"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        types <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"movie_type"</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        score <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"movie_score"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        director <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"director"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        stars <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"stars"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        synopsis <span class="token operator">=</span> movie<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"movie_synopsis"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token keyword">yield</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token comment" spellcheck="true">#"_index": "imdb_dataset",</span>            <span class="token string">"_source"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token string">"movie_name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>                <span class="token string">"movie_type"</span><span class="token punctuation">:</span> types<span class="token punctuation">,</span>                <span class="token string">"movie_score"</span><span class="token punctuation">:</span>score<span class="token punctuation">,</span>                <span class="token string">"director"</span><span class="token punctuation">:</span> director<span class="token punctuation">,</span>                <span class="token string">"stars"</span><span class="token punctuation">:</span> stars<span class="token punctuation">,</span>                <span class="token string">"movie_synopsis"</span><span class="token punctuation">:</span> synopsis<span class="token punctuation">,</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># createIndex()</span>all_movies <span class="token operator">=</span> read_all_movies<span class="token punctuation">(</span><span class="token punctuation">)</span>helpers<span class="token punctuation">.</span>bulk<span class="token punctuation">(</span>es<span class="token punctuation">,</span>genData<span class="token punctuation">(</span>all_movies<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>通过运行脚本将documents添加到BulkAPI。修改“index”名称以适合您的名称并运行python脚本。将数据添加到相应目录下并更新<code>read_all_movies()</code>method中的路径。如果要添加更多文档，请将它们添加到同一文件夹中并运行脚本。对于抓取的数据，我已经相应地定义了字段。但是，如果您对数据进行了任何更改，请在<code>genData()</code>方法中添加相同的字段。</li><li>运行该ipynb文件，若输出结果如下所示，则运行成功：</li></ul><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">9990</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="配置Kibana"><a href="#配置Kibana" class="headerlink" title="配置Kibana"></a>配置Kibana</h4><p>为了进一步确认是否成功将json文件里的数据导入Elasticsearch里，我们利用Kibana来可视化dataset</p><ul><li>下载并安装<a href="https://www.elastic.co/cn/downloads/kibana">Kibana</a>，双击运行kibana.bat</li></ul><pre class=" language-python"><code class="language-python">D<span class="token punctuation">:</span>\kibana<span class="token number">-7.11</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>windows<span class="token operator">-</span>x86_64\bin\kibana<span class="token punctuation">.</span>bat</code></pre><ul><li>打开Web浏览器，然后粘贴以下URL，打开Kibana</li></ul><pre class=" language-python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">5601</span><span class="token operator">/</span></code></pre><ul><li>从左侧的菜单栏选择Management -&gt; Stack Management -&gt; Data -&gt; Index Management，若如下图所示，imdb_dataset即我们传入到Elasticsearch中的数据，共9990条，则成功！</li></ul><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EElasticsearch%E7%9A%84%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/Kibana.png" alt="Kibana"></p><ul><li>这个界面可以手动管理我们的dataset，包括后续我们为BM25F模型创建的新的dataset，都会在这里显示。</li></ul><p>下一部分，我们将着重讲解如何实现不同的检索模型。</p>]]></content>
      
      
      <categories>
          
          <category> 项目-信息检索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Information Retrieval </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Search Engine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于MCTS算法的Pommerman游戏AI代理的优化(二)</title>
      <link href="2021/01/06/you-hua-pommerman-er/"/>
      <url>2021/01/06/you-hua-pommerman-er/</url>
      
        <content type="html"><![CDATA[<p>上篇博客我们详细介绍了优化的算法，本次我们将对比分析实验结果，看看究竟是哪种优化方法可以得到最好的结果。</p><h2 id="需要了解"><a href="#需要了解" class="headerlink" title="需要了解"></a>需要了解</h2><h3 id="不同的游戏模式"><a href="#不同的游戏模式" class="headerlink" title="不同的游戏模式"></a>不同的游戏模式</h3><p>首先我们需要先了解一下Pommerman的游戏模式，其可以按照以下规则在两种不同的游戏模式下进行游戏：</p><ul><li>Free for all（FFA）：所有四个玩家都在相互竞争。<ul><li>最后一个存活的玩家获胜。</li><li>所有死亡的玩家都会输掉比赛。</li><li>最后都存活的几个玩家平局。</li><li>如果最后存活的几个玩家同时死亡，他们也会平局。</li></ul></li><li>Team：这四个玩家按2对2分组。<ul><li>他们总是配对成1st-3rd vs 2nd-4th，位于对角。</li><li>同一队伍中两个agent都死亡的队伍loss，另一支队伍win。</li><li>如果每个队伍的最后一名agent还活着，则两支队伍平局。</li><li>如果每次最后活着的agent都同时死亡，则两支队伍平局。</li></ul></li></ul><h3 id="不同的可观察性-Observabilities"><a href="#不同的可观察性-Observabilities" class="headerlink" title="不同的可观察性 (Observabilities)"></a>不同的可观察性 (Observabilities)</h3><p>所有玩家都会收到有关其周围环境的信息（不同图块的存在和位置）。 默认情况下，agents会接收有关全板的信息（full observability设置）。这由<code>Types.java（src/utils/Types.java）</code>类中的<code>DEFAULT VISION RANGE</code>变量指示。</p><table><thead><tr><th>utils.Types.DEFAULT VISION RANGE value</th><th>Observability</th></tr></thead><tbody><tr><td>-1</td><td>Full observability</td></tr><tr><td>N ( &gt; 0)</td><td>Partial observability (N tiles from location)</td></tr></tbody></table><p>部分可见(Partial observability)：例如，当N=1，以agent为中心的9宫格(3×3)为可见范围；当N=2时，以agent为中心的25宫格(5×5)为可见范围。</p><h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h2><h3 id="1-Full-Observability-amp-FFA-mode-的对比分析"><a href="#1-Full-Observability-amp-FFA-mode-的对比分析" class="headerlink" title="1. Full-Observability &amp; FFA mode 的对比分析"></a>1. Full-Observability &amp; FFA mode 的对比分析</h3><p><strong>运行设置</strong>：</p><ul><li><p>FFA mode</p></li><li><p>20 level seeds</p></li><li><p>6 repetitions per seed</p></li><li><p>Full-Observability</p></li><li><p>4个player (in this order): EnhancedPlayer, MCTSPlayer, RandomPlayer, RandomPlayer</p><p><strong>Note</strong>: RandomPlayer的胜率为0，因此可看作EnhancedPlayer与MCTSPlayer的对战</p></li></ul><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EMCTS%E7%AE%97%E6%B3%95%E7%9A%84Pommerman%E6%B8%B8%E6%88%8FAI%E4%BB%A3%E7%90%86%E7%9A%84%E4%BC%98%E5%8C%96/Full_FFA.png"></p><h3 id="2-Full-Observability-amp-TEAM-mode-的对比分析"><a href="#2-Full-Observability-amp-TEAM-mode-的对比分析" class="headerlink" title="2. Full-Observability &amp; TEAM mode 的对比分析"></a>2. Full-Observability &amp; TEAM mode 的对比分析</h3><p><strong>运行设置</strong>：</p><ul><li>TEAM mode</li><li>Full-Observability</li><li>4个player: 2个EnhancedPlayers <strong>vs</strong> 2个MCTSPlayers</li></ul><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EMCTS%E7%AE%97%E6%B3%95%E7%9A%84Pommerman%E6%B8%B8%E6%88%8FAI%E4%BB%A3%E7%90%86%E7%9A%84%E4%BC%98%E5%8C%96/Full_TEAM.png"></p><h3 id="3-Partial-Observability-amp-FFA-mode-的对比分析"><a href="#3-Partial-Observability-amp-FFA-mode-的对比分析" class="headerlink" title="3. Partial-Observability &amp; FFA mode 的对比分析"></a>3. Partial-Observability &amp; FFA mode 的对比分析</h3><p><strong>运行设置</strong>：</p><ul><li><p>FFA mode</p></li><li><p>20 level seeds</p></li><li><p>6 repetitions per seed</p></li><li><p>Partial-Observability</p></li><li><p>4个player (in this order): EnhancedPlayer, MCTSPlayer, RandomPlayer, RandomPlayer</p><p><strong>Note</strong>: RandomPlayer的胜率为0，因此可看作EnhancedPlayer与MCTSPlayer的对战</p></li></ul><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EMCTS%E7%AE%97%E6%B3%95%E7%9A%84Pommerman%E6%B8%B8%E6%88%8FAI%E4%BB%A3%E7%90%86%E7%9A%84%E4%BC%98%E5%8C%96/Partial_FFA.png"></p><h3 id="4-Partial-Observability-amp-TEAM-mode-的对比分析"><a href="#4-Partial-Observability-amp-TEAM-mode-的对比分析" class="headerlink" title="4. Partial-Observability &amp; TEAM mode 的对比分析"></a>4. Partial-Observability &amp; TEAM mode 的对比分析</h3><p><strong>运行设置</strong>：</p><ul><li>TEAM mode</li><li>Partial-Observability</li><li>4个player: 2个EnhancedPlayers <strong>vs</strong> 2个MCTSPlayers</li></ul><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EMCTS%E7%AE%97%E6%B3%95%E7%9A%84Pommerman%E6%B8%B8%E6%88%8FAI%E4%BB%A3%E7%90%86%E7%9A%84%E4%BC%98%E5%8C%96/Partial_TEAM.png"></p><h2 id="数据分析与讨论"><a href="#数据分析与讨论" class="headerlink" title="数据分析与讨论"></a>数据分析与讨论</h2><p>通过以上实验数据，我们可以看到，在Full-Observability模式下，α-AMAF和Cutoff AMAF算法大大提高了UCT蒙特卡洛方法的强度。但是，ε-greedy和Decaying ε-greedy算法的效果不佳。这可能是因为ε-greedy算法收敛后，总是会选择概率为ε的非最优解，而最优解的发现机率很高，造成了很多浪费。</p><p>在我们的实验中，采用Progressive Bias方法的agent从没有比原始的MCTS方法好，最可能的原因是来自最后一次MCTS搜索的启发式方法不足以支持MCTS。 </p><p>Bayesian UCT agent通常比原始MCTS表现更好，似乎这种基于差异的树策略更有意义。Full-Observability模式下，weighted-backup和FPU方法显示出与原始MCTS相比的优势。但是，从部分可观察性的角度来看，其优势被大大削弱，这表明weighted-backup和FPU方法无法解决信息不完善的问题。此外，当rollout-policy和启发式方法更可靠时，weighted-backup方法也很有意义。</p>]]></content>
      
      
      <categories>
          
          <category> 项目-AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Monte Carlo tree search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于MCTS算法的Pommerman游戏AI代理的优化(一)</title>
      <link href="2021/01/05/you-hua-pommerman-yi/"/>
      <url>2021/01/05/you-hua-pommerman-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本项目是由我与两位大佬(Peiyao Wang，Yuze Liu)共同完成，旨在通过阅读蒙特卡罗树搜索(MCTS)相关文献，在Pommerman游戏环境中，从不同方向来优化Pommerman的AI代理(agents)，并通过实验数据对比分析优劣。</p><p><strong>我们的项目最后在Pommerman(FFA模式)比赛中，从众多AI Agents中脱颖而出，最后夺得第二名的好成绩，再次感谢这两位大佬做出的贡献。</strong></p><blockquote><p>项目源码：<a href="https://github.com/JianxiangGao/Pommerman_MCTS_optimized_GroupAI">https://github.com/JianxiangGao/Pommerman_MCTS_optimized_GroupAI</a></p><p>注意：此项目需要自行添加到java-Pommerman框架中运行，详细步骤可阅读README.md。</p></blockquote><p>我们优化的方向包括：</p><ul><li>8种基于基本UCT算法(Upper Confidence Bound Apply to Tree)对tree policy进行优化的算法，包括：<ul><li>Bayesian UCT</li><li>AMAF</li><li>α-AMAF</li><li>Cut-off AMAF</li><li>ε-greedy</li><li>Decaying ε-greedy</li><li>First Play Urgency (FPU)</li><li>Progressive Bias</li></ul></li><li>2种反向传播优化方法<ul><li>Minimax</li><li>weighted-backup </li></ul></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="Pommerman游戏介绍"><a href="#Pommerman游戏介绍" class="headerlink" title="Pommerman游戏介绍"></a>Pommerman游戏介绍</h3><blockquote><p>详细介绍：<a href="https://github.com/GAIGResearch/java-pommerman/wiki">https://github.com/GAIGResearch/java-pommerman/wiki</a></p><p>详细规则：<a href="https://github.com/GAIGResearch/java-pommerman/wiki/Pommerman-Game-Rules">https://github.com/GAIGResearch/java-pommerman/wiki/Pommerman-Game-Rules</a></p></blockquote><p>Pommerman是著名的Bomberman的变体。在每个游戏中，四个agents在随机绘制的对称11x11网格上战斗。四个agents位于四个角落。可以通过完全/部分可观察性进行游戏。在这个对称的11x11网格中，除了四个agents外，还有木墙和刚性墙。木墙可被炸弹炸毁，而刚性墙则坚不可摧且不可穿过。</p><p><img src="https://github.com/JianxiangGao/hexo_blog_img/blob/master/%E5%9F%BA%E4%BA%8EMCTS%E7%AE%97%E6%B3%95%E7%9A%84Pommerman%E6%B8%B8%E6%88%8FAI%E4%BB%A3%E7%90%86%E7%9A%84%E4%BC%98%E5%8C%96/Pommerman.gif?raw=true" alt="Java-Pommerman"></p><p><strong>游戏设置：</strong><br>每位agent每次放置炸弹，其炸弹数量都会减少一枚，炸弹爆炸后，炸弹数量也会增加一枚。每次炸弹爆炸都会影响其垂直和水平方向。炸弹放置10次后会爆炸。炸弹爆炸可摧毁其范围内的所有木墙，炸药，助推器或其他炸弹（取决于爆炸的强度）。木墙有隐藏的道具，当墙被破坏时会显示出来。这些隐藏的能量道具包括：额外的炸弹（将agents的弹药增加一倍），增加射程（将炸弹的爆炸力增加一倍）并可以踢（炸弹可以被agents踢出并直线移动）。</p><p><strong>三种游戏结果类型：</strong></p><ul><li>Win：仅剩一个agent或一组agents。</li><li>Tie：当游戏计时器结束时，多个agents或两个团队的agents在同一回合中存活或同时销毁。提示：如果在游戏中同时消灭了多个agents或两个团队的agents，我们将重新开始游戏，直到有获胜者或团队连续三场比赛Tie。在后一个结果中，两个团队都将被视为Loss。</li><li>Loss：被摧毁的特工或团队。</li></ul><p><strong>动作和观察：</strong><br>上、下、左、右、放置炸弹</p><hr><h3 id="配置-Java-Pommerman-游戏"><a href="#配置-Java-Pommerman-游戏" class="headerlink" title="配置 Java-Pommerman 游戏"></a>配置 Java-Pommerman 游戏</h3><blockquote><p>详细框架介绍：<a href="https://github.com/GAIGResearch/java-pommerman/wiki/Framework-Structure">https://github.com/GAIGResearch/java-pommerman/wiki/Framework-Structure</a></p></blockquote><p>为了安装并运行该框架，请按照以下说明进行操作：</p><ol><li>在Unix或Windows终端中使用<code>git clone</code>以下存储库：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/GAIGResearch/java-pommerman</code></pre><ol start="2"><li>设置您的IDE以使用该项目。 以下说明会指导您使用IntelliJ IDEA进行设置，但是您也可以使用任何其他您更喜欢的IDE。<ul><li>打开IntelliJ IDEA</li><li>选择<code>Create New Project</code>，然后选择<code>Java</code>，单击<code>Next</code>进行下一步。</li><li>输入您喜欢的任何项目名称，然后选择“ java-pommerman”文件夹（即包含<code>src/directory</code>的那个文件夹）作为 project location。 点击<code>Finish</code>（如果出现提示，选择<code>yes</code>以覆盖项目文件夹）。</li></ul></li><li>验证Pommerman可以在IDE中执行：<ul><li>单击File → Project Structure，然后转到Libraries。</li><li>点击<code>+</code>符号，然后选择Java。 <code>directory browsing</code>窗口应出现。</li><li>选择目录<code>lib/</code>中的所有jar文件，然后单击<code>Open</code>。</li><li>首先单击<code>OK</code>，将libraries添加到项目中，然后再次单击以关闭<code>Project Structure</code>窗口</li><li>在IDE中，打开文件<code>src/Test.java</code></li><li>运行<code>Test.java</code></li><li>编译项目需要几秒钟，然后它将运行具有四个AI Agents的游戏。</li></ul></li></ol><h2 id="算法-介绍-伪代码"><a href="#算法-介绍-伪代码" class="headerlink" title="算法(介绍+伪代码)"></a>算法(介绍+伪代码)</h2><h3 id="Monte-Carlo-Tree-Search-algorithm-MCTS"><a href="#Monte-Carlo-Tree-Search-algorithm-MCTS" class="headerlink" title="Monte Carlo Tree Search algorithm (MCTS)"></a>Monte Carlo Tree Search algorithm (MCTS)</h3><p>蒙特卡洛树搜索（MCTS）是一种最佳优先搜索方法，该方法是在搜索开始时完全随机地进行搜索。 然后，使用先前探索的结果来更准确地预测最有前途的行动，从而使其评估更加精确。MCTS算法的核心循环可分为四个步骤，如图所示：</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%9F%BA%E4%BA%8EMCTS%E7%AE%97%E6%B3%95%E7%9A%84Pommerman%E6%B8%B8%E6%88%8FAI%E4%BB%A3%E7%90%86%E7%9A%84%E4%BC%98%E5%8C%96/MCTS.png" alt="MCTS算法"></p><ul><li><strong>Selection</strong>：在这一部分中，您需要确定应该扩展哪个节点。 此过程从树的根节点开始，一直进行到选择具有未扩展子节点的节点为止。 每当要从现有树中选择一个节点时（作用时），将选择使UCB1公式最大化的子节点：</li></ul><p>$$<br>UCB1= (X_j ) + C_p √((2 ln⁡n)/n_j )<br>$$</p><p>在公式中，Xj是该节点下所有节点的平均奖励：Cp是一个探索常数（通常设置为1⁄√2）； n是访问父节点的次数； n_j是访问子节点j的次数。 值得注意的是，UCB1是最常用的action选择公式，但不是唯一可以使用的公式。</p><ul><li><p><strong>Expansion</strong>：当一个节点选择具有未发泡的孩子 - 也就是这个节点表示的状态，它的存在可以采取，但还没有尝试过的动作 - 这些子节点之一将扩展选择，这意味着模拟 从该状态开始完成。 选择要扩展的子项时，将随机执行所选的操作。</p></li><li><p><strong>Simulation</strong>：扩展节点后，将从刚刚扩展的非终端状态开始模拟，并且模拟将持续到游戏结束以生成估计值。 通常，这将随机执行，直到游戏获胜或失败为止。 游戏结束时的状态将用作此模拟的奖励，并将传播到搜索树。</p></li><li><p><strong>Backpropagation</strong>：将此奖励添加到新节点的总奖励Χ中。 奖励还将“备份”到其父节点（父节点的父节点），直到树的root。</p></li></ul><pre class=" language-pseudocode"><code class="language-pseudocode">function msctsSearch()    while within time limit do        v ← treePolicy()        delta ← rollOut()        backUp(v, delta)    end whilefunction mostVisitedAction()    return the most visited actionfunction treePolicy()    while state is nontermimal do    if state not fully expanded then        return expand(state)    else        uct(state) # default tree policyfunction rollOut()    while rollOut not finished then        depth ← depth + 1    return root state heuristicfunction backUp(node, result)    visits ← visits + 1    totalValue ← totalValue + result</code></pre><h3 id="UCT-algorithm"><a href="#UCT-algorithm" class="headerlink" title="UCT algorithm"></a>UCT algorithm</h3><p>根据子节点的总得分，访问次数和Agent的得分，计算出该节点的得分，然后选择得分最高的节点并返回。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function UCT()    for children nodes do        childValue ← normalize(childTotalValue/(childVisitTimes+ϵ))        uctValue ← childValue + sqrt((2Ln parentVisitTimes+1)/(childVisitTimes+ϵ))    # break ties randomly    roll(state, actions)    return node with the max value</code></pre><h3 id="Bayesian-UCT-algorithm"><a href="#Bayesian-UCT-algorithm" class="headerlink" title="Bayesian UCT algorithm"></a>Bayesian UCT algorithm</h3><p>UCT值的计算被central-limit theory的原理所取代(<a href="https://arxiv.org/abs/1203.3519">Tesauro, Rajan and Segal, 2012</a>)。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function Bayesian UCT()    for children nodes do        childValue ← normalize(childTotalValue/(childVisitTimes+ϵ))        uctValue ← childValue + sqrt((2Ln parentVisitTimes+1)/(childVisitTimes+ϵ))                   * standard_deviation    roll(state, actions)    return node with the max value</code></pre><h3 id="UCB1-tuned-algorithm"><a href="#UCB1-tuned-algorithm" class="headerlink" title="UCB1-tuned algorithm"></a>UCB1-tuned algorithm</h3><p>UCT函数结合了方差和特定节点的访问(<a href="https://link.springer.com/article/10.1023/A:1013689704352">Auer, Cesa-Bianchi and Fischer, 2002</a>)。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function UCB1-tuned()    for children nodes do        childValue ← normalize(childTotalValue/(childVisitTimes+ϵ))        v<-variance+sqrt(2*Ln(parentVisitTimes+1)/(childVisitTimes+ϵ))        v<- min(v,1/4)        uctValue ← childValue + sqrt(v*Ln (parentVisitTimes+1)/(childVisitTimes+ϵ))    roll(state, actions)    return node with the max value</code></pre><h3 id="Single-player-MCTS-algorithm"><a href="#Single-player-MCTS-algorithm" class="headerlink" title="Single-player MCTS algorithm"></a>Single-player MCTS algorithm</h3><p>添加了UCB公式的第三部分，其中包含方差和访问时间，这与UCB1- tunned算法的相似。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function SP_MCTS()    constant D    for children nodes do        childValue ← normalize(childTotalValue/(childVisitTimes+ϵ))        uctValue ← childValue + sqrt(2*Ln (parentVisitTimes+1)/(childVisitTimes+ϵ))                    + sqrt(variance+D/(childVisitTimes+ϵ))    roll(state, actions)    return node with the max value</code></pre><h3 id="AMAF-algorithm"><a href="#AMAF-algorithm" class="headerlink" title="AMAF algorithm"></a>AMAF algorithm</h3><p>基本AMAF算法在每次play-out后将UCT与AMAF更新结合在一起。 该算法可快速增加UCT树中节点的计数，从而提高算法对获胜率的confidence(<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.183.7924&rep=rep1&type=pdf">Helmbold and Parker-Wood, 2009</a>)。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function AMAF()    for children nodes do        childValue ← normalize(childTotalValue/(childVisitTimes+ϵ))        uctValue ← childValue + sqrt((2Ln parentVisitTimes+1)/(childVisitTimes+ϵ))        AMAFchildValue ← normalize(AMAFTotalValue/(AMAFVisitTimes+ϵ))        AMAFValue ← AMAFchildValue + sqrt((2Ln parentVisitTimes+1)/(childVisitTimes+ϵ))    return node with the max value</code></pre><h3 id="α-AMAF-algorithm"><a href="#α-AMAF-algorithm" class="headerlink" title="α - AMAF algorithm"></a>α - AMAF algorithm</h3><p>α-AMAF算法在每个节点上混合两组计数。 一种是标准更新，另一种是AMAF更新(<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.183.7924&rep=rep1&type=pdf">Helmbold and Parker-Wood, 2009</a>)。 score的计算公式如下：<br>$$<br>αA+(1-α)U<br>$$<br>其中A是AMAF分数，U是UCT分数，α是[0,1]范围内的加权参数。 在上述公式中，α= 0表示标准UCT算法，α= 1表示基本AMAF算法。当α= 0.1-0.3时，可以将α-AMAF算法最优化，经过测试，在这里，我们将α设置为0.15。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function a_AMAF()    for children nodes do        childValue ← normalize(childTotalValue/(childVisitTimes+ϵ))        uctValue ← childValue + sqrt((2Ln parentVisitTimes+1)/(childVisitTimes+ϵ))        AMAFchildValue ← normalize(AMAFTotalValue/(AMAFVisitTimes+ϵ))        AMAFValue ← AMAFchildValue + sqrt((2Ln parentVisitTimes+1)/(childVisitTimes+ϵ))        alphaAMAFValue ← (alpha*AMAFValue)+((1 - alpha)*uctValue)    return node with the max value</code></pre><h3 id="Cutoff-AMAF-algorithm"><a href="#Cutoff-AMAF-algorithm" class="headerlink" title="Cutoff AMAF algorithm"></a>Cutoff AMAF algorithm</h3><p>Cutoff AMAF用于“warm-up(预热)”树中的计数，然后使用精确的标准更新(UCT)去完善估算值(<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.183.7924&rep=rep1&type=pdf">Helmbold and Parker-Wood, 2009</a>)。 定义参数k， 当迭代次数小于k时，将使用AMAF算法更新数据；当迭代次数大于k时，将使用UCT算法。当k = 0时，即标准UCT算法。 为了使Cutoff AMAF算法可以得到最大程度的优化，在这里，我们将cutoff的值设置为150。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function cutoff_AMAF()    if n < times times then # times=150        AMAF()    else        uct()</code></pre><h3 id="ε-greedy-algorithm"><a href="#ε-greedy-algorithm" class="headerlink" title="ε - greedy algorithm"></a>ε - greedy algorithm</h3><p>epsilon-Greedy算法是Multiarmed Bandit Algorithms(MBA)之一。 为了解决“Explore-Exploit”难题，有必要使收益最大化。 ε-贪心算法会添加一个参数ε，该参数代表执行“Explore”的可能性。 例如，ε= 0.1，表示执行“ Explore”操作的可能性为10％，而“ Exploit”操作的概率为90％，这意味着当前最好的手臂摇动。 换句话说，如果以次数（即每10次操作）来计数投币机的机械臂摆动过程，则只有一个操作可以探索（尝试其他机械臂）。</p><p>这里，我们的agent将具有较小的ε（= 1e-6）概率来随机选择未知action，然后具有1-ε的概率来选择现有actions中具有最大价值的action。 </p><pre class=" language-pseudocode"><code class="language-pseudocode">function e_Greedy()    if ϵ*N finished then        for ϵ * Visit times do        select a random action        return node with the max value    else        for (1-ϵ) * Visit times do            childValue ← childTotalValue/(childVisitTimes+ϵ)            e_GreedyValue ← childValue + (1/(childVisitTimes+ϵ+1)) * (SumChildValue/NumChildValue - childValue)return node with the max value</code></pre><h3 id="Decaying-ε-greedy-algorithm"><a href="#Decaying-ε-greedy-algorithm" class="headerlink" title="Decaying ε - greedy algorithm"></a>Decaying ε - greedy algorithm</h3><p>考虑到在传统的ε - greedy algorithm中，将epsilon设置为较低的固定值时，获得的解不一定是最优解。 由于Q学习初期的贪婪率可能太高，因此很容易输入局部最优解。 因此，我们尝试了“衰减的Epsilon-Greedy”策略，并使每一次roll的epsilon都是衰减的。</p><p>Decaying ε - greedy algorithm和ε - greedy algorithm之间的区别在于，Decaying ε - greedy algorithm使用衰减的epsilon值来权衡开发和勘探。 此策略是使每次迭代的epsilon值都接近于0。 随着AI agents对环境的了解越来越多，利用率也随之提高，导致Q值几乎没有变化。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function e_Greedy_Decay()    if ϵ*N finished then        for ϵ * Visit times do            select a random action            decaying ϵ ← ϵ/100000        return node with the max value    else        for (1-ϵ) * Visit times do            childValue ← childTotalValue/(childVisitTimes+ϵ)            e_GreedyValue ← childValue + (1/(childVisitTimes+ϵ+1)) * (SumChildValue/NumChildValue - childValue)            decaying ϵ ← ϵ/100000return node with the max value</code></pre><h3 id="First-Play-Urgency-algorithm-FPU"><a href="#First-Play-Urgency-algorithm-FPU" class="headerlink" title="First Play Urgency algorithm (FPU)"></a>First Play Urgency algorithm (FPU)</h3><p>根据<a href="https://hal.archives-ouvertes.fr/hal-00115330/">Gelly(2006)</a>的研究，当迭代数与选择的动作数相比不够大时，常规的UCT方法可能效率较低。 如果某个动作每次都返回极高的值（在我们的环境中为+1），那么过多关注其他探索方法是不明智的。 因此，实施FPU方法是为了更好地利用潜在的有希望的行动。</p><p>FPU的扩展方法被集成到UCT函数中，其中每个未扩展节点的等效uct值等于FPU值（FPU的参数）。 如果未扩展的节点被认为具有等效的uct值，则扩展该节点并将其作为树策略输出。 其他部分与UCT方法相似。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function FPU()    pre-defined parameter:FPU-value    for children nodes do        if the node is not expanded          uctValue<-FPU-value        else          childValue ← normalize(childTotalValue/(childVisitTimes+ϵ))          uctValue ← childValue + sqrt((2Ln parentVisitTimes+1)/(childVisitTimes+ϵ))    if node with the max uctValue is not expanded        expand the node    roll(state, actions)    return node with the max value</code></pre><h3 id="Progressive-Bias-algorithm"><a href="#Progressive-Bias-algorithm" class="headerlink" title="Progressive Bias algorithm"></a>Progressive Bias algorithm</h3><p>Progressive Bias是MCTS和基于域的启发式方法的组合，将包含基于域的启发式方法的第三个term添加到UCT公式中。 由于迭代次数太有限，因此启发式方法可以获取更多的信息(<a href="https://ieeexplore.ieee.org/abstract/document/6145622?casa_token=9T6wycv58SYAAAAA:89qE1ulJUV_7JyL5w2I8TZFDfAKPZH-n5wH8fXvhQhsTL4vnZA9Ugl5-p-6miWsAUoVlYeey-g">Browne，2012</a>)。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function ProgressiveMCTS()    for children nodes do        childValue ← normalize(childTotalValue/(childVisitTimes+ϵ))        uctValue ← childValue + sqrt(2*Ln (parentVisitTimes+1)/(childVisitTimes+ϵ)) + child_heuristic/(childVisitTimes+1)    roll(state, actions)    return node with the max value</code></pre><h3 id="Minimax-algorithm"><a href="#Minimax-algorithm" class="headerlink" title="Minimax algorithm"></a>Minimax algorithm</h3><p>Minimax是博弈论中的决策规则，并且已被证明在对抗回合制游戏中非常有效(<a href="https://arxiv.org/abs/1208.1940">Ontañón, 2012</a>)。 它旨在降低最坏情况发生时的损失，它是基于这样的假设，即对手会尝试使您进入最坏情况。 考虑到对手将您的奖励降到最低，Minimax的目的是找到最佳（最大价值）策略。</p><p>在我们的minimax实现中，每个节点都有2个临时值，一个包含节点中生成的所有分数中的最小值，另一个包含子节点中所有值的最大值。 节点的最终值定义为2个临时值中的最小值。 </p><pre class=" language-pseudocode"><code class="language-pseudocode">function minimax(node, result)    the node has 2 temp-values:v1,v2    if the result is generated in this node        v1=min(v1,result)    else # the result is propagated from children node        v2=max(children.value for all not-null children)    value=min(v1,v2)    #the “value” has the same function as TotalValue/visit in normal backup method </code></pre><h3 id="Weighted-backup-algorithm"><a href="#Weighted-backup-algorithm" class="headerlink" title="Weighted backup algorithm"></a>Weighted backup algorithm</h3><p>根据<a href="https://ieeexplore.ieee.org/abstract/document/5369603?casa_token=HUgRambJDhAAAAAA:oWACdZP71a9AwXpOURL_Jc-puKh1nE5CFLhVJvb0AcdvtrzNnC2ZRhYSIAQyVrK08sPELnAn6g">Xie 和 Liu (2009)</a>的观点，有时使用平均分作为某种方法的评估并不是最佳选择，应该认为某些分数比其他分数更重要。Xie指出，在multi-arm bandit问题中，由于其准确性更高，因此应考虑后期模拟更为重要。</p><p>由于与游戏的所有不同情况相比，迭代次数太少，因此minimax方法可能无法达到预期的效率，因此将加权后备方法实现为minimax与平均得分后备方法之间的平衡。根据minimax的原理，关于备份方法，我们有2个假设：</p><ul><li>如果在同一节点上生成了2个不同的分数（终止或达到最大深度），则在FFA模式下，较低值的分数应被视为更重要，因为对手特工更可能使您处于更糟的境地。就团队模式而言，这要视情况而定，因为您的队友将更有可能使您处于更好的状况。</li><li>如果将2个不同的分数反向传播到同一节点，则具有较高价值的分数应被视为更重要，因为代理将尝试选择有前途的行动，而不是不良的行动。</li></ul><p>因此，我们假设满足上述两个假设的适当加权方法将改善MCTS的性能。</p><pre class=" language-pseudocode"><code class="language-pseudocode">function backUp(node, result)    weight w is determined by result and         whether the result is generated or back-propagated    visit <- visit + w*result    totalValue <- totalValue+w*result</code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目-AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Monte Carlo tree search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度Q学习—Breakout游戏</title>
      <link href="2020/12/18/breakout/"/>
      <url>2020/12/18/breakout/</url>
      
        <content type="html"><![CDATA[<p>本次，我们将一起训练一个<strong>Deep Q-Network</strong>去玩Atari Breakout游戏。</p><p>Atari开发并发布的游戏<strong>Breakout</strong>，也就是我们所说的《打砖块》游戏。</p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E5%BA%A6Q%E5%AD%A6%E4%B9%A0%E2%80%94Breakout%E6%B8%B8%E6%88%8F/breakout.gif" style="zoom:33%;" /><h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1. 环境安装"></a>1. 环境安装</h2><p>我们这次将使用<strong>Google Colab</strong>在Google自带的GPU上训练Deep Q-Network。 如果你不熟悉<strong>Google Colab</strong>，请仔细阅读下面步骤。 </p><ul><li><p>首先，你需要注册一个Google帐户。</p></li><li><p>在Google Colab上，文件→新建笔记本。 代码执行程序→更改运行时类型，选择GPU作为硬件加速器，然后选择保存。 之后，你将有权使用Google的GPU。</p></li></ul><blockquote><p><strong>Note</strong>：这里提醒一下，Google的GPU对每个人的用量有限制，每次限制之后你的账号有24小时冷却时间，而且我们这次做的项目运行时间非常长，Google Colab虚拟机会在12小时后die，因此所有未保存到Google Drive的内容都会丢失，并且如果你电脑长时间不动，Google会默认你超时并限制你。别问我咋知道，说了都是泪（T_T）。</p><p>解决办法：要么你呆在电脑前面时不时动一下鼠标，要不然就写个小脚本让你鼠标每几分钟点击一下屏幕。当然了，你也可以用你自己的GPU，主要是我穷（T_T）。</p></blockquote><ul><li>安装<strong>OpenAI baselines</strong>。 在新的代码单元中，键入<code>!pip install baselines</code>，并执行该单元。 您可以忽略与<code>mujoco-py</code>相关的错误，因为我们不会使用<code>MuJoCo</code>。</li></ul><pre class=" language-python"><code class="language-python">`!pip install baselines`</code></pre><ul><li>安装<strong>Google Drive</strong>(即Google云端硬盘)，以便你可以从笔记本中访问它。 这可以通过执行以下代码单元并根据需要启用访问来实现。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Mounting a Google Drive</span><span class="token keyword">from</span> google<span class="token punctuation">.</span>colab <span class="token keyword">import</span> drivedrive<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'/content/drive'</span><span class="token punctuation">)</span></code></pre><h2 id="2-原-Baseline-实现"><a href="#2-原-Baseline-实现" class="headerlink" title="2. (原)Baseline 实现"></a>2. (原)Baseline 实现</h2><p>我们的baseline实现是基于Github上的一个源码，如下：</p><blockquote><p>原baseline实现源码：<a href="https://github.com/keras-team/keras-io/blob/master/examples/rl/deep_q_network_breakout.py">https://github.com/keras-team/keras-io/blob/master/examples/rl/deep_q_network_breakout.py</a></p></blockquote><p>不过他们的方法效率比较低下，甚至有的地方还有点错误，当然，你还是可以运行它们，但是如上文我所说，Colab虚拟机在12小时后就die了，超时后我们的训练模型就无法存在Google Drive上，因此我们后续会对此做出改进以提升效率。</p><p>OK，我们先去上处链接，copy整个源码，作为原baseline实现，下一节我们对它进行改进。</p><ul><li><p>原baseline实现使用<strong>OpenAI Gym</strong>来创建Atari Breakout环境。 如果你不熟悉<strong>OpenAI Gym</strong>，请阅读此介绍(<a href="http://gym.openai.com/docs/)%E3%80%82">http://gym.openai.com/docs/)。</a> 你应该熟悉主要的OpenAI Gym环境方法，例如<code>reset</code>和<code>step</code>。</p></li><li><p>原baseline实现还使用了多个<strong>Gym wrappers</strong>来转换原始的Atari Breakout环境。你可以在此处(<a href="https://github.com/openai/baselines/blob/master/baselines/common/atari_wrappers.py">https://github.com/openai/baselines/blob/master/baselines/common/atari_wrappers.py</a>) 找到有关<strong>Atari wrappers</strong>的更多信息。</p></li><li><p>原baseline实现还基于<strong>Keras</strong>，这是一个基于TensorFlow的用于人工神经网络的开源Python库。 </p></li></ul><h2 id="3-改进原baseline实现"><a href="#3-改进原baseline实现" class="headerlink" title="3. 改进原baseline实现"></a>3. 改进原baseline实现</h2><ul><li><p>原baseline实现使用名为<strong>Adam</strong>的优化器。 因此，我们的第一个任务是用调用<code>tf.keras.optimizers.RMSprop</code>创建的优化器替换由调用<code>keras.optimizers.Adam</code>创建的优化器。 我们使用<code>learning rate=0.0001</code>和<code>discounting factor(rho)=0.99</code>。</p></li><li><p>原baseline实现变量<code>epsilon random frames</code>来控制在采取贪婪操作之前应观察多少帧（状态）。 我们消除此变量，并将其从出现的条件测试(conditional test)中删除。</p></li><li><p>原baseline实现的<code>replay buffer</code>大小为100000，这将导致Google Colab出现内存问题。 所以我们将<code>replay buffer</code>的大小减小到10000。</p></li><li><p>原baseline实现将一直训练Deep Q-Network，直到在最后100个<code>episodes</code>中获得的平均<code>return</code>超过40。这将花费比虚拟机的最大生存期更长的时间。 所以，我们更改最外面的while循环，以便在观察到2000000 frames（状态）后中断训练。</p></li><li><p>原baseline实现仅在<code>replay buffer</code>大小大于<code>batch</code>大小之后，才绘制一个<code>batch</code>并每四个frames更新一次Deep Q-Network。 我们改为仅当<code>replay buffer</code>已满后，才绘制<code>batch</code>并每四个frames更新一次Deep Q-Network。</p></li><li><p>原baseline实现将最后100个<code>episodes</code>的<code>return</code>存储在称为<code>episode_reward_history</code>的列表中。 相反，我们应该改为存储每个<code>episode</code>的<code>return</code>。 变量<code>running_reward</code>仍应仅包含最后100个<code>episodes</code>的平均<code>return</code>。</p></li><li><p>原baseline实现错误地为<code>batch</code>中的每个<code>state</code>计算了<code>one-step return</code>。 尽管此实现适用于Atari Breakout，但不适用于其他的许多Atari游戏。 所以，我们在baseline实现中用下面所示的单个分配替换两个分配。</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 原Baseline实现</span>updated_q_values <span class="token operator">=</span> rewards_sample <span class="token operator">+</span> gamma <span class="token operator">*</span> tf<span class="token punctuation">.</span>reduce_max<span class="token punctuation">(</span>    future_rewards<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>updated_q_values <span class="token operator">=</span> updated_q_values <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> done_sample<span class="token punctuation">)</span> <span class="token operator">-</span> done_sample<span class="token comment" spellcheck="true"># 正确的实现</span>updated_q_values <span class="token operator">=</span> rewards_sample <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> done_sample<span class="token punctuation">)</span><span class="token operator">*</span>gamma<span class="token operator">*</span>tf<span class="token punctuation">.</span>reduce_max<span class="token punctuation">(</span>    future_rewards<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><ul><li>在training loop下一步，我们应该使用Keras将模型（卷积神经网络）保存到Google Drive文件夹（例如，<code>/content/drive/MyDrive/breakout/model</code>）。 我们还应该使用<code>NumPy</code>保存列表<code>episode reward history</code>，其中包含每个<code>training episode</code>的<code>return</code>。</li></ul><p>OK，下面是我们完整的改进后的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> baselines<span class="token punctuation">.</span>common<span class="token punctuation">.</span>atari_wrappers <span class="token keyword">import</span> make_atari<span class="token punctuation">,</span> wrap_deepmind<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow <span class="token keyword">import</span> keras<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras <span class="token keyword">import</span> layers<span class="token comment" spellcheck="true"># Configuration paramaters for the whole setup</span>seed <span class="token operator">=</span> <span class="token number">42</span>gamma <span class="token operator">=</span> <span class="token number">0.99</span>  <span class="token comment" spellcheck="true"># Discount factor for past rewards</span>epsilon <span class="token operator">=</span> <span class="token number">1.0</span>  <span class="token comment" spellcheck="true"># Epsilon greedy parameter</span>epsilon_min <span class="token operator">=</span> <span class="token number">0.1</span>  <span class="token comment" spellcheck="true"># Minimum epsilon greedy parameter</span>epsilon_max <span class="token operator">=</span> <span class="token number">1.0</span>  <span class="token comment" spellcheck="true"># Maximum epsilon greedy parameter</span>epsilon_interval <span class="token operator">=</span> <span class="token punctuation">(</span>    epsilon_max <span class="token operator">-</span> epsilon_min<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Rate at which to reduce chance of random action being taken</span>batch_size <span class="token operator">=</span> <span class="token number">32</span>  <span class="token comment" spellcheck="true"># Size of batch taken from replay buffer</span>max_steps_per_episode <span class="token operator">=</span> <span class="token number">10000</span><span class="token comment" spellcheck="true"># Use the Baseline Atari environment because of Deepmind helper functions</span>env <span class="token operator">=</span> make_atari<span class="token punctuation">(</span><span class="token string">"BreakoutNoFrameskip-v4"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Warp the frames, grey scale, stake four frame and scale to smaller ratio</span>env <span class="token operator">=</span> wrap_deepmind<span class="token punctuation">(</span>env<span class="token punctuation">,</span> frame_stack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> scale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""## Implement the Deep Q-NetworkThis network learns an approximation of the Q-table, which is a mapping betweenthe states and actions that an agent will take. For every state we'll have fouractions, that can be taken. The environment provides the state, and the actionis chosen by selecting the larger of the four Q-values predicted in the output layer."""</span>num_actions <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">def</span> <span class="token function">create_q_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Network defined by the Deepmind paper</span>    inputs <span class="token operator">=</span> layers<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Convolutions on the frames on the screen</span>    layer1 <span class="token operator">=</span> layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>    layer2 <span class="token operator">=</span> layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>layer1<span class="token punctuation">)</span>    layer3 <span class="token operator">=</span> layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>layer2<span class="token punctuation">)</span>    layer4 <span class="token operator">=</span> layers<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>layer3<span class="token punctuation">)</span>    layer5 <span class="token operator">=</span> layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>layer4<span class="token punctuation">)</span>    action <span class="token operator">=</span> layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>num_actions<span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"linear"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>layer5<span class="token punctuation">)</span>    <span class="token keyword">return</span> keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>inputs<span class="token punctuation">,</span> outputs<span class="token operator">=</span>action<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># The first model makes the predictions for Q-values which are used to</span><span class="token comment" spellcheck="true"># make a action.</span>model <span class="token operator">=</span> create_q_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Build a target model for the prediction of future rewards.</span><span class="token comment" spellcheck="true"># The weights of a target model get updated every 10000 steps thus when the</span><span class="token comment" spellcheck="true"># loss between the Q-values is calculated the target Q-value is stable.</span>model_target <span class="token operator">=</span> create_q_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""## Train"""</span><span class="token comment" spellcheck="true"># In the Deepmind paper they use RMSProp however then Adam optimizer</span><span class="token comment" spellcheck="true"># improves training time</span>optimizer <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>optimizers<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">,</span> rho<span class="token operator">=</span><span class="token number">0.99</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Experience replay buffers</span>action_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>state_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>state_next_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>rewards_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>done_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>episode_reward_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>running_reward <span class="token operator">=</span> <span class="token number">0</span>episode_count <span class="token operator">=</span> <span class="token number">0</span>frame_count <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># Number of frames to take random action and observe output</span><span class="token comment" spellcheck="true"># Number of frames for exploration</span>epsilon_greedy_frames <span class="token operator">=</span> <span class="token number">1000000.0</span><span class="token comment" spellcheck="true"># Maximum replay length</span><span class="token comment" spellcheck="true"># Note: The Deepmind paper suggests 1000000 however this causes memory issues</span>max_memory_length <span class="token operator">=</span> <span class="token number">10000</span><span class="token comment" spellcheck="true"># Train the model after 4 actions</span>update_after_actions <span class="token operator">=</span> <span class="token number">4</span><span class="token comment" spellcheck="true"># How often to update the target network</span>update_target_network <span class="token operator">=</span> <span class="token number">10000</span><span class="token comment" spellcheck="true"># Using huber loss for stability</span>loss_function <span class="token operator">=</span> keras<span class="token punctuation">.</span>losses<span class="token punctuation">.</span>Huber<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Run until solved</span>    state <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    episode_reward <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> timestep <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> max_steps_per_episode<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># env.render(); Adding this line would show the attempts</span>        <span class="token comment" spellcheck="true"># of the agent in a pop up window.</span>        frame_count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># Use epsilon-greedy for exploration</span>        <span class="token keyword">if</span> epsilon <span class="token operator">></span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># Take random action</span>            action <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>num_actions<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># Predict action Q-values</span>            <span class="token comment" spellcheck="true"># From environment state</span>            state_tensor <span class="token operator">=</span> tf<span class="token punctuation">.</span>convert_to_tensor<span class="token punctuation">(</span>state<span class="token punctuation">)</span>            state_tensor <span class="token operator">=</span> tf<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>state_tensor<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            action_probs <span class="token operator">=</span> model<span class="token punctuation">(</span>state_tensor<span class="token punctuation">,</span> training<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Take best action</span>            action <span class="token operator">=</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>action_probs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Decay probability of taking random action</span>        epsilon <span class="token operator">-=</span> epsilon_interval <span class="token operator">/</span> epsilon_greedy_frames        epsilon <span class="token operator">=</span> max<span class="token punctuation">(</span>epsilon<span class="token punctuation">,</span> epsilon_min<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Apply the sampled action in our environment</span>        state_next<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>        state_next <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>state_next<span class="token punctuation">)</span>        episode_reward <span class="token operator">+=</span> reward        <span class="token comment" spellcheck="true"># Save actions and states in replay buffer</span>        action_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>action<span class="token punctuation">)</span>        state_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>state<span class="token punctuation">)</span>        state_next_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>state_next<span class="token punctuation">)</span>        done_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>done<span class="token punctuation">)</span>        rewards_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>reward<span class="token punctuation">)</span>        state <span class="token operator">=</span> state_next        <span class="token comment" spellcheck="true"># Update every fourth frame and once batch size is over 32</span>        <span class="token keyword">if</span> frame_count <span class="token operator">%</span> update_after_actions <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># Get indices of samples for replay buffers</span>            indices <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>done_history<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Using list comprehension to sample from replay buffer</span>            state_sample <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>state_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> indices<span class="token punctuation">]</span><span class="token punctuation">)</span>            state_next_sample <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>state_next_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> indices<span class="token punctuation">]</span><span class="token punctuation">)</span>            rewards_sample <span class="token operator">=</span> <span class="token punctuation">[</span>rewards_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> indices<span class="token punctuation">]</span>            action_sample <span class="token operator">=</span> <span class="token punctuation">[</span>action_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> indices<span class="token punctuation">]</span>            done_sample <span class="token operator">=</span> tf<span class="token punctuation">.</span>convert_to_tensor<span class="token punctuation">(</span>                <span class="token punctuation">[</span>float<span class="token punctuation">(</span>done_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> indices<span class="token punctuation">]</span>            <span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Build the updated Q-values for the sampled future states</span>            <span class="token comment" spellcheck="true"># Use the target model for stability</span>            future_rewards <span class="token operator">=</span> model_target<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>state_next_sample<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Q value = reward + discount factor * expected future reward</span>            updated_q_values <span class="token operator">=</span> rewards_sample <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> done_sample <span class="token punctuation">)</span><span class="token operator">*</span>gamma<span class="token operator">*</span>tf<span class="token punctuation">.</span>reduce_max<span class="token punctuation">(</span>                future_rewards<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span>            <span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># If final frame set the last value to -1</span>            <span class="token comment" spellcheck="true"># Create a mask so we only calculate loss on the updated Q-values</span>            masks <span class="token operator">=</span> tf<span class="token punctuation">.</span>one_hot<span class="token punctuation">(</span>action_sample<span class="token punctuation">,</span> num_actions<span class="token punctuation">)</span>            <span class="token keyword">with</span> tf<span class="token punctuation">.</span>GradientTape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tape<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># Train the model on the states and updated Q-values</span>                q_values <span class="token operator">=</span> model<span class="token punctuation">(</span>state_sample<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># Apply the masks to the Q-values to get the Q-value for action taken</span>                q_action <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>q_values<span class="token punctuation">,</span> masks<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># Calculate loss between new Q-value and old Q-value</span>                loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>updated_q_values<span class="token punctuation">,</span> q_action<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Backpropagation</span>            grads <span class="token operator">=</span> tape<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> model<span class="token punctuation">.</span>trainable_variables<span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>apply_gradients<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>grads<span class="token punctuation">,</span> model<span class="token punctuation">.</span>trainable_variables<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> frame_count <span class="token operator">%</span> update_target_network <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># update the the target network with new weights</span>            model_target<span class="token punctuation">.</span>set_weights<span class="token punctuation">(</span>model<span class="token punctuation">.</span>get_weights<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Log details</span>            template <span class="token operator">=</span> <span class="token string">"running reward: &amp;#123;:.2f&amp;#125; at episode &amp;#123;&amp;#125;, frame count &amp;#123;&amp;#125;"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span>format<span class="token punctuation">(</span>running_reward<span class="token punctuation">,</span> episode_count<span class="token punctuation">,</span> frame_count<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Limit the state and reward history</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>rewards_history<span class="token punctuation">)</span> <span class="token operator">></span> max_memory_length<span class="token punctuation">:</span>            <span class="token keyword">del</span> rewards_history<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">del</span> state_history<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">del</span> state_next_history<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">del</span> action_history<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">del</span> done_history<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> done<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token comment" spellcheck="true"># Update running reward to check condition for solving</span>    episode_reward_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>episode_reward<span class="token punctuation">)</span>    running_reward <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>episode_reward_history<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    episode_count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> running_reward <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Condition to consider the task solved</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Solved at episode &amp;#123;&amp;#125;!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>episode_count<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">if</span> frame_count <span class="token operator">></span> <span class="token number">2000000</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#if frame_count > 20:</span>      <span class="token keyword">break</span><span class="token comment" spellcheck="true"># 把训练好的模型保存在google drive上</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'/content/drive/MyDrive/breakout/model'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># numpy 存储</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>episode_reward_history<span class="token punctuation">)</span>np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'/content/drive/MyDrive/breakout/model/log.npy'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""## VisualizationsBefore any training:![Imgur](https://i.imgur.com/rRxXF4H.gif)In early stages of training:![Imgur](https://i.imgur.com/X8ghdpL.gif)In later stages of training:![Imgur](https://i.imgur.com/Z1K6qBQ.gif)"""</span></code></pre><h2 id="4-训练"><a href="#4-训练" class="headerlink" title="4. 训练"></a>4. 训练</h2><p>接下来，训练我们的2000000 frames的Deep Q-Network，这可能需要十多个小时。 最后100个<code>episodes</code>的平均<code>return</code>应该接近10。</p><blockquote><p><strong>Note</strong>：应该先通过仅对很少的frames进行Deep Q-Network训练来测试你的实现。 一旦你对自己的代码充满了信心后，就可以整夜训练你的Deep Q-Network啦！但是别忘了我最开始说的待机时间过长导致的限制问题。</p></blockquote><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p>为了测试我们训练后的Deep Q-Network，新建一个代码块。</p><ul><li><p>首先从我们的Google Drive加载经过训练的模型，接着，创建Atari Breakout环境，并使用与训练模型相同的<code>wrappers</code>。</p></li><li><p>我们需要使用<code>gym.wrappers.Monitor</code>来录制受过训练的agent与环境交互的视频。 </p></li><li><p>我们根据训练有素的Deep Q-Network使用greedy（而不是ε-greedy）策略记录互动的10个<code>episodes</code>。 </p></li></ul><blockquote><p><strong>Note</strong>：仅在调用<code>env.close</code>方法后，视频才会写入你的Google云端硬盘。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> google<span class="token punctuation">.</span>colab <span class="token keyword">import</span> drivedrive<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'/content/drive'</span><span class="token punctuation">)</span><span class="token keyword">from</span> baselines<span class="token punctuation">.</span>common<span class="token punctuation">.</span>atari_wrappers <span class="token keyword">import</span> make_atari<span class="token punctuation">,</span> wrap_deepmind<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow <span class="token keyword">import</span> keras<span class="token keyword">import</span> gymseed <span class="token operator">=</span> <span class="token number">42</span>model <span class="token operator">=</span> keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">'/content/drive/MyDrive/breakout/model'</span><span class="token punctuation">)</span>env <span class="token operator">=</span> make_atari<span class="token punctuation">(</span><span class="token string">'BreakoutNoFrameskip-v4'</span><span class="token punctuation">)</span>env <span class="token operator">=</span> wrap_deepmind<span class="token punctuation">(</span>env<span class="token punctuation">,</span> frame_stack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> scale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>wrappers<span class="token punctuation">.</span>Monitor<span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">'/content/drive/MyDrive/breakout/videos'</span><span class="token punctuation">,</span>               video_callable<span class="token operator">=</span><span class="token keyword">lambda</span> episode_id<span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>n_episodes <span class="token operator">=</span> <span class="token number">10</span>returns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_episodes<span class="token punctuation">)</span><span class="token punctuation">:</span>  ret <span class="token operator">=</span> <span class="token number">0</span>  state <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  done <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token keyword">while</span> <span class="token operator">not</span> done<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Predict action Q-values</span>    <span class="token comment" spellcheck="true"># From environment state</span>    state_tensor <span class="token operator">=</span> tf<span class="token punctuation">.</span>convert_to_tensor<span class="token punctuation">(</span>state<span class="token punctuation">)</span>    state_tensor <span class="token operator">=</span> tf<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>state_tensor<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    action_probs <span class="token operator">=</span> model<span class="token punctuation">(</span>state_tensor<span class="token punctuation">,</span> training<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Take best action</span>    action <span class="token operator">=</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>action_probs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Apply the sampled action in our environment</span>    state_next<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>    state_next <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>state_next<span class="token punctuation">)</span>    ret <span class="token operator">+=</span> reward    state <span class="token operator">=</span> state_next  returns<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>env<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Returns:_&amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>returns<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="6-思考"><a href="#6-思考" class="headerlink" title="6. 思考"></a>6. 思考</h2><ul><li><strong>在训练期间，为什么有必要按照ε-greedy策略而不是greedy策略（就Q而言）采取行动？</strong></li></ul><p>使用ε-greedy策略意味着在训练中选择一个动作时，会将其选择为Q值最高的动作或随机动作。 两者之间的选择是随机且基于epsilon值的，并且在训练过程中对epsilon进行退火。 在训练开始时，将采取许多随机动作，但是随着训练的进行，将采取q值最大的许多动作。 因此，具有ε值的ε-greedy策略可以消除过度拟合（记忆随机状态转换）或拟合不足的负面影响。</p><ul><li>**为什么原baseline实现错误地为<code>batch</code>中的每个<code>state</code>计算了<code>one-step return</code>？ **</li></ul><p>Q矩阵的更新公式：<br>$$<br>Q(state) = R(state) + Gamma * Max[Q(next state)]<br>$$<br>更新的Q值将用于训练Q(state)模型，其中<code>done_sample</code>包含一个<code>done(boolean)</code>数组，该数组指示是否需要重置环境<code>env.reset</code>。 done可以为<code>True</code>或<code>False</code>，因此<code>done_sample</code>只能等于1或0。</p><p>训练后，模型现在可以基于看不见的输入来预测输出。在模型上调用函数<code>model.predict()</code>时，模型将根据训练数据预测当前状态的奖励。</p><p>为了将Q-function更新为当前奖励和预期未来奖励的总和，最后，将没有未来奖励，所以此状态的值是此时获得的奖励的总和。因此，Q值更新将分两个步骤完成，并且可能不会适用于许多其他Atari游戏。</p><ul><li><strong>绘制存储在列表<code>episode_reward_history</code>中的平均<code>returns</code>。</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#from google.colab import drive</span><span class="token comment" spellcheck="true">#drive.mount('/content/drive')</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">#episode_reward_history = np.load('/content/drive/MyDrive/ai_games_assignment3/model/log.npy')</span>episode_reward_history <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'/content/log.npy'</span><span class="token punctuation">)</span>moving_avg <span class="token operator">=</span> np<span class="token punctuation">.</span>convolve<span class="token punctuation">(</span>episode_reward_history<span class="token punctuation">,</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'valid'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>moving_avg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> moving_avg<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"reward"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"episode"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E6%B7%B1%E5%BA%A6Q%E5%AD%A6%E4%B9%A0%E2%80%94Breakout%E6%B8%B8%E6%88%8F/%E5%B9%B3%E5%9D%87returns.png" alt="绘制结果"></p><p>我们可以看到，最后100个<code>episodes</code>的平均<code>return</code>是接近10的。</p>]]></content>
      
      
      <categories>
          
          <category> 项目-AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Deep Q-Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习算法—Frozen Lake游戏(二)</title>
      <link href="2020/12/10/frozen-lake-er/"/>
      <url>2020/12/10/frozen-lake-er/</url>
      
        <content type="html"><![CDATA[<p>本次我们将以解决问题的方式，来运行代码并理解。</p><p>我们上一章完成的代码结构，如下</p><table><thead><tr><th>Name</th><th>function</th></tr></thead><tbody><tr><td>Environment</td><td><code>p()</code>, <code>r()</code> in class <code>FrozenLake</code></td></tr><tr><td>Model-based algorithms</td><td><code>policy_evaluation()</code><br/><code>policy_improvement()</code><br/><code>policy_iteration()</code> <br/><code>value_iteration()</code></td></tr><tr><td>Tabular model-free algorithms</td><td><code>sarsa()</code><br/><code>q_learning()</code></td></tr><tr><td>Non-tabular model-free algorithms</td><td><code>linear_sarsa()</code><br/><code>linear_q_learning()</code></td></tr><tr><td>Main function</td><td><code>main()</code></td></tr></tbody></table><ul><li><p>所有算法都是根据<strong>semi-natural language</strong>算法实现的。<code>Sarsa</code>, <code>Q-learning</code>, <code>linear Sarsa</code>, <code>linear Q-learning</code>函数都包含一个可选参数<code>policy0</code>。 <code>policy0</code>是从value-iteration算法生成的最优策略，用于评估[<code>Sarsa</code>, <code>Q-learning</code>, <code>linear Sarsa</code>, <code>linear Q-learning</code>]中的agent是否已实现最优策略。 将<code>policy0</code>和<code>temp_policy</code>放入函数<code>policy_equal()</code>中进行上述评估。</p></li><li><p>代码中有一个名为<code>add_noise()</code>的函数，该函数会向一维<code>np.array</code>中的每个元素添加一个小的随机噪声，用于满足<strong>“break ties”</strong>的要求。 使用此功能后，相等values可能会有所不同，并且每个value都有相同的概率成为最大值，从而满足<strong>“在给定状态下最大化Q的动作之间随机break ties”</strong>的要求。</p></li><li><p>environment中的<strong>“slip”</strong>定义为在我们的环境中<strong>采取随机动作</strong>。 下表显示了当agent在环境边缘滑动时对<strong>“slip”</strong>的两种定义的表现 <strong>P(s’|s,a)</strong></p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E2%80%94Frozen%20Lake%E6%B8%B8%E6%88%8F/slip.png"></p><p>当agent滑到我们环境的边缘时，它将采用前一个<strong>P(s’|s,a)**，其中有1/4的可能性</strong>“保持状态不变”**。</p></li></ul><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><ul><li>**策略迭代需要多少迭代才能为big frozen lake找到最佳策略？ 价值迭代需要进行多少次迭代？哪种算法更快？ **</li></ul><p>由于“在给定状态下最大化Q的动作之间随机break ties”，因此迭代是随机的。</p><p>我们将policy iteration和value iteration都运行5次，并记录了“最佳策略所需的迭代”和“时间消耗”，如下表所示：</p><table><thead><tr><th>Times</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>Average</th></tr></thead><tbody><tr><td>policy iteration 迭代数</td><td>5</td><td>6</td><td>5</td><td>5</td><td>7</td><td>5.6</td></tr><tr><td>value iteration 迭代数</td><td>20</td><td>20</td><td>20</td><td>20</td><td>20</td><td>20</td></tr><tr><td>policy iteration 耗时</td><td>5.42s</td><td>7.16s</td><td>6.16s</td><td>5.46s</td><td>8.01s</td><td>6.44s</td></tr><tr><td>value iteration 耗时</td><td>3.59s</td><td>3.67s</td><td>3.61s</td><td>3.67s</td><td>3.68s</td><td>3.67s</td></tr></tbody></table><p>为了找到big frozen lake的最佳策略，policy iteration平均需要5.6次迭代，而value iteration需要20次迭代，所以policy iteration使用的迭代则要少得多。 但是，我们无法推断出policy iteration会更快，因为policy iteration需要6.44秒才能找到最优值，而value iteration平均需要3.67秒。</p><p><strong>Note</strong>：以上时间，是在我自己的计算机上使用PyCharm的运行时间，仅供参考。</p><p>policy iteration需要更少的迭代才能找到最佳策略。 但是，就单次迭代的时间消耗而言，policy iteration算法比value iteration算法花费的时间要多得多，因为policy iteration的单次迭代中有{policy evaluation, policy improvement}，并且“policy evaluation”非常耗时。 因此，总体而言，value iteration更快。</p><p>以下截图显示了policy iteration和value iteration算法的一些输出，其中“最佳策略所需的迭代”在顶部，而“时间消耗”（秒）在底部。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E2%80%94Frozen%20Lake%E6%B8%B8%E6%88%8F/%E4%B8%A4%E7%A7%8D%E8%BF%AD%E4%BB%A3.png"></p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><ul><li><p>**Sarsa要为small frozen lake找到最佳策略需要多少episodes？ Q-learning需要多少episodes？ **</p><p><strong>提示：可以使用policy evaluation将通过这些算法获得的每个策略的value与最佳策略的value进行比较</strong></p></li></ul><p>“提示”中的方法用于评估agent是否已达到最佳策略。 该方法的实现由代码中的<code>policy_equal()</code>函数实现。 在<code>main()</code>函数中，<code>eta</code>和<code>epsilon</code>参数都设置为0.5。</p><p>我们将设置Sarsa / Q-learning的参数为<code>max_episodes = 8000</code>和<code>max_episodes = 2000</code>，用于寻找small frozen lake的最佳策略，因为它们的动态<code>epsilons</code>和<code>etas</code>有所不同。</p><center>Table. max_episodes = 8000时，Sarsa / Q-learning的迭代数</center><table><thead><tr><th>Times</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>Average</th></tr></thead><tbody><tr><td>Sarsa 迭代数</td><td>544</td><td>549</td><td>481</td><td>1053</td><td>968</td><td>719</td></tr><tr><td>Q-learning 迭代数</td><td>513</td><td>505</td><td>632</td><td>2132</td><td>584</td><td>873.2</td></tr></tbody></table><p>当<code>max_episodes = 8000</code>时，Sarsa平均需要719次迭代才能获得最佳策略，而Q-learning平均需要873.2次迭代。 Sarsa似乎可以使用较少的迭代次数找到最佳策略。</p><center>Table. max_episodes = 2000时，Sarsa / Q-learning的迭代数</center><table><thead><tr><th>Times</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>Average</th></tr></thead><tbody><tr><td>Sarsa 迭代数</td><td>&gt;2000</td><td>568</td><td>&gt;2000</td><td>&gt;2000</td><td>485</td><td>527</td></tr><tr><td>Q-learning 迭代数</td><td>1333</td><td>650</td><td>&gt;2000</td><td>1196</td><td>709</td><td>972</td></tr></tbody></table><p><strong>Note</strong>：”&gt;2000” 表示代理未能在2000步内找到最佳策略，并且不参与最后平均迭代(Average)的计算。</p><p>当<code>max_episodes = 2000</code>时，Sarsa更有可能以局部最优策略结束，并且无法在2000步内找到全局最优值，而Q-learning则不太可能停留在局部最优值上。 考虑到成功找到最优策略的情况，Sarsa平均进行了527次迭代，而Q-learning平均进行了972次迭代。</p><p>结果表明，不同的动态<code>epsilons</code>和<code>etas</code>对学习过程有很大的影响。 另外，调整<code>epsilons</code>和<code>eta</code>是改善两种算法结果的一种可能方法。</p><p>下图3-4显示了一些输出，其中使用Q-learning或sarsa的agent成功找到了在最大episodes中的small frozen lake的最优策略。图中的policy和value矩阵是agent刚刚实现最优策略时的policy和价value矩阵。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E2%80%94Frozen%20Lake%E6%B8%B8%E6%88%8F/sarsa%E5%92%8Cq%E6%88%90%E5%8A%9F.png"></p><p>下图5-6显示了使用Q-learning或sarsa的agent未能找到在最大episodes中的small frozen lake的最优策略。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E2%80%94Frozen%20Lake%E6%B8%B8%E6%88%8F/sarsa%E5%92%8Cq%E5%A4%B1%E8%B4%A5.png"></p><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><ul><li><strong>在线性action-value函数逼近中，当状态<code>s</code>和动作<code>a</code>的每个可能组合由不同的特征向量φ(s，a)表示，其中除1以外的所有元素均为0时，如何解释参数向量<code>θ</code>的每个元素？ 解释为什么实现的tabular model-free强化学习算法是您实现的non-tabular model-free强化学习算法的特例</strong></li></ul><p>实际上，参数向量<code>θ</code>[i = 0〜3]的每个元素只是给定状态<code>s</code>和动作<code>a</code>的Q(s,a)(例如，<code>theta[i] (s,a) = Q(s,a)</code>)，编码器将state和action编码为二进制索引之类的功能。 编码的特征可以视为参数矢量元素的索引，对于<code>[0,0,1,0,0].dot(array)</code>，则等效于于<code>array [2]</code>。</p><p>因此，我们实现的线性action-value函数逼近的本质与tabular-based强化学习的本质相同，唯一的不同是索引方法，前者使用二进制索引(<code>[0,0,1,0,0].dot(array)</code>)，而后者使用直接索引(<code>array [2]</code>)。</p><p>如果专门设计一种tabular-free的强化学习方法，即状态编码器将state编码为state的二进制索引，并且将线性近似模型的参数向量设计为具有与tabular相同的功能（存储Q(s,a)），则该方法可以视为tabular-based的方法。</p><h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><ul><li><strong>通过调整Sarsa和Q-learning控制的参数（maximum number of episodes, learning rate, and exploration factor），尝试为big frozen lake找到最佳策略。 必须使用policy evaluation来确认生成的策略是最佳的。 即使失败，也要描述自己的过程。</strong></li></ul><h3 id="1-Sarsa"><a href="#1-Sarsa" class="headerlink" title="1. Sarsa"></a>1. Sarsa</h3><p>设置了**超参数(hyper-parameter)**的Sarsa：{max_episodes = 80000，eta = 0.4，epsilon = 0.99}∪{policy evaluation per 200 episodes}用于big frozen lake的最佳策略。 运行约2天后，Sarsa未能找到最佳策略。图7-8显示了Sarsa在80000次episodes后发现的策略以及value_iteration生成的最佳策略以进行比较。图9-10显示了Sarsa发现的策略与最佳策略之间的差异的更多细节。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E2%80%94Frozen%20Lake%E6%B8%B8%E6%88%8F/%E5%9B%BE78.png"></p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E2%80%94Frozen%20Lake%E6%B8%B8%E6%88%8F/%E5%9B%BE910.png"></p><p>根据上述实验，我们发现根据Sarsa的输出，无法找到states（从起点(0,0)开始的random actions和epsilon-greedy actions几乎不可能实现/覆盖它们）的最佳策略。 我认为该算法旨在从起点找到最优策略，而不是为每个状态都找到最优策略，因此处理从起点不可能实现的states的效率低下。 找到每个状态的最佳策略的一种可能方法是让agent从随机状态开始，而不是从起点唯一开始。</p><h3 id="2-Q-learning"><a href="#2-Q-learning" class="headerlink" title="2. Q-learning"></a>2. Q-learning</h3><p>设置了**超参数(hyper-parameter)**的Q-learning：{max_episodes = 80000，eta = 0.4，epsilon = 0.99}∪{policy evaluation per 200 episodes}用于big frozen lake的最佳策略。图11-12显示了在80000次episodes后通过Q-learning发现的策略以及由value_iteration生成的最优策略进行比较。图13-14显示了有关通过Q-learning发现的策略与最优策略之间的差异的更多细节。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E2%80%94Frozen%20Lake%E6%B8%B8%E6%88%8F/%E5%9B%BE1112.png"></p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E2%80%94Frozen%20Lake%E6%B8%B8%E6%88%8F/%E5%9B%BE1314.png"></p><p>根据Q-learning的结果，Q-learning还存在关于不太可能访问的state的policy问题，但问题似乎不比Sarsa严重。 与Sarsa相比，Q-learning与value iteration更相似。</p><p>但是，对于经常访问的state（图的右上角），Q-learning也未能找到最佳策略，该状态具有两个具有相似Q(s,a)的动作，而相关的next_state的值比较（参见粉红色箭头） 与最优的相同。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>尽管可以将经常访问状态的Q-learning策略视为等于最佳策略（每个策略评估的<code>np.max(np.abs(value1-value2))&lt;2*theta</code> 都有误差：<strong>theta</strong>）， Q-learning的policy和value不相符，是一个问题。 但这不是由于我们的代码错误所致，因为<strong>状态的更新与相关状态的更新之间存在延迟</strong>。 这可能是由于random factor，以及学习率和epsilon的不合适所致。 可以通过调整学习率和epsilon或使用Q-softmax生成动作来解决。</p>]]></content>
      
      
      <categories>
          
          <category> 项目-AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Reinforcement learning </tag>
            
            <tag> Sarsa </tag>
            
            <tag> Q-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习算法—Frozen Lake游戏(一)</title>
      <link href="2020/12/09/frozen-lake-yi/"/>
      <url>2020/12/09/frozen-lake-yi/</url>
      
        <content type="html"><![CDATA[<p>在本此项目中，您将学习如何实现各种强化学习算法，以解决frozen lake环境的策略问题。 </p><p>共分为2个博客，本次先和我一起coding，下一部分我们将对实验结果进行深入分析。</p><h3 id="Tools："><a href="#Tools：" class="headerlink" title="Tools："></a>Tools：</h3><p>PyCharm（python 3.8）</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h2><p>frozen lake环境有两个主要变体：small frozen lake (左图)和big frozen lake (右图)。 </p><p>在这两种情况下，正方形网格中的每个图块都对应一个状态。 还有一个额外的“吸收状态“ (absorbing state)，这个一会介绍。 </p><p>共有四种类型的图块 (tile)：</p><ul><li>start (灰色)</li><li>frozen lake (浅蓝色)</li><li>hole (深蓝色)</li><li>goal (白色)</li></ul><p>该agent具有四个action，分别对应于向上，向左，向下或向右移动一格。 但是，概率为0.1时，环境会忽略所需的方向，并且agent会滑动（即，向随机方向移动一格）。 导致agent移动到网格外部的动作将使状态保持不变。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E2%80%94Frozen%20Lake%E6%B8%B8%E6%88%8F/%E5%86%B0%E5%86%BB%E6%B9%96.png"></p><p>agent对目标采取行动后将获得+1奖励。 在其他所有情况下，agent都将获得零奖励。 请注意，agent进入目标不会获得奖励（掉进hole里也不会获得负数奖励）。 在对goal或hole采取行动后，agent会进入“吸收状态“ (absorbing state)。 在吸收状态下采取的每个动作都会导致吸收状态，这也不会提供奖励。 假设discount系数为γ= 0.9。</p><p>出于model-free强化学习（或interactive testing）的目的，agent可以与frozen lake互动一定数量的time steps，该time steps等于图块 (tile)的数量。<br>OK，首先，我们的任务是实现frozen lake的environment：</p><h3 id="class-EnvironmentModel"><a href="#class-EnvironmentModel" class="headerlink" title="class EnvironmentModel"></a>class EnvironmentModel</h3><p><code>class EnvironmentModel</code>表示环境的模型。此类的<code>constructor</code>接收多个states，多个actions以及一个控制伪随机数生成器的seed。它的子类必须实现两个方法：<code>p</code>和<code>r</code>。</p><ul><li><p><code>p</code>返回给定动作从状态转换到下一个状态的概率。</p></li><li><p><code>r</code>在给定动作从状态转换到下一个状态时返回预期的奖励。</p></li><li><p><code>draw</code>接收一对状态和动作，并返回根据p绘制的状态以及相应的预期奖励。</p></li></ul><p><strong>Note</strong>：状态和动作由从0开始的整数表示。强烈建议您遵循相同的规则，因为这将极大地促进强化学习算法的实施。必要时，您可以使用Python dictionary（或等效的数据结构）将整数映射（从和映射到更方便的表示形式）。请注意，通常，agent可能会收到由环境按概率得出的reward，此简化实现中不支持这种reward。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> contextlib<span class="token keyword">import</span> timef_evaluation<span class="token operator">=</span><span class="token number">20</span><span class="token comment" spellcheck="true"># Configures numpy print options</span>@contextlib<span class="token punctuation">.</span>contextmanager<span class="token keyword">def</span> <span class="token function">_printoptions</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    original <span class="token operator">=</span> np<span class="token punctuation">.</span>get_printoptions<span class="token punctuation">(</span><span class="token punctuation">)</span>    np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>         np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span><span class="token operator">**</span>original<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">EnvironmentModel</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_states<span class="token punctuation">,</span> n_actions<span class="token punctuation">,</span> seed<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>n_states <span class="token operator">=</span> n_states        self<span class="token punctuation">.</span>n_actions <span class="token operator">=</span> n_actions        self<span class="token punctuation">.</span>random_state <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">r</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>p<span class="token punctuation">(</span>ns<span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token keyword">for</span> ns <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#print(p)</span>        next_state <span class="token operator">=</span> self<span class="token punctuation">.</span>random_state<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_states<span class="token punctuation">,</span> p<span class="token operator">=</span>p<span class="token punctuation">)</span>        reward <span class="token operator">=</span> self<span class="token punctuation">.</span>r<span class="token punctuation">(</span>next_state<span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">)</span>        <span class="token keyword">return</span> next_state<span class="token punctuation">,</span> reward</code></pre><h3 id="class-Environment"><a href="#class-Environment" class="headerlink" title="class Environment"></a>class Environment</h3><p><code>class Environment</code>表示一个交互式环境，并继承自EnvironmentModel。此类的<code>constructor</code>接收多个states，多个actions，用于交互的最大步骤数，初始状态上的概率分布以及控制伪随机数生成器的种子。它的子类必须实现两种方法：<code>p</code>和<code>r</code>，它们已经在上文进行了解释。该类有两个新方法：<code>reset</code>和<code>step</code>。</p><ul><li><code>reset</code>通过将时间步数设置为零并根据初始状态上的概率分布绘制状态来重新启动代理与环境之间的交互。该状态由类存储。</li><li><code>step</code>接收动作，并返回根据p绘制的下一个状态，相应的预期奖励和标记变量flag。新状态由类存储。此方法还跟踪已执行了多少步骤。一旦步数达到或超过预定义的最大步数，标记变量flag将指示交互应结束。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Environment</span><span class="token punctuation">(</span>EnvironmentModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_states<span class="token punctuation">,</span> n_actions<span class="token punctuation">,</span> max_steps<span class="token punctuation">,</span> pi<span class="token punctuation">,</span> seed<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        EnvironmentModel<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_states<span class="token punctuation">,</span> n_actions<span class="token punctuation">,</span> seed<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>random_state <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>max_steps <span class="token operator">=</span> max_steps        self<span class="token punctuation">.</span>pi <span class="token operator">=</span> pi        <span class="token keyword">if</span> self<span class="token punctuation">.</span>pi <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pi <span class="token operator">=</span> np<span class="token punctuation">.</span>full<span class="token punctuation">(</span>n_states<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span>n_states<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>n_steps <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>state <span class="token operator">=</span> self<span class="token punctuation">.</span>random_state<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_states<span class="token punctuation">,</span> p<span class="token operator">=</span>self<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>state    <span class="token keyword">def</span> <span class="token function">step</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> action <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> action <span class="token operator">>=</span> self<span class="token punctuation">.</span>n_actions<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Invalid action.'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>n_steps <span class="token operator">+=</span> <span class="token number">1</span>        done <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_steps <span class="token operator">>=</span> self<span class="token punctuation">.</span>max_steps<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">,</span> reward <span class="token operator">=</span> self<span class="token punctuation">.</span>draw<span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> policy<span class="token operator">=</span>None<span class="token punctuation">,</span> value<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="class-FrozenLake"><a href="#class-FrozenLake" class="headerlink" title="class FrozenLake"></a>class FrozenLake</h3><p><code>class FrozenLake</code>表示frozen lake环境。 我们的任务是实现此类的方法<code>p</code>和<code>r</code>。 此类的<code>constructor</code>接收一个矩阵（该矩阵表示lake），agent在任何给定时间步长处滑动的概率，最大交互步数以及控制伪随机数生成器的seed。 此类重写了方法<code>step</code>，以指示相互作用也应在达到吸收状态时结束。 方法<code>render</code>能够呈现环境状态或一对policy和value函数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FrozenLake</span><span class="token punctuation">(</span>Environment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lake<span class="token punctuation">,</span> slip<span class="token punctuation">,</span> max_steps<span class="token punctuation">,</span> seed<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""      lake: A matrix that represents the lake. For example:       lake =[['&amp;', '.', '.', '.'],              ['.', '#', '.', '#'],              ['.', '.', '.', '#'],              ['#', '.', '.', '$']]      slip: The probability that the agent will slip      max_steps: The maximum number of time steps in an episode      seed: A seed to control the random number generator (optional)      """</span>        <span class="token comment" spellcheck="true"># start (&amp;), frozen (.), hole (#), goal ($)</span>        <span class="token keyword">if</span> seed <span class="token keyword">is</span> None<span class="token punctuation">:</span>            seed<span class="token operator">=</span><span class="token number">0</span>        self<span class="token punctuation">.</span>random_state <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lake <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>lake<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>size<span class="token operator">=</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lake<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lake_flat <span class="token operator">=</span> self<span class="token punctuation">.</span>lake<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>slip <span class="token operator">=</span> slip        n_states <span class="token operator">=</span> self<span class="token punctuation">.</span>lake<span class="token punctuation">.</span>size<span class="token operator">+</span><span class="token number">1</span>        n_actions <span class="token operator">=</span> <span class="token number">4</span>        pi <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n_states<span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span>        pi<span class="token punctuation">[</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lake_flat <span class="token operator">==</span> <span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>        Environment<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_states<span class="token punctuation">,</span> n_actions<span class="token punctuation">,</span> max_steps<span class="token punctuation">,</span> pi<span class="token operator">=</span>pi<span class="token punctuation">,</span> seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>absorbing_state <span class="token operator">=</span> n_states <span class="token operator">-</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>absorbing_states<span class="token operator">=</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>lake_flat<span class="token operator">==</span><span class="token string">'$'</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>lake_flat<span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">##states that will lead to the absorb_state in next step</span>    <span class="token keyword">def</span> <span class="token function">step</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>        state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done <span class="token operator">=</span> Environment<span class="token punctuation">.</span>step<span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">)</span>        done <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> self<span class="token punctuation">.</span>absorbing_state<span class="token punctuation">)</span> <span class="token operator">or</span> done        <span class="token keyword">return</span> state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done    <span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> state <span class="token keyword">in</span> self<span class="token punctuation">.</span>absorbing_states<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">or</span> state<span class="token operator">==</span>self<span class="token punctuation">.</span>absorbing_state<span class="token punctuation">:</span>            <span class="token keyword">if</span> next_state<span class="token operator">==</span>self<span class="token punctuation">.</span>absorbing_state<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1.0</span>            <span class="token keyword">else</span> <span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0.0</span>        idx1<span class="token operator">=</span>int<span class="token punctuation">(</span>state<span class="token operator">/</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span>        idx2<span class="token operator">=</span>int<span class="token punctuation">(</span>state<span class="token operator">%</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span>        states<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>        pos<span class="token operator">=</span>self<span class="token punctuation">.</span>slip<span class="token operator">/</span>self<span class="token punctuation">.</span>n_actions        <span class="token keyword">try</span><span class="token punctuation">:</span>            i<span class="token operator">=</span>self<span class="token punctuation">.</span>lake<span class="token punctuation">[</span>idx1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>idx2<span class="token punctuation">]</span>            <span class="token keyword">if</span> action<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span>self<span class="token punctuation">.</span>slip<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos            <span class="token keyword">try</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span><span class="token punctuation">(</span>idx1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>self<span class="token punctuation">.</span>size<span class="token operator">+</span>idx2<span class="token punctuation">]</span><span class="token operator">+=</span>pos0            <span class="token keyword">except</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span><span class="token punctuation">(</span>idx1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> idx2<span class="token punctuation">]</span> <span class="token operator">=</span> pos0        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> action<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span>self<span class="token punctuation">.</span>slip<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos            <span class="token keyword">try</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token operator">+=</span>pos0            <span class="token keyword">except</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> pos0        <span class="token keyword">try</span><span class="token punctuation">:</span>            i<span class="token operator">=</span>self<span class="token punctuation">.</span>lake<span class="token punctuation">[</span>idx1<span class="token number">-1</span><span class="token punctuation">,</span>idx2<span class="token punctuation">]</span>            <span class="token keyword">if</span> idx1<span class="token number">-1</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> NotImplementedError            <span class="token keyword">if</span> action<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span>self<span class="token punctuation">.</span>slip<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos            <span class="token keyword">try</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span><span class="token punctuation">(</span>idx1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>self<span class="token punctuation">.</span>size<span class="token operator">+</span>idx2<span class="token punctuation">]</span><span class="token operator">+=</span>pos0            <span class="token keyword">except</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span><span class="token punctuation">(</span>idx1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> idx2<span class="token punctuation">]</span> <span class="token operator">=</span> pos0        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> action<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span>self<span class="token punctuation">.</span>slip<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos            <span class="token keyword">try</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token operator">+=</span>pos0            <span class="token keyword">except</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> pos0        <span class="token keyword">try</span><span class="token punctuation">:</span>            i <span class="token operator">=</span> self<span class="token punctuation">.</span>lake<span class="token punctuation">[</span>idx1<span class="token punctuation">,</span> idx2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                pos0 <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>slip<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos            <span class="token keyword">try</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>idx1 <span class="token operator">*</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> idx2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> pos0            <span class="token keyword">except</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>idx1<span class="token operator">*</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> idx2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pos0        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                pos0 <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>slip<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos            <span class="token keyword">try</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">+=</span> pos0            <span class="token keyword">except</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> pos0        <span class="token keyword">try</span><span class="token punctuation">:</span>            i <span class="token operator">=</span> self<span class="token punctuation">.</span>lake<span class="token punctuation">[</span>idx1<span class="token punctuation">,</span> idx2<span class="token number">-1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> idx2 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> NotImplementedError            <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                pos0 <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>slip<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos            <span class="token keyword">try</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>idx1 <span class="token operator">*</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> idx2<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> pos0            <span class="token keyword">except</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>idx1<span class="token operator">*</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> idx2<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pos0        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> action <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                pos0 <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>slip<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pos0<span class="token operator">=</span>pos            <span class="token keyword">try</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">+=</span> pos0            <span class="token keyword">except</span><span class="token punctuation">:</span>                states<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> pos0        <span class="token keyword">if</span> next_state <span class="token keyword">in</span> states<span class="token punctuation">:</span>            <span class="token keyword">return</span> states<span class="token punctuation">[</span>next_state<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0.0</span>    <span class="token keyword">def</span> <span class="token function">r</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next_state<span class="token operator">==</span>self<span class="token punctuation">.</span>absorbing_state<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>state<span class="token operator">==</span>self<span class="token punctuation">.</span>absorbing_state<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1.0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0.0</span>    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> policy<span class="token operator">=</span>None<span class="token punctuation">,</span> value<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> policy <span class="token keyword">is</span> None<span class="token punctuation">:</span>            lake <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lake_flat<span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>state <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>absorbing_state<span class="token punctuation">:</span>                lake<span class="token punctuation">[</span>self<span class="token punctuation">.</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'@'</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>lake<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lake<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># UTF-8 arrows look nicer, but cannot be used in LaTeX</span>            <span class="token comment" spellcheck="true"># https://www.w3schools.com/charsets/ref_utf_arrows.asp</span>            actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Lake:'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>lake<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Policy:'</span><span class="token punctuation">)</span>            policy <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>actions<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> policy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>policy<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lake<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Value:'</span><span class="token punctuation">)</span>            <span class="token keyword">with</span> _printoptions<span class="token punctuation">(</span>precision<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> suppress<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lake<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="function-play"><a href="#function-play" class="headerlink" title="function play"></a>function play</h3><p>在我们继续下一个步骤之前，可以使用<code>function play</code>来测试环境的实现。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">:</span>    actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#relevant_actions = ['v', '^', '>', '&lt;']</span>    state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>    done <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">while</span> <span class="token operator">not</span> done<span class="token punctuation">:</span>        c <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'\nMove: '</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> c <span class="token operator">not</span> <span class="token keyword">in</span> actions<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Invalid action'</span><span class="token punctuation">)</span>        state<span class="token punctuation">,</span> r<span class="token punctuation">,</span> done <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>actions<span class="token punctuation">.</span>index<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>        env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Reward: &amp;#123;0&amp;#125;.'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="2-Tabular-model-based-强化学习"><a href="#2-Tabular-model-based-强化学习" class="headerlink" title="2. Tabular model-based 强化学习"></a>2. Tabular model-based 强化学习</h2><p>OK，我们接下来要实现<strong>policy evaluation</strong>, <strong>policy improvement</strong>, <strong>policy iteration</strong> 和 <strong>value iteration</strong>。</p><h3 id="function-policy-evaluation"><a href="#function-policy-evaluation" class="headerlink" title="function policy_evaluation"></a>function policy_evaluation</h3><p><code>function policy_evaluation</code>接收environment model，确定性policy，discount因子，公差参数和最大迭代次数。 确定性policy可以由一个数组表示，该数组包含为每个状态规定的操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">policy_evaluation</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> policy<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> max_iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Iterate until the max iteration</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>        delta <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span><span class="token punctuation">:</span>            v <span class="token operator">=</span> value<span class="token punctuation">[</span>s<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># Computing the current value for policy evaluation</span>            value<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">(</span>                <span class="token punctuation">[</span>                    env<span class="token punctuation">.</span>p<span class="token punctuation">(</span>next_s<span class="token punctuation">,</span> s<span class="token punctuation">,</span> policy<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>r<span class="token punctuation">(</span>next_s<span class="token punctuation">,</span> s<span class="token punctuation">,</span> policy<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> gamma <span class="token operator">*</span> value<span class="token punctuation">[</span>next_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> next_s <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span>                <span class="token punctuation">]</span>            <span class="token punctuation">)</span>            delta <span class="token operator">=</span> max<span class="token punctuation">(</span>delta<span class="token punctuation">,</span> abs<span class="token punctuation">(</span>v <span class="token operator">-</span> value<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># difference to check convergence</span>        <span class="token comment" spellcheck="true"># Breaks when policy converges</span>        <span class="token keyword">if</span> delta <span class="token operator">&lt;</span> theta<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> value</code></pre><h3 id="function-policy-improvement"><a href="#function-policy-improvement" class="headerlink" title="function policy_improvement"></a>function policy_improvement</h3><p><code>function policy_improvement</code>接收environment model，待改进policy的value函数以及discount因子。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">policy_improvement</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> value<span class="token punctuation">,</span> gamma<span class="token punctuation">)</span><span class="token punctuation">:</span>    policy <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">,</span> dtype<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token operator">=</span><span class="token punctuation">[</span>            sum<span class="token punctuation">(</span>                    <span class="token punctuation">[</span>                        env<span class="token punctuation">.</span>p<span class="token punctuation">(</span>next_s<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">*</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>r<span class="token punctuation">(</span>next_s<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> gamma <span class="token operator">*</span> value<span class="token punctuation">[</span>next_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">for</span> next_s <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">)</span>                <span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span>        <span class="token punctuation">]</span>        policy<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>add_noise<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> policy</code></pre><h3 id="function-policy-iteration"><a href="#function-policy-iteration" class="headerlink" title="function policy_iteration"></a>function policy_iteration</h3><p><code>function policy_iteration</code>接收environment model，discount因子，公差参数，最大迭代次数和（可选）初始policy。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">policy_iteration</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> max_iterations<span class="token punctuation">,</span> policy<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> policy <span class="token keyword">is</span> None<span class="token punctuation">:</span>        policy <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">,</span> dtype<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        policy <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>policy<span class="token punctuation">,</span> dtype<span class="token operator">=</span>int<span class="token punctuation">)</span>    value<span class="token operator">=</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span>    <span class="token keyword">for</span> iteration <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>        policy_initial <span class="token operator">=</span> policy        value_initial<span class="token operator">=</span>value        value <span class="token operator">=</span> policy_evaluation<span class="token punctuation">(</span>env<span class="token punctuation">,</span> policy<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> max_iterations<span class="token punctuation">)</span>        policy <span class="token operator">=</span> policy_improvement<span class="token punctuation">(</span>env<span class="token punctuation">,</span> value<span class="token punctuation">,</span> gamma<span class="token punctuation">)</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>array_equal<span class="token punctuation">(</span>policy_initial<span class="token punctuation">,</span> policy<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">## policy equal</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"policy iteration achieve optima in iteration: "</span><span class="token punctuation">,</span>iteration<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>value_initial<span class="token operator">-</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>theta<span class="token punctuation">:</span><span class="token comment" spellcheck="true">## value equal</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"policy iteration achieve optima in iteration: "</span><span class="token punctuation">,</span> iteration<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> policy<span class="token punctuation">,</span> value</code></pre><h3 id="function-value-iteration"><a href="#function-value-iteration" class="headerlink" title="function value_iteration"></a>function value_iteration</h3><p><code>function value_iteration</code>接收environment model，discount因子，公差参数，最大迭代次数以及（可选）初始value函数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">value_iteration</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> max_iterations<span class="token punctuation">,</span> value<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> value <span class="token keyword">is</span> None<span class="token punctuation">:</span>        value <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>value<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float<span class="token punctuation">)</span>    <span class="token keyword">for</span> iteration <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>        delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span><span class="token punctuation">:</span>            v <span class="token operator">=</span> value<span class="token punctuation">[</span>s<span class="token punctuation">]</span>            value<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token punctuation">[</span>sum<span class="token punctuation">(</span>                <span class="token punctuation">[</span>env<span class="token punctuation">.</span>p<span class="token punctuation">(</span>next_s<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span>r<span class="token punctuation">(</span>next_s<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> gamma <span class="token operator">*</span> value<span class="token punctuation">[</span>next_s<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> next_s <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            delta <span class="token operator">=</span> max<span class="token punctuation">(</span>delta<span class="token punctuation">,</span> np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>v <span class="token operator">-</span> value<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> delta <span class="token operator">&lt;</span> theta<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"value iteration achieve optima in iteration: "</span><span class="token punctuation">,</span>iteration<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    policy <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">,</span> dtype<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token operator">=</span><span class="token punctuation">[</span>sum<span class="token punctuation">(</span>            <span class="token punctuation">[</span>env<span class="token punctuation">.</span>p<span class="token punctuation">(</span>next_s<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span>r<span class="token punctuation">(</span>next_s<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> gamma <span class="token operator">*</span> value<span class="token punctuation">[</span>next_s<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> next_s <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span>            a <span class="token keyword">in</span> range<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">]</span>        policy<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>add_noise<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> policy<span class="token punctuation">,</span> value</code></pre><h2 id="3-Tabular-model-free-强化学习"><a href="#3-Tabular-model-free-强化学习" class="headerlink" title="3. Tabular model-free 强化学习"></a>3. Tabular model-free 强化学习</h2><p>我们接下来的任务是实施<strong>Sarsa</strong>和<strong>Q-learning</strong>。 这里推荐使用small frozen lake来进行测试，因为对于big frozen lake来说，这些算法可能需要非常多的时间才能找到最佳策略。</p><h3 id="funcion-Sarsa"><a href="#funcion-Sarsa" class="headerlink" title="funcion Sarsa"></a>funcion Sarsa</h3><p><code>funcion Sarsa</code>接收environment，最大的episodes数，初始学习率，discount因子，初始exploration因子以及控制伪随机数生成器的seed（可选）。<strong>Note</strong>：学习率和探索因子随episode数量的增加而线性降低（例如，<code>eta [i]</code>包含episode <code>i</code>的学习率）。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sarsa</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> max_episodes<span class="token punctuation">,</span> eta<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> epsilon<span class="token punctuation">,</span> seed<span class="token operator">=</span>None<span class="token punctuation">,</span>policy0<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    random_state <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    eta <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>eta<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span>    epsilon <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>epsilon<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span>    q <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">,</span> env<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_episodes<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> epsilon<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>add_noise<span class="token punctuation">(</span>q<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span>        terminal <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> <span class="token operator">not</span> terminal<span class="token punctuation">:</span>            next_s<span class="token punctuation">,</span> r<span class="token punctuation">,</span> terminal <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> epsilon<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                next_a <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>add_noise<span class="token punctuation">(</span>q<span class="token punctuation">[</span>next_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                next_a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span>            q<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> eta<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token punctuation">(</span>gamma <span class="token operator">*</span> q<span class="token punctuation">[</span>next_s<span class="token punctuation">]</span><span class="token punctuation">[</span>next_a<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> q<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>            s <span class="token operator">=</span> next_s            a <span class="token operator">=</span> next_a        policy <span class="token operator">=</span> q<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policy0 <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>i<span class="token operator">%</span>f_evaluation<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>policy_equal<span class="token punctuation">(</span>env<span class="token punctuation">,</span> policy<span class="token punctuation">,</span> policy0<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sarsa achieve optima in iteration: "</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    policy <span class="token operator">=</span> q<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    value <span class="token operator">=</span> q<span class="token punctuation">.</span>max<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> policy<span class="token punctuation">,</span> value</code></pre><h3 id="funcion-Q-learning"><a href="#funcion-Q-learning" class="headerlink" title="funcion Q-learning"></a>funcion Q-learning</h3><p><code>funcion Q-learning</code>接收environment，最大的episodes数，初始学习率，discount因子，初始exploration因子以及控制伪随机数生成器的seed（可选）。<strong>Note</strong>：学习率和exploration因子随episode数量的增加而线性降低（例如，<code>eta [i]</code>包含episode <code>i</code>的学习率）。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">q_learning</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> max_episodes<span class="token punctuation">,</span> eta<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> epsilon<span class="token punctuation">,</span> seed<span class="token operator">=</span>None<span class="token punctuation">,</span>policy0<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    random_state <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    eta <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>eta<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span>    epsilon <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>epsilon<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span>    q <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">,</span> env<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_episodes<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        terminal <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> <span class="token operator">not</span> terminal<span class="token punctuation">:</span>            <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> epsilon<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                a <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>add_noise<span class="token punctuation">(</span>q<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span>            next_s<span class="token punctuation">,</span> r<span class="token punctuation">,</span> terminal <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>a<span class="token punctuation">)</span>            next_a <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>add_noise<span class="token punctuation">(</span>q<span class="token punctuation">[</span>next_s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            q<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> eta<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token punctuation">(</span>gamma <span class="token operator">*</span> q<span class="token punctuation">[</span>next_s<span class="token punctuation">]</span><span class="token punctuation">[</span>next_a<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> q<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>            s <span class="token operator">=</span> next_s        policy <span class="token operator">=</span> q<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policy0 <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>i<span class="token operator">%</span>f_evaluation<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>policy_equal<span class="token punctuation">(</span>env<span class="token punctuation">,</span> policy<span class="token punctuation">,</span> policy0<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"q-learning achieve optima in iteration: "</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    policy <span class="token operator">=</span> q<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    value <span class="token operator">=</span> q<span class="token punctuation">.</span>max<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> policy<span class="token punctuation">,</span> value</code></pre><p><strong>Note</strong>：基于Q的ε-greedy策略应该在给定状态最大化Q的操作之间随机打破联系。 这在鼓励exploration方面起着重要作用。</p><h2 id="4-Non-tabular-model-free-强化学习"><a href="#4-Non-tabular-model-free-强化学习" class="headerlink" title="4. Non-tabular model-free 强化学习"></a>4. Non-tabular model-free 强化学习</h2><p>接下来，我们将把frozen lake环境视为需要线性action-value函数近似值。 我们的任务是使用线性函数逼近实现Sarsa和Q-learning。 在此过程中，我们将学到tabular model-free强化学习是Non-tabular model-free强化学习的特例。</p><h3 id="class-LinearWrapper"><a href="#class-LinearWrapper" class="headerlink" title="class LinearWrapper"></a>class LinearWrapper</h3><p><code>class LinearWrapper</code>实现了一个wrapper，该wrapper的行为类似于为其构造函数提供的环境。 但是，方法<code>reset</code>和<code>step</code>在通常返回状态<code>s</code>时将返回<code>feature matrix</code>。 该特征矩阵的每行<code>a</code>包含代表该对动作的特征向量φ（s，a）和状态（s，a）。 方法<code>encode_state</code>负责通过这样的特征矩阵来表示状态。 更具体地，状态和动作的每个可能的pair都由不同的向量表示，其中除1以外的所有元素均为0。 因此，特征矩阵具有| S || A | 列。 方法<code>decode policy</code>接收由Non-tabular强化学习算法获得的参数矢量θ，并返回相应的贪婪policy及其value函数估计。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LinearWrapper</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>env <span class="token operator">=</span> env        self<span class="token punctuation">.</span>n_actions <span class="token operator">=</span> self<span class="token punctuation">.</span>env<span class="token punctuation">.</span>n_actions        self<span class="token punctuation">.</span>n_states <span class="token operator">=</span> self<span class="token punctuation">.</span>env<span class="token punctuation">.</span>n_states        self<span class="token punctuation">.</span>n_features <span class="token operator">=</span> self<span class="token punctuation">.</span>n_actions <span class="token operator">*</span> self<span class="token punctuation">.</span>n_states    <span class="token keyword">def</span> <span class="token function">encode_state</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        features <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_actions<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_features<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">:</span>            i <span class="token operator">=</span> np<span class="token punctuation">.</span>ravel_multi_index<span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_states<span class="token punctuation">,</span> self<span class="token punctuation">.</span>n_actions<span class="token punctuation">)</span><span class="token punctuation">)</span>            features<span class="token punctuation">[</span>a<span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>        <span class="token keyword">return</span> features    <span class="token keyword">def</span> <span class="token function">decode_policy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">:</span>        policy <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">,</span> dtype<span class="token operator">=</span>int<span class="token punctuation">)</span>        value <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>env<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_states<span class="token punctuation">)</span><span class="token punctuation">:</span>            features <span class="token operator">=</span> self<span class="token punctuation">.</span>encode_state<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            q <span class="token operator">=</span> features<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>            policy<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>q<span class="token punctuation">)</span>            value<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>q<span class="token punctuation">)</span>        <span class="token keyword">return</span> policy<span class="token punctuation">,</span> value    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>encode_state<span class="token punctuation">(</span>self<span class="token punctuation">.</span>env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">step</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>        state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done <span class="token operator">=</span> self<span class="token punctuation">.</span>env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>encode_state<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> policy<span class="token operator">=</span>None<span class="token punctuation">,</span> value<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>env<span class="token punctuation">.</span>render<span class="token punctuation">(</span>policy<span class="token punctuation">,</span> value<span class="token punctuation">)</span></code></pre><h3 id="function-linear-sarsa"><a href="#function-linear-sarsa" class="headerlink" title="function linear_sarsa"></a>function linear_sarsa</h3><p><code>function linear_sarsa</code>接收一个environment（由LinearWrapper包装），最大episode数，初始学习率，discount因子，初始exploration因子以及控制伪随机数生成器的seed（可选）。<strong>Note</strong>：学习率和exploration因子随episode数量的增加而线性降低（例如，<code>eta [i]</code>包含episode <code>i</code>的学习率）。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">linear_sarsa</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> max_episodes<span class="token punctuation">,</span> eta<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> epsilon<span class="token punctuation">,</span> seed<span class="token operator">=</span>None<span class="token punctuation">,</span>policy0<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    random_state <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    eta <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>eta<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span>    epsilon <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>epsilon<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span>    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_features<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_episodes<span class="token punctuation">)</span><span class="token punctuation">:</span>        features <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        q <span class="token operator">=</span> features<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>        done <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> random_state<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> epsilon<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>add_noise<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> random_state<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>n_actions <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token operator">not</span> done<span class="token punctuation">:</span>            features1<span class="token punctuation">,</span> r<span class="token punctuation">,</span> done <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>a<span class="token punctuation">)</span>            q1<span class="token operator">=</span>features1<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>            <span class="token keyword">if</span> random_state<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> epsilon<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>add_noise<span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                a1 <span class="token operator">=</span> random_state<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>n_actions <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            delta<span class="token operator">=</span>r<span class="token operator">+</span>gamma<span class="token operator">*</span>q1<span class="token punctuation">[</span>a1<span class="token punctuation">]</span><span class="token operator">-</span>q<span class="token punctuation">[</span>a<span class="token punctuation">]</span>            theta<span class="token operator">=</span>theta<span class="token operator">+</span>delta<span class="token operator">*</span>eta<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>features<span class="token punctuation">[</span>a<span class="token punctuation">]</span>            q<span class="token operator">=</span>q1            a <span class="token operator">=</span> a1            features<span class="token operator">=</span>features1        policy<span class="token punctuation">,</span>_ <span class="token operator">=</span> env<span class="token punctuation">.</span>decode_policy<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policy0 <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>i<span class="token operator">%</span>f_evaluation<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>policy_equal<span class="token punctuation">(</span>env<span class="token punctuation">.</span>env<span class="token punctuation">,</span> policy<span class="token punctuation">,</span> policy0<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"linear sarsa achieve optima in iteration: "</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> theta</code></pre><h3 id="function-linear-q-learning"><a href="#function-linear-q-learning" class="headerlink" title="function linear_q_learning"></a>function linear_q_learning</h3><p><code>function linear_q_learning</code>接收一个environment（由LinearWrapper包装），最大episode数，初始学习率，discount因子，初始exploration因子以及控制伪随机数生成器的seed（可选）。 <strong>Note</strong>：学习率和探索因子随episode数量的增加而线性降低（例如，<code>eta [i]</code>包含episode <code>i</code>的学习率）。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">linear_q_learning</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> max_episodes<span class="token punctuation">,</span> eta<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> epsilon<span class="token punctuation">,</span> seed<span class="token operator">=</span>None<span class="token punctuation">,</span>policy0<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    random_state <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    eta <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>eta<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span>    epsilon <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>epsilon<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span>    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>env<span class="token punctuation">.</span>n_features<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_episodes<span class="token punctuation">)</span><span class="token punctuation">:</span>        features <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        done <span class="token operator">=</span> <span class="token boolean">False</span>        q<span class="token operator">=</span>features<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token operator">not</span> done<span class="token punctuation">:</span>            <span class="token keyword">if</span> random_state<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> epsilon<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                a <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>add_noise<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                a <span class="token operator">=</span> random_state<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>n_actions <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            features1<span class="token punctuation">,</span> r<span class="token punctuation">,</span> done <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>a<span class="token punctuation">)</span>            q1<span class="token operator">=</span>features1<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>            delta <span class="token operator">=</span> r <span class="token operator">+</span> gamma <span class="token operator">*</span> np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>q1<span class="token punctuation">)</span> <span class="token operator">-</span> q<span class="token punctuation">[</span>a<span class="token punctuation">]</span>            theta <span class="token operator">=</span> theta <span class="token operator">+</span> delta <span class="token operator">*</span> eta<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> features<span class="token punctuation">[</span>a<span class="token punctuation">]</span>            q<span class="token operator">=</span>q1            features<span class="token operator">=</span>features1        policy<span class="token punctuation">,</span>_ <span class="token operator">=</span> env<span class="token punctuation">.</span>decode_policy<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>policy0 <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>i<span class="token operator">%</span>f_evaluation<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>policy_equal<span class="token punctuation">(</span>env<span class="token punctuation">.</span>env<span class="token punctuation">,</span> policy<span class="token punctuation">,</span> policy0<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> max_episodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"linear q-learning achieve optima in iteration: "</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> theta</code></pre><p>下面介绍了用于线性函数逼近的Q-learning控制算法。<strong>Note</strong>：该算法的变量命名稍有不同，并且为了简单起见省略了一些细节（例如学习率/exploration因子衰减）。</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E2%80%94Frozen%20Lake%E6%B8%B8%E6%88%8F/Q%E5%AD%A6%E4%B9%A0%E5%87%BD%E6%95%B0%E9%80%BC%E8%BF%91.png"></p><p><strong>Note</strong>：基于Q的ε-greedy策略应该在给定状态最大化Q的操作之间随机打破联系（上图的Line 9）。 这在鼓励exploration方面起着重要作用。</p><h2 id="5-Main-function"><a href="#5-Main-function" class="headerlink" title="5. Main function"></a>5. Main function</h2><p>我们最后的任务是编写一个main函数来使用我们分配实现的所有算法。 我们的main function应该如下所示：以small frozen lake为基准，使用policy iteration, value iteration, Sarsa control, Q-learning control, linear Sarsa control, 和linear Q-learning找到并渲染最佳策略。</p><p><strong>Note</strong>：这里，我增加了big lake，虽然big lake耗时，但是学习嘛，你懂的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>big<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    seed <span class="token operator">=</span> <span class="token number">23333333</span>    <span class="token comment" spellcheck="true"># small lake</span>    lake <span class="token operator">=</span>   <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># big lake</span>    lake_big <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> big<span class="token punctuation">:</span>        env <span class="token operator">=</span> FrozenLake<span class="token punctuation">(</span>lake_big<span class="token punctuation">,</span> slip<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> max_steps<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ATTENTION:You are running big lake,turn the 'big' parameter at the bottom of the file to 'False' and rerun the file to run small lake "</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        env <span class="token operator">=</span> FrozenLake<span class="token punctuation">(</span>lake<span class="token punctuation">,</span> slip<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> max_steps<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            <span class="token string">"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ATTENTION:You are running small lake,turn the 'big' parameter at the bottom of the file to 'True' and rerun the file to run big lake "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'# Model-based algorithms'</span><span class="token punctuation">)</span>    gamma <span class="token operator">=</span> <span class="token number">0.9</span>    theta <span class="token operator">=</span> <span class="token number">0.001</span>    max_iterations <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'## Policy iteration'</span><span class="token punctuation">)</span>    stt<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    policy<span class="token punctuation">,</span> value <span class="token operator">=</span> policy_iteration<span class="token punctuation">(</span>env<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> max_iterations<span class="token punctuation">)</span>    end<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span>policy<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Policy iteration time consuming: '</span><span class="token punctuation">,</span>end<span class="token operator">-</span>stt<span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'## Value iteration'</span><span class="token punctuation">)</span>    stt <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    policy0<span class="token punctuation">,</span> value <span class="token operator">=</span> value_iteration<span class="token punctuation">(</span>env<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> max_iterations<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span>policy0<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'value iteration time consuming: '</span><span class="token punctuation">,</span>end<span class="token operator">-</span>stt<span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'# Model-free algorithms'</span><span class="token punctuation">)</span>    max_episodes <span class="token operator">=</span> <span class="token number">2000</span>    eta <span class="token operator">=</span> <span class="token number">0.5</span>    epsilon <span class="token operator">=</span> <span class="token number">0.5</span>    <span class="token comment" spellcheck="true">#max_episodes = 80000#parameter for Task5</span>    <span class="token comment" spellcheck="true">#eta = 0.4</span>    <span class="token comment" spellcheck="true">#epsilon = 0.99</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'## Sarsa'</span><span class="token punctuation">)</span>    stt <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    policy<span class="token punctuation">,</span> value <span class="token operator">=</span> sarsa<span class="token punctuation">(</span>env<span class="token punctuation">,</span> max_episodes<span class="token punctuation">,</span> eta<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> epsilon<span class="token punctuation">,</span> seed<span class="token operator">=</span>seed<span class="token punctuation">,</span>policy0<span class="token operator">=</span>policy0<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span>policy<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Sarsa time consuming: '</span><span class="token punctuation">,</span> end <span class="token operator">-</span> stt<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'## Q-learning'</span><span class="token punctuation">)</span>    stt <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    policy<span class="token punctuation">,</span> value <span class="token operator">=</span> q_learning<span class="token punctuation">(</span>env<span class="token punctuation">,</span> max_episodes<span class="token punctuation">,</span> eta<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> epsilon<span class="token punctuation">,</span> seed<span class="token operator">=</span>seed<span class="token punctuation">,</span>policy0<span class="token operator">=</span>policy0<span class="token punctuation">)</span>    env<span class="token punctuation">.</span>render<span class="token punctuation">(</span>policy<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Q-learning time consuming: '</span><span class="token punctuation">,</span> end <span class="token operator">-</span> stt<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    linear_env <span class="token operator">=</span> LinearWrapper<span class="token punctuation">(</span>env<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'## Linear Sarsa'</span><span class="token punctuation">)</span>    stt <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    parameters <span class="token operator">=</span> linear_sarsa<span class="token punctuation">(</span>linear_env<span class="token punctuation">,</span> max_episodes<span class="token punctuation">,</span> eta<span class="token punctuation">,</span>                              gamma<span class="token punctuation">,</span> epsilon<span class="token punctuation">,</span> seed<span class="token operator">=</span>seed<span class="token punctuation">,</span>policy0<span class="token operator">=</span>policy0<span class="token punctuation">)</span>    policy<span class="token punctuation">,</span> value <span class="token operator">=</span> linear_env<span class="token punctuation">.</span>decode_policy<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>    linear_env<span class="token punctuation">.</span>render<span class="token punctuation">(</span>policy<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'linear sarsa iteration time consuming: '</span><span class="token punctuation">,</span> end <span class="token operator">-</span> stt<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'## Linear Q-learning'</span><span class="token punctuation">)</span>    stt <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    parameters <span class="token operator">=</span> linear_q_learning<span class="token punctuation">(</span>linear_env<span class="token punctuation">,</span> max_episodes<span class="token punctuation">,</span> eta<span class="token punctuation">,</span>                                   gamma<span class="token punctuation">,</span> epsilon<span class="token punctuation">,</span> seed<span class="token operator">=</span>seed<span class="token punctuation">,</span>policy0<span class="token operator">=</span>policy0<span class="token punctuation">)</span>    policy<span class="token punctuation">,</span> value <span class="token operator">=</span> linear_env<span class="token punctuation">.</span>decode_policy<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>    linear_env<span class="token punctuation">.</span>render<span class="token punctuation">(</span>policy<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'linear Q-learning time consuming: '</span><span class="token punctuation">,</span> end <span class="token operator">-</span> stt<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>big<span class="token operator">=</span><span class="token boolean">True</span> <span class="token comment" spellcheck="true">#可调整参数</span>evaluate_policy<span class="token operator">=</span><span class="token boolean">False</span> <span class="token comment" spellcheck="true">#可调整参数</span><span class="token keyword">if</span> big<span class="token punctuation">:</span>    f_evaluation<span class="token operator">=</span><span class="token number">200</span><span class="token keyword">else</span><span class="token punctuation">:</span>    f_evaluation<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">if</span> <span class="token operator">not</span> evaluate_policy<span class="token punctuation">:</span>    f_evaluation<span class="token operator">=</span><span class="token number">1000000000</span>main<span class="token punctuation">(</span>big<span class="token punctuation">)</span></code></pre><p>在运行时，有两个参数可以调整：</p><ul><li>第一个<code>big</code></li></ul><pre class=" language-python"><code class="language-python">big <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 运行small frozen lake</span>big <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true"># 运行big frozen lake</span></code></pre><ul><li>第二个<code>evaluate_policy</code></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#表示定期评估由model-free方法生成的策略，以查看是否找到了最佳策略，</span><span class="token comment" spellcheck="true">#并停止model-free方法，在策略最佳时打印结果</span>evaluate_policy <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true">#表示运行所有model-free方法而不评估agent是否已达到最佳策略，</span><span class="token comment" spellcheck="true">#并且仅在达到max_episodes时停止model-free方法并打印结果。</span>evaluate_policy <span class="token operator">=</span> <span class="token boolean">False</span> </code></pre><p><code>f_evaluation</code>用于确定多少episode以评估agent在Sarsa和Q-learning中是否实现了最佳策略，因为评估每集的政策非常耗时，尤其是在big lake。请勿在不必要的情况下进行修改。</p><p>OK，到这里，我们就已经完成所有的代码内容了，下一部分我们将对实验结果进行深入的分析。</p>]]></content>
      
      
      <categories>
          
          <category> 项目-AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Reinforcement learning </tag>
            
            <tag> Sarsa </tag>
            
            <tag> Q-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实时渲染技术的分析报告</title>
      <link href="2020/12/07/shi-shi-xuan-ran-ji-zhu-de-fen-xi-bao-gao/"/>
      <url>2020/12/07/shi-shi-xuan-ran-ji-zhu-de-fen-xi-bao-gao/</url>
      
        <content type="html"><![CDATA[<h1 id="Analysis-based-on-Real-time-Rendering-technology"><a href="#Analysis-based-on-Real-time-Rendering-technology" class="headerlink" title="Analysis based on Real-time Rendering technology"></a>Analysis based on Real-time Rendering technology</h1><p>By Jianxiang Gao</p><p>School of Electronic Engineering and Computer Science</p><p>Queen Mary University of London </p><p>London E1 4NS </p><p>December 2020</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>This report is about analyzing the development of real-time rendering technology. The report is aimed to understand the current advanced technologies in the real-time rendering field, including rasterization, ray tracing and hybrid real-time rendering. This report is inclined towards the analysis of the advantages and disadvantages of popular rendering technologies to get the development direction of the future rendering field.</p><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>The work described in this report aims to analyze the current status and future trends of real-time rendering technology. This chapter mainly introduces the background of real-time rendering technology and related research results and combs the outline of the report.</p><h3 id="1-1-Background"><a href="#1-1-Background" class="headerlink" title="1.1 Background"></a>1.1 Background</h3><p>Real-time rendering means that the computer renders the data into a picture in each frame and presents the 3D scene on the screen. Because the data of each frame is constantly changing, the picture of each frame is constantly changing after being presented. In addition, the time of each frame of real-time rendering is very short (for example, one frame per 16 milliseconds, that is, 60 frames per second). Therefore, real-time rendering technology requires very high computing speed. Generally, GPUs with strong parallel computing capabilities are used (Graphics Processing Unit) to perform rendering processing. This extremely high-speed rendering is mainly used in the field of image interaction, such as the game field, where every frame of the game screen must respond to changes brought about by the player’s input. In addition to games, it is also used in other fields that require real-time human-computer interaction such as film, animation, virtual reality and so on (Akenine-Möller, 2019).</p><p>In the past few decades, due to the limitations of computer hardware, rendering could not be achieved in real-time. Therefore, people rely on rasterization technology to process most real-time graphics, which can display three-dimensional objects on a two-dimensional screen with fast speed and good results. The main reason why rasterization can be widely used is that it fits well with the GPU architecture, and with the continuous optimization of real-time rendering algorithms based on rasterization and the continuous improvement of GPU hardware, rasterization technology has been a leader in rendering for decades.</p><p>In contrast, another way of rendering, ray tracing, is difficult to support the parallel algorithm of the GPU architecture due to the randomness of ray sampling, and it takes a long time to iterate. Therefore, ray tracing rendering was mainly used for offline rendering in the past, rather than real-time rendering.</p><p>With the improvement of GPU performance, the speed of real-time calculation is getting faster and the accuracy of the calculation picture is getting higher and higher, and real-time rendering technology based on ray tracing is also widely used. In 2018, NVIDIA launched the RTX real-time ray tracing technology, and Microsoft developed the DXR (DirectX Ray) Tracing API, which replaced most of the technologies used in today’s standard rendering with very sophisticated optical calculations to replicate the light’s performance in the real environment. Behaviour, providing more realistic images (Champagne, 2020).</p><p>However, the current hardware is not enough to support a complete ray tracing rendering pipeline, so the combination of ray tracing and rasterization not only makes up for the shortcomings of rasterization but also ensures the real-time rendering. This hybrid rendering pipeline has become the main direction in the real-time rendering field.</p><h3 id="1-2-Outline-of-the-report"><a href="#1-2-Outline-of-the-report" class="headerlink" title="1.2 Outline of the report"></a>1.2 Outline of the report</h3><p>The first chapter provides the background of the Real-time Rendering technology and the related works.</p><p>The second chapter mainly explains the simplified simulation method of the rendering process and introduces three different real-time rendering techniques, including rasterization, ray tracing and hybrid real-time rendering.</p><p>The third chapter mainly describes the limitations of Real-time Rendering technology and proposes the development direction that can be improved in the future.</p><p>The fourth chapter describes the summary of the report.</p><h2 id="2-Real-time-rendering-technology"><a href="#2-Real-time-rendering-technology" class="headerlink" title="2. Real-time rendering technology"></a>2. Real-time rendering technology</h2><p>This chapter further expands the background introduction of the previous chapter, including the existing real-time rendering technology such as Rasterization, Ray tracing and Hybrid Rendering.</p><h3 id="2-1-Graphics-rendering"><a href="#2-1-Graphics-rendering" class="headerlink" title="2.1 Graphics rendering"></a>2.1 Graphics rendering</h3><p>Rendering is a technology in the field of graphics, which mainly studies the process of mapping three-dimensional data to two-dimensional images, simulating the functions of cameras and eyes in real life. From a physical point of view, light is emitted from a light source, and after various physical phenomena such as refraction and reflection occur in space, external objects are mapped to the retina and film, and then transformed into an image after entering the imaging plane. It can be seen that rendering can be summarized as a computer simulation behaviour with light sources, scenes, and cameras as the main research objects and optical physics as the theoretical basis.</p><h4 id="2-1-1-Render-object"><a href="#2-1-1-Render-object" class="headerlink" title="2.1.1 Render object"></a>2.1.1 Render object</h4><p>Since the objects and processes in the real world are complex, in order to simulate behaviours to obtain sufficiently approximate results, it is necessary to perform simplified simulations on the three objects of camera, scene, and light source. </p><p><strong>1. Camera</strong></p><p>According to the principle of human eye imaging, light enters the retina through the pupil and is transmitted to the brain by tens of millions of photosensitive neurons behind the retina. After the simplified simulation, the combination of neurons and retina can be transformed into a two-dimensional matrix, which is called an image. Each data unit in the matrix simulates the optical information recorded by the neuron at the corresponding position, called a pixel. Therefore, the process of solving the image is the process of solving the characteristic position and angle of each pixel in a specific light source and scene, and the process of light incident on the pixel. In other words, by solving for all pixels, a complete image can be obtained.</p><p><strong>2. Scene</strong></p><p>In graphics, complex real objects are generally decomposed into two parts: model and material. The model determines the overall outline of the object at the macro level, and the material summarizes the detailed information of the object at the micro-level.</p><ul><li>Model: Use as little information as possible to summarize high-precision shape features. On the one hand, for regular objects, such as spheres, use formulas and parameters to summarize. On the other hand, for irregular objects, use grid or volume data to generalize.</li><li>Material: For the more detailed parts, such as the small unevenness and roughness of the surface of the object, even the uneven distribution of the micro-surface, the degree of electromagnetic wave absorption and disturbance caused by different material media causes refraction, scattering, reflection, and anisotropy Related optical phenomena such as transparency and transparency are unified into the material.</li></ul><p><strong>3. Light source</strong></p><p>To describe the light source in rendering, it is necessary to simplify the shape of the light source and the degree of light emission. Similar to the simulation of the scene, the shape of the light source can also be described by different types of geometric data, and the irradiance information at different positions of the light source is simplified to Part of similar material. At the same time, as the light spreads in the scene, any light-receiving object will also emit light after reflection and other effects, and the light source is regarded as a part of the scene.</p><h4 id="2-1-2-Rasterization"><a href="#2-1-2-Rasterization" class="headerlink" title="2.1.2 Rasterization"></a>2.1.2 Rasterization</h4><p>Before the rasterization operation, it needs to go through two stages of primitive assembly and screen mapping to transform the object coordinates to window coordinates. Rasterization is a discretization process, that is, the process of converting 3D continuous objects into discrete screen pixels. Specifically, this process includes two stages: triangle assembly and triangle traversal. First, rasterization will determine the fragments covered by the primitives, use vertex attribute interpolation to obtain the attribute information of the fragments, and then send it to the fragment shader for colour calculation. The difference is that fragments are candidates for pixels, so only fragments that pass subsequent tests will become the final displayed pixels (Akenine-Möller, 2019).</p><p><img src="https://raw.githubusercontent.com/JianxiangGao/hexo_blog_img/master/%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93%E6%8A%80%E6%9C%AF%E7%9A%84%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/Rasterization.png" alt="Figure 1. Rasterization (Story, 2014)."></p><p>The development of GPU has a strong dependence on the development of rasterization. In order to optimize rasterization, most of the GPUs so far have used the SIMD architecture. Different data are calculated under the same instruction so that the GPU can perform rasterization and rendering calculations for each pixel or triangle at high speed in parallel. Although the research of real-time rendering based on rasterization is still developing rapidly, new algorithms and stronger GPUs will bring better pictures every year, but the real physical effects have not been completely solved, and the improvement of the picture has gradually encountered a bottleneck.</p><h4 id="2-1-3-Ray-tracing"><a href="#2-1-3-Ray-tracing" class="headerlink" title="2.1.3 Ray tracing"></a>2.1.3 Ray tracing</h4><p>A powerful feature of ray tracing is that it can greatly facilitate the content creation process. One of the most direct ways is to directly implement offline light transfer simulation algorithms, such as Path Tracing, in a real-time rendering engine that has already used physical shading and lighting. Specifically, in the scene editor of the rendering engine, you can directly switch to the GPU Path Tracing rendering mode with one click, and it only takes a few seconds to get the most correct solution for the current lighting. This has greatly improved the process of creating scenes, editing materials and lighting in game development.</p><p>Another big improvement is to use DXR to directly implement Light Map baking. Most of the existing engines have an external Light Map Baker, which uses completely different code and implementation from the renderer of the engine itself. The current workflow is often to export the scene from the engine, input it to the Light Map Baker, and then Baker outputs the calculated Light Map back. Because now ray tracing is officially added to the graphics API, it is very simple to directly implement the GPU-based Light Map Baker inside the engine. For example, the Light Map Baker that can be previewed in real-time in the engine editor is directly implemented in Unreal Engine 4. Because Path Tracer comes with all the resources and material shaders of the engine itself, with the ray-tracing API, both the cost of the lightmap process itself and the cost of developing Light Map rendering software have been greatly reduced. At the same time, the waiting time for calculation will be greatly shortened due to GPU acceleration (Keller, 2019).</p><h3 id="2-2-Graphics-API-and-rendering-engine"><a href="#2-2-Graphics-API-and-rendering-engine" class="headerlink" title="2.2 Graphics API and rendering engine"></a>2.2 Graphics API and rendering engine</h3><p>Rendering programming is very different from another programming. Since rendering is a complex process involving CPU, GPU and their communication, in rendering programming, it is not only necessary to write correct and efficient CPU logic and highly parallel GPU rendering algorithms, but also to perform efficient parallel CPU-GPU communication mode. In order to better manage the communication between CPU and GPU, Microsoft released DirectX12 graphics API in 2014. Compared with DX11, DX12 greatly exposes the underlying interface and also deletes many encapsulated tools. However, NVIDIA released RTX at GDC 2018, which added ray tracing technology (Stich, 2020). This has had a profound impact on the DirectX graphics API.</p><p><img src="https://developer-blogs.nvidia.com/wp-content/uploads/2018/03/raytrace_01-625x630.png" alt="Figure 2. The ray-tracing pipeline (Stich, 2020)."></p><p>The improvement of DX12 at the API level this time is mainly to add a new pipeline to perform ray tracing tasks. Therefore, in addition to the existing rasterization rendering and general calculations, the way the GPU initiates tasks adds a new call to trace rays. If the pipeline of traditional rasterization is a process of turning triangles into pixels with a triangle as a unit, then the pipeline of ray tracing uses a ray as a unit to describe the process of intersecting and calculating the light rays. Unlike the rasterized linear pipeline, the ray-tracing pipeline can derive another ray by recursively calling TraceRay() and execute another pipeline instance.</p><h3 id="2-3-Hybrid-Rendering"><a href="#2-3-Hybrid-Rendering" class="headerlink" title="2.3 Hybrid Rendering"></a>2.3 Hybrid Rendering</h3><p>From the research results of rasterization rendering and ray tracing rendering, it can be found that the current mainstream real-time ray tracing technology in the industry essentially uses the “traditional rasterization rendering pipeline + ray tracing” Hybrid Rendering Pipeline form. In other words, rasterization is still the main rendering process of the current mainstream rendering pipeline in the industry, and ray tracing technology is generally only used for rendering expressions of secondary light effects, such as reflections, shadows, ambient light occlusion, and translucent rendering.</p><p>In 2018, Nvidia launched the Turing architecture, and real-time ray tracing is truly popular in the civilian field. Deferred ray tracing is currently the most successful implementation method, which uses delayed rendering to quickly realize the generation and intersection of Eye Rays, and records the additional information needed in the G-Buffer to calculate GI and denoise. Use very few ray samples to perform Monte Carlo integration in the time domain, and then use multiple time-domain filters to denoise, realize the difficult parts of rasterization such as GI, shadows, and motion blur, and greatly improve the quality of the picture ( Kilgariff, Moreton, Stam and Bell, 2018).</p><p>Although the development of hardware has brought innovations to real-time rendering, some real-time rendering fields, such as semi-transparent objects and scattering rendering, blurry reflections and soft shadows, require a lot of sampled light to be implemented, even the latest GPUs cannot fully meet the needs of computing power. The current mainstream approach is to reduce the sampling accuracy of each frame to ensure real-time performance, use re-sampling technology to obtain additional sampling information from the previous image at a very low cost, and then use post-processing algorithms to filter the noise to obtain a rendering result in higher quality. This is the hybrid real-time rendering technology that combines rasterization and ray tracing.</p><p>In this chapter, it has been explained that three real-time rendering technologies specifically. The chapter that follows moves on to describe the limitation of Hybrid Rendering Technology and proposes the direction of future work.</p><h2 id="3-Analysis"><a href="#3-Analysis" class="headerlink" title="3. Analysis"></a>3. Analysis</h2><p>The rendering technology that combines rasterization and ray tracing creates more possibilities in the rendering field. However, as a new type of rendering technology, it still has limitations in ray tracing. The following sections analyze the current limitations of hybrid real-time rendering technology and propose areas that should be improved for future work.</p><h3 id="3-1-Limitation"><a href="#3-1-Limitation" class="headerlink" title="3.1 Limitation"></a>3.1 Limitation</h3><p>The main limitations of hybrid real-time rendering technology are focused on ray tracing issues. In principle, ray tracing is more suitable for rendering most special effects than rasterization. There are many approximate solutions for shadows, environmental occlusion and reflection in real-time rendering. At the same time, these methods also have various problems caused by various approximations.</p><ul><li><p>For shadows, such as Shadow Mapping, the sampling rate is inconsistent with the sampling rate of the screen space, which requires a lot of manual adjustment and various artifacts, such as shadow acne, peter panning, etc.</p></li><li><p>For environmental occlusion, the results obtained by traditional screen space algorithms are more like edge detection, in other words, basically, all corners are darkened, and there will be a circle of black borders around the object, so it cannot cover the outside of the screen. Calculations.</p></li><li><p>For reflections, such as SSR (Screen Space Reflections), the main reason is that there is no way to render the triangles that are reflected off the screen. For Light Probes, the pre-calculation process usually only calculates the viewing angle light and the colour surface perpendicular to the situation, which makes the result of Glossy reflection lose many interesting characteristics, such as reflection elongated when the viewing angle is low.</p></li></ul><p>Another major problem is the huge amount of calculation required. Unlike rasterized rendering, ray tracing uses rays to sample the scene information around the shading point, so it does not make many approximations to the rendering equation. But the problem with ray tracing is that for most scenes, the solution of the rendering equation requires a large number of samples to get a low variance estimation. The number of samples per pixel in offline rendering is usually several hundred to several thousand. For real-time rendering, because the time budget for each frame is only 16 milliseconds, the affordable sample budget is far from enough to get a reliable solution to the rendering equation. The result is that there will be a lot of noise on the rendered pictures due to insufficient samples. Therefore, for ray tracing rendering, some algorithms, such as the Denoising algorithm, are needed to perform real-time noise reduction processing for ray tracing results of a certain number of samples (Galvan, 2020).</p><h3 id="3-2-Future-work"><a href="#3-2-Future-work" class="headerlink" title="3.2 Future work"></a>3.2 Future work</h3><p>In terms of rendering strategy, the currently released real-time ray tracing technology mostly reduces the number of samples per pixel and then cooperates with noise reduction technology and digital signal processing technology to achieve rendering results similar to real performance under limited computing power. Under this set of technical forms, product-level ray tracing reflections, ray tracing ambient light occlusion, ray tracing shadows and other global effects that are difficult to handle with traditional rasterization techniques, also show very high quality (Einig, 2017).</p><p>With the development of hardware, real-time rendering has gradually replaced the simplified model idea of sacrificing realism and improving computing efficiency with a ray-tracing model based on real physical rendering. However, the current hardware has not been developed enough to support a complete real-time ray tracing algorithm. In the past ten years, how to use a small amount of ray tracing to supplement the effect based on decades of research based on rasterization real-time rendering. Will be the mainstream trend of graphics.</p><p>Therefore, Hybrid Rendering Pipeline will be the main technical form carried by real-time ray tracing technology for many years to come. How to completely strip the rasterization pipeline, complete the switch to a purely ray tracing-based rendering pipeline and achieve a product-level interaction rate, is the most essential and ideal problem of real-time rendering technology that needs to be overcome.</p><p>This chapter has analysed the causes of real-time rendering technology’s limitations and has argued that the future work about how to improve the hybrid real-time rendering technology.</p><h2 id="4-Conclusion"><a href="#4-Conclusion" class="headerlink" title="4. Conclusion"></a>4. Conclusion</h2><p>In conclusion, the project was undertaken to analyze the development of real-time rendering technology. Firstly, the paper shows what is the rendering and how hardware upgrades affect the optimization of real-time rendering technology. Secondly, the process of real-time rendering and three real-time rendering methods are further introduced. And in the final part, it was concerned with analysing the limitations of popular real-time rendering technology and discussing the direction of future development. As a technology that plays an important role in various fields, real-time rendering technology is constantly being improved with hardware updates. With the popularity of ray tracing technology in the real-time rendering field, hybrid real-time rendering combining rasterization and ray tracing is a more important research direction in the future.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Akenine-Möller, T., Haines, E. and Hoffman, N., 2019. <em>Real-time rendering</em>. Crc Press.</p><p>Champagne, R., 2020. <em>Real-Time Ray Tracing Realized: RTX Brings The Future Of Graphics To Millions | NVIDIA Blog</em>. [online] The Official NVIDIA Blog. Available at: <a href="https://blogs.nvidia.com/blog/2020/08/25/rtx-real-time-ray-tracing/">https://blogs.nvidia.com/blog/2020/08/25/rtx-real-time-ray-tracing/</a> [Accessed 1 December 2020].</p><p>Einig, M., 2017. <em>Hybrid Rendering For Real-Time Lighting: Ray Tracing Vs Rasterization</em>. [online] Imagination. Available at: <a href="https://www.imaginationtech.com/blog/hybrid-rendering-for-real-time-lighting/">https://www.imaginationtech.com/blog/hybrid-rendering-for-real-time-lighting/</a> [Accessed 1 December 2020].</p><p>Galvan, A., 2020. <em>Ray Tracing Denoising</em>. [online] Alain.xyz. Available at: <a href="https://alain.xyz/blog/ray-tracing-denoising">https://alain.xyz/blog/ray-tracing-denoising</a> [Accessed 1 December 2020].</p><p>Keller, A., Viitanen, T., Barré-Brisebois, C., Schied, C. and McGuire, M., 2019, July. Are we done with ray tracing?. In <em>SIGGRAPH Courses</em> (pp. 3-1).</p><p>Kilgariff, E., Moreton, H., Stam, N. and Bell, B., 2018. <em>NVIDIA Turing Architecture In-Depth | NVIDIA Developer Blog</em>. [online] NVIDIA Developer Blog. Available at: <a href="https://developer.nvidia.com/blog/nvidia-turing-architecture-in-depth/">https://developer.nvidia.com/blog/nvidia-turing-architecture-in-depth/</a> [Accessed 1 December 2020].</p><p>Stich, M., 2018. <em>Introduction To NVIDIA RTX And Directx Ray Tracing | NVIDIA Developer Blog</em>. [online] NVIDIA Developer Blog. Available at: <a href="https://developer.nvidia.com/blog/introduction-nvidia-rtx-directx-ray-tracing/">https://developer.nvidia.com/blog/introduction-nvidia-rtx-directx-ray-tracing/</a> [Accessed 1 December 2020].</p><p>Stich, M., 2018. <em>The Ray Tracing Pipeline</em>. [image] Available at: <a href="https://developer.nvidia.com/blog/introduction-nvidia-rtx-directx-ray-tracing/">https://developer.nvidia.com/blog/introduction-nvidia-rtx-directx-ray-tracing/</a> [Accessed 1 December 2020].</p><p>Story, J., 2014. <em>Solid Fill - Conservative Raster OFF</em>. [image] Available at: <a href="https://developer.nvidia.com/content/dont-be-conservative-conservative-rasterization">https://developer.nvidia.com/content/dont-be-conservative-conservative-rasterization</a> [Accessed 1 December 2020].</p>]]></content>
      
      
      <categories>
          
          <category> 个人向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Games develpment </tag>
            
            <tag> Real-time Rendering </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
